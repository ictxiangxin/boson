"""
    Boson v0.1
    By: ict
    Email: ictxiangxin@gmail.com

    This code generated by boson python code generator.
    You need fill some reduce code to let it available.
"""


terminal_index = {
    "power": 0,
    "plus":  1,
    "minus": 2,
    "times": 3,
    "bl":    4,
    "div":   5,
    "br":    6,
    "int":   7,
    "float": 8,
    "$":     9,
}

action_table = [
    ["e",   "e",   "e",   "e",   "s8",  "e",   "e",   "s7",  "s4",    "e"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",    "r5"],
    ["s9",  "e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",    "r9"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",   "r12"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",    "r7"],
    ["e",   "e",   "e",   "s10", "e",   "s11", "e",   "e",   "e",    "r4"],
    ["e",   "s13", "s12", "e",   "e",   "e",   "e",   "e",   "e",     "a"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",    "r8"],
    ["e",   "e",   "e",   "e",   "s16", "e",   "e",   "s20", "s17",   "e"],
    ["e",   "e",   "e",   "e",   "s8",  "e",   "e",   "s7",  "s4",    "e"],
    ["e",   "e",   "e",   "e",   "s8",  "e",   "e",   "s7",  "s4",    "e"],
    ["e",   "e",   "e",   "e",   "s8",  "e",   "e",   "s7",  "s4",    "e"],
    ["e",   "e",   "e",   "e",   "s8",  "e",   "e",   "s7",  "s4",    "e"],
    ["e",   "e",   "e",   "e",   "s8",  "e",   "e",   "s7",  "s4",    "e"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "r5",  "e",   "e",     "e"],
    ["s27", "e",   "e",   "e",   "e",   "e",   "r9",  "e",   "e",     "e"],
    ["e",   "e",   "e",   "e",   "s16", "e",   "e",   "s20", "s17",   "e"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "r7",  "e",   "e",     "e"],
    ["e",   "e",   "e",   "s29", "e",   "s30", "r4",  "e",   "e",     "e"],
    ["e",   "s32", "s31", "e",   "e",   "e",   "s33", "e",   "e",     "e"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "r8",  "e",   "e",     "e"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "r12", "e",   "e",     "e"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",    "r6"],
    ["s9",  "e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",   "r11"],
    ["s9",  "e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",   "r10"],
    ["e",   "e",   "e",   "s10", "e",   "s11", "e",   "e",   "e",    "r2"],
    ["e",   "e",   "e",   "s10", "e",   "s11", "e",   "e",   "e",    "r3"],
    ["e",   "e",   "e",   "e",   "s16", "e",   "e",   "s20", "s17",   "e"],
    ["e",   "s32", "s31", "e",   "e",   "e",   "s35", "e",   "e",     "e"],
    ["e",   "e",   "e",   "e",   "s16", "e",   "e",   "s20", "s17",   "e"],
    ["e",   "e",   "e",   "e",   "s16", "e",   "e",   "s20", "s17",   "e"],
    ["e",   "e",   "e",   "e",   "s16", "e",   "e",   "s20", "s17",   "e"],
    ["e",   "e",   "e",   "e",   "s16", "e",   "e",   "s20", "s17",   "e"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",    "r1"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "r6",  "e",   "e",     "e"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "r1",  "e",   "e",     "e"],
    ["s27", "e",   "e",   "e",   "e",   "e",   "r11", "e",   "e",     "e"],
    ["s27", "e",   "e",   "e",   "e",   "e",   "r10", "e",   "e",     "e"],
    ["e",   "e",   "e",   "s29", "e",   "s30", "r2",  "e",   "e",     "e"],
    ["e",   "e",   "e",   "s29", "e",   "s30", "r3",  "e",   "e",     "e"],
]

non_terminal_index = {
    "D": 0,
    "N": 1,
    "F": 2,
    "T": 3,
    "E": 4,
}

goto_table = [
    [1,  3,  2,  5,   6],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [14, 21, 15, 18, 19],
    [22, 3,  -1, -1, -1],
    [1,  3,  23, -1, -1],
    [1,  3,  24, -1, -1],
    [1,  3,  2,  25, -1],
    [1,  3,  2,  26, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [14, 21, 15, 18, 28],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [34, 21, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [14, 21, 36, -1, -1],
    [14, 21, 37, -1, -1],
    [14, 21, 15, 38, -1],
    [14, 21, 15, 39, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
]

reduce_symbol_sum = {
    0:  1,
    1:  3,
    2:  3,
    3:  3,
    4:  1,
    5:  1,
    6:  3,
    7:  1,
    8:  1,
    9:  1,
    10: 3,
    11: 3,
    12: 1,
}

reduce_to_non_terminal = {
    0:  "start",
    1:  "D",
    2:  "E",
    3:  "E",
    4:  "E",
    5:  "F",
    6:  "F",
    7:  "N",
    8:  "N",
    9:  "T",
    10: "T",
    11: "T",
    12: "D",
}


def grammar_analysis(token_line):
    """
        Add some data structure definition code here...
    """
    stack = [0]
    token_index = 0
    while token_index < len(token_line):
        token = token_line[token_index]
        token_type = token[0]
        now_state = stack[-1]
        operation = action_table[now_state][terminal_index[token_type]]
        operation_flag = operation[0]
        if operation_flag == "e":
            raise Exception("Grammar error: " + " ".join([t[1] for t in token_line]))
        elif operation_flag == "s":
            operation_number = int(operation[1:])
            stack.append(operation_number)
            token_index += 1
            """
                Add some code for shift action here...
            """
        elif operation_flag == "r":
            operation_number = int(operation[1:])
            reduce_sum = reduce_symbol_sum[operation_number]
            for _ in range(reduce_sum):
                stack.pop()
            now_state = stack[-1]
            stack.append(goto_table[now_state][non_terminal_index[reduce_to_non_terminal[operation_number]]])
            if operation_number == 1:
                """
                    Add some code for reduce 1 here...
                    D -> bl E br
                """
                pass
            elif operation_number == 2:
                """
                    Add some code for reduce 2 here...
                    E -> E minus T
                """
                pass
            elif operation_number == 3:
                """
                    Add some code for reduce 3 here...
                    E -> E plus T
                """
                pass
            elif operation_number == 4:
                """
                    Add some code for reduce 4 here...
                    E -> T
                """
                pass
            elif operation_number == 5:
                """
                    Add some code for reduce 5 here...
                    F -> D
                """
                pass
            elif operation_number == 6:
                """
                    Add some code for reduce 6 here...
                    F -> F power D
                """
                pass
            elif operation_number == 7:
                """
                    Add some code for reduce 7 here...
                    N -> float
                """
                pass
            elif operation_number == 8:
                """
                    Add some code for reduce 8 here...
                    N -> int
                """
                pass
            elif operation_number == 9:
                """
                    Add some code for reduce 9 here...
                    T -> F
                """
                pass
            elif operation_number == 10:
                """
                    Add some code for reduce 10 here...
                    T -> T div F
                """
                pass
            elif operation_number == 11:
                """
                    Add some code for reduce 11 here...
                    T -> T times F
                """
                pass
            elif operation_number == 12:
                """
                    Add some code for reduce 12 here...
                    D -> N
                """
                pass
            else:
                raise Exception("Invalid reduce number: %d" % operation_number)
        elif operation_flag == "a":
            break
        else:
            raise Exception("Invalid action: %s" % operation)
    """
        Add some postprocessing code here...
    """
