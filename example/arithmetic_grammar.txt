%start_symbol S ;
%grammar_analyzer_name simple_calculate ;
%lexical_analyzer_name calculate_tokenize ;
%symbol_stack_name symbol_stack ;


@ending
@@
return symbol_stack[0]
@@


S : E { $$ = $1 }
  ;
E : E '+' T { $$ = [$2[1], $1, $3] }
  | E '-' T { $$ = [$2[1], $1, $3] }
  | T { $$ = $1 }
  ;
T : T '*' F { $$ = [$2[1], $1, $3] }
  | T '/' F { $$ = [$2[1], $1, $3] }
  | F { $$ = $1 }
  ;
F : F '^' D { $$ = [$2[1], $1, $3] }
  | D { $$ = $1 }
  ;
D : '(' E ')' { $$ = $2 }
  | int { $$ = $1[1] }
  ;


@extend
@@
expr = input("expression: ")
expr_token = calculate_tokenize(expr)
print(simple_calculate(expr_token))
@@
