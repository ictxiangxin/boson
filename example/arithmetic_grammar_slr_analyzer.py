"""
    Boson v0.3
    By: ict
    Email: ictxiangxin@gmail.com

    This code generated by boson python code generator.
"""


terminal_index = {
    "bl":    0,
    "br":    1,
    "div":   2,
    "float": 3,
    "int":   4,
    "minus": 5,
    "plus":  6,
    "power": 7,
    "times": 8,
    "$":     9,
}

action_table = [
    ["s5",  "e",   "e",   "s8",  "s6",  "e",   "e",   "e",   "e",     "e"],
    ["e",   "e",   "e",   "e",   "e",   "s9",  "s10", "e",   "e",     "a"],
    ["e",   "r12", "r12", "e",   "e",   "r12", "r12", "r12", "r12", "r12"],
    ["e",   "r9",  "r9",  "e",   "e",   "r9",  "r9",  "s11", "r9",   "r9"],
    ["e",   "r5",  "r5",  "e",   "e",   "r5",  "r5",  "r5",  "r5",   "r5"],
    ["s5",  "e",   "e",   "s8",  "s6",  "e",   "e",   "e",   "e",     "e"],
    ["e",   "r8",  "r8",  "e",   "e",   "r8",  "r8",  "r8",  "r8",   "r8"],
    ["e",   "r4",  "s13", "e",   "e",   "r4",  "r4",  "e",   "s14",  "r4"],
    ["e",   "r7",  "r7",  "e",   "e",   "r7",  "r7",  "r7",  "r7",   "r7"],
    ["s5",  "e",   "e",   "s8",  "s6",  "e",   "e",   "e",   "e",     "e"],
    ["s5",  "e",   "e",   "s8",  "s6",  "e",   "e",   "e",   "e",     "e"],
    ["s5",  "e",   "e",   "s8",  "s6",  "e",   "e",   "e",   "e",     "e"],
    ["e",   "s18", "e",   "e",   "e",   "s9",  "s10", "e",   "e",     "e"],
    ["s5",  "e",   "e",   "s8",  "s6",  "e",   "e",   "e",   "e",     "e"],
    ["s5",  "e",   "e",   "s8",  "s6",  "e",   "e",   "e",   "e",     "e"],
    ["e",   "r2",  "s13", "e",   "e",   "r2",  "r2",  "e",   "s14",  "r2"],
    ["e",   "r3",  "s13", "e",   "e",   "r3",  "r3",  "e",   "s14",  "r3"],
    ["e",   "r6",  "r6",  "e",   "e",   "r6",  "r6",  "r6",  "r6",   "r6"],
    ["e",   "r1",  "r1",  "e",   "e",   "r1",  "r1",  "r1",  "r1",   "r1"],
    ["e",   "r10", "r10", "e",   "e",   "r10", "r10", "s11", "r10", "r10"],
    ["e",   "r11", "r11", "e",   "e",   "r11", "r11", "s11", "r11", "r11"],
]

non_terminal_index = {
    "D": 0,
    "E": 1,
    "F": 2,
    "N": 3,
    "T": 4,
}

goto_table = [
    [4,  1,  3,  2,   7],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [4,  12, 3,  2,   7],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [4,  -1, 3,  2,  15],
    [4,  -1, 3,  2,  16],
    [17, -1, -1, 2,  -1],
    [-1, -1, -1, -1, -1],
    [4,  -1, 19, 2,  -1],
    [4,  -1, 20, 2,  -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
]

reduce_symbol_sum = {
    0:  1,
    1:  3,
    2:  3,
    3:  3,
    4:  1,
    5:  1,
    6:  3,
    7:  1,
    8:  1,
    9:  1,
    10: 3,
    11: 3,
    12: 1,
}

reduce_to_non_terminal = {
    0:  "start",
    1:  "D",
    2:  "E",
    3:  "E",
    4:  "E",
    5:  "F",
    6:  "F",
    7:  "N",
    8:  "N",
    9:  "T",
    10: "T",
    11: "T",
    12: "D",
}


def grammar_analysis(token_list):
    """
        Add some data structure definition code here...
    """
    boson_stack = []
    stack = [0]
    token_index = 0
    while token_index < len(token_list):
        token = token_list[token_index]
        token_type = token[0]
        now_state = stack[-1]
        operation = action_table[now_state][terminal_index[token_type]]
        operation_flag = operation[0]
        if operation_flag == "e":
            raise Exception("Grammar error: " + " ".join([t[1] for t in token_list]))
        elif operation_flag == "s":
            operation_number = int(operation[1:])
            stack.append(operation_number)
            token_index += 1
            boson_stack.append(token)
        elif operation_flag == "r":
            operation_number = int(operation[1:])
            reduce_sum = reduce_symbol_sum[operation_number]
            for _ in range(reduce_sum):
                stack.pop()
            now_state = stack[-1]
            now_non_terminal_index = non_terminal_index[reduce_to_non_terminal[operation_number]]
            stack.append(goto_table[now_state][now_non_terminal_index])
            if operation_number == 1:
                # D -> bl E br
                boson_sentence = []
                for boson_i in range(3):
                    boson_sentence.insert(0, boson_stack.pop())
                boson_reduce = [boson_sentence[0], boson_sentence[1], boson_sentence[2]]
                boson_stack.append(boson_reduce)
            elif operation_number == 2:
                # E -> E minus T
                boson_sentence = []
                for boson_i in range(3):
                    boson_sentence.insert(0, boson_stack.pop())
                boson_reduce = [boson_sentence[0], boson_sentence[1], boson_sentence[2]]
                boson_stack.append(boson_reduce)
            elif operation_number == 3:
                # E -> E plus T
                boson_sentence = []
                for boson_i in range(3):
                    boson_sentence.insert(0, boson_stack.pop())
                boson_reduce = [boson_sentence[0], boson_sentence[1], boson_sentence[2]]
                boson_stack.append(boson_reduce)
            elif operation_number == 4:
                # E -> T
                boson_sentence = []
                for boson_i in range(1):
                    boson_sentence.insert(0, boson_stack.pop())
                boson_reduce = [boson_sentence[0]]
                boson_stack.append(boson_reduce)
            elif operation_number == 5:
                # F -> D
                boson_sentence = []
                for boson_i in range(1):
                    boson_sentence.insert(0, boson_stack.pop())
                boson_reduce = [boson_sentence[0]]
                boson_stack.append(boson_reduce)
            elif operation_number == 6:
                # F -> F power D
                boson_sentence = []
                for boson_i in range(3):
                    boson_sentence.insert(0, boson_stack.pop())
                boson_reduce = [boson_sentence[0], boson_sentence[1], boson_sentence[2]]
                boson_stack.append(boson_reduce)
            elif operation_number == 7:
                # N -> float
                boson_sentence = []
                for boson_i in range(1):
                    boson_sentence.insert(0, boson_stack.pop())
                boson_reduce = [boson_sentence[0]]
                boson_stack.append(boson_reduce)
            elif operation_number == 8:
                # N -> int
                boson_sentence = []
                for boson_i in range(1):
                    boson_sentence.insert(0, boson_stack.pop())
                boson_reduce = [boson_sentence[0]]
                boson_stack.append(boson_reduce)
            elif operation_number == 9:
                # T -> F
                boson_sentence = []
                for boson_i in range(1):
                    boson_sentence.insert(0, boson_stack.pop())
                boson_reduce = [boson_sentence[0]]
                boson_stack.append(boson_reduce)
            elif operation_number == 10:
                # T -> T div F
                boson_sentence = []
                for boson_i in range(3):
                    boson_sentence.insert(0, boson_stack.pop())
                boson_reduce = [boson_sentence[0], boson_sentence[1], boson_sentence[2]]
                boson_stack.append(boson_reduce)
            elif operation_number == 11:
                # T -> T times F
                boson_sentence = []
                for boson_i in range(3):
                    boson_sentence.insert(0, boson_stack.pop())
                boson_reduce = [boson_sentence[0], boson_sentence[1], boson_sentence[2]]
                boson_stack.append(boson_reduce)
            elif operation_number == 12:
                # D -> N
                boson_sentence = []
                for boson_i in range(1):
                    boson_sentence.insert(0, boson_stack.pop())
                boson_reduce = [boson_sentence[0]]
                boson_stack.append(boson_reduce)
            else:
                raise Exception("Invalid reduce number: %d" % operation_number)
        elif operation_flag == "a":
            break
        else:
            raise Exception("Invalid action: %s" % operation)
    """
        Add some postprocessing code here...
    """
