%LexicalTokenClassName LexicalToken;
%LexicalAnalyzerClassName BosonLexicalAnalyzer;
%GrammarAnalyzerClassName BosonGrammarAnalyzer;
%SemanticsAnalyzerClassName BosonSemanticsAnalyzer;
%GenerateSemanticsAnalyzer yes;
%GenerateLexicalAnalyzer yes;
%CodeComment no;
%SparseTable yes;
%StartSymbol boson;


####################################
#        Lexical Definition        #
####################################
name    = <[_a-zA-Z][_a-zA-Z0-9]*>;
node    = <$[0-9]+|$@|$$|$\?>;
string  = <".*[^\\]"|'.*[^\\]'>!;
regular = <\<.*[^\\]\>>!;
comment = <#[^\r\n]*>@{skip};
command = <%[_a-zA-Z]+>;
skip    = <[\ \t]+>@{skip};
newline = <\n\r|\n>@{skip, newline};


#####################################
#        Grammar Definition         #
#####################################
boson : statement+;

statement : command_statement
          | lexicon_statement
          | grammar_statement
          ;

command_statement : command (name | string)+ ';' = command($0, *$1($?));

lexicon_statement : name '=' lexical_define ';' = lexical_define($0, $2);

lexical_define : lexicon_list
               | regular ['!'] ['@' '{' lexical_function '}'] = ($0, *$1($?), $2(*$2))
               ;

lexicon_list : lexicon ('|' lexicon)* = ($0, *$1($1));

lexical_function : name (',' name)* = ($0, *$1($1));

lexicon : lexicon_body ['@' '{' lexical_function '}'] = ($0, $1(*$2));

lexicon_body : lexeme+ = (*$0);

lexeme : complex_lexeme
       | name [closure] = lexical_name_closure($0, *$1($?))
       ;

complex_lexeme : '(' sub_lexeme ')' [closure] = lexical_closure($1, *$3($?))
               | '[' sub_lexeme ']' = lexical_optional($1)
               ;

sub_lexeme : lexeme+ = (*$0)
           | lexeme ('|' lexeme)+ = lexical_select($0, *$1($1))
           ;

grammar_statement : name ':' derivation_list ';' = reduce($0, $2);

derivation_list : derivation ('|' derivation)* = ($0, *$1($1));

derivation : derivation_body ['=' [name] grammar_tuple] = ($0, *$1(*$1($?), $2));

derivation_body : element+ = (*$0)
                | '~'
                |
                ;

grammar_tuple : '(' node_element (',' node_element)* ')' = ($1, *$2($1));

node_element : ['*'] node [grammar_tuple] = grammar_node(*$0($?), $1, *$2($?));

element : complex_element
        | symbol [closure] = name_closure($0, *$1($?))
        ;

symbol : name
       | string = literal($0)
       ;

complex_element : '(' sub_derivation ')' [closure] = complex_closure($1, *$3($?))
                | '[' sub_derivation ']' = complex_optional($1)
                ;

sub_derivation : element+ = (*$0)
               | element ('|' element)+ = select($0, *$1($1))
               ;

closure: '+' | '*';
