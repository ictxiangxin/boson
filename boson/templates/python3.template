"""
    {{ title }} - {{ description }}

        Author: {{ author }}
        Email:  {{ email }}

    This code was generated by boson python code generator.
        {% for sentence in sentence_list %}
        {{ ("%%%dd" % reduce_number_width) % loop.index0 }}: {{ sentence[0] }} -> {% for element in sentence[1:] -%}
                                                                                  {%- if element in literal_reverse_map -%}
                                                                                  '{{ literal_reverse_map[element] }}'
                                                                                  {%- else -%}
                                                                                  {{ element }}
                                                                                  {%- endif -%}
                                                                                  {%- if not loop.last %} {% endif -%}
                                                                                  {%- endfor -%}
        {%- endfor %}
"""


class {{ grammar_class_name }}:
    def __init__(self):
        self.__grammar_tree = None
        self.__error_index = None

    def get_grammar_tree(self):
        return self.__grammar_tree

    def set_grammar_tree(self, grammar_tree: tuple):
        self.__grammar_tree = grammar_tree

    grammar_tree = property(get_grammar_tree, set_grammar_tree)

    def get_error_index(self):
        return self.__error_index

    def set_error_index(self, error_index: int):
        self.__error_index = error_index

    error_index = property(get_error_index, set_error_index)


class {{ analyzer_class_name }}:
    def __init__(self):
        self.__terminal_index = {
            {%- for terminal, index in terminal_index.items() %}
            "{{ terminal }}": {{ index }}
            {%- if not loop.last %},{% endif -%}
            {%- endfor %}
        }
        self.__action_table = [
            {%- for line in action_table %}
            [
             {%- for each in line -%}
             "{{ each }}"
             {%- if not loop.last %}, {% endif -%}
             {%- endfor -%}
            ]
            {%- if not loop.last %},{% endif -%}
            {%- endfor %}
        ]
        self.__goto_table = [
            {%- for line in goto_table %}
            [
             {%- for each in line -%}
             {{ each }}
             {%- if not loop.last %}, {% endif -%}
             {%- endfor -%}
            ]
            {%- if not loop.last %},{% endif -%}
            {%- endfor %}
        ]
        self.__reduce_symbol_sum = [
                                    {%- for index in reduce_symbol_sum -%}
                                    {{ index }}
                                    {%- if not loop.last %}, {% endif -%}
                                    {%- endfor -%}
                                   ]
        self.__reduce_to_non_terminal_index = [
                                               {%- for index in reduce_to_non_terminal_index -%}
                                               {{ index }}
                                               {%- if not loop.last %}, {% endif -%}
                                               {%- endfor -%}
                                              ]

    def grammar_analysis(self, token_list):
        grammar = {{ grammar_class_name }}()
        analysis_stack = [0]
        symbol_stack = []
        token_index = 0
        while token_index < len(token_list):
            token = token_list[token_index]
            current_state = analysis_stack[-1]
            operation = self.__action_table[current_state][self.__terminal_index[token.symbol]]
            operation_flag = operation[0]
            if operation_flag == "{{ table_sign_error }}":
                grammar.error_index = token_index
                return grammar
            elif operation_flag == "{{ table_sign_shift }}":
                operation_number = int(operation[1:])
                analysis_stack.append(operation_number)
                token_index += 1
                symbol_stack.append(token.text)
            elif operation_flag == "{{ table_sign_reduce }}":
                operation_number = int(operation[1:])
                reduce_sum = self.__reduce_symbol_sum[operation_number]
                for _ in range(reduce_sum):
                    analysis_stack.pop()
                current_state = analysis_stack[-1]
                current_non_terminal_index = self.__reduce_to_non_terminal_index[operation_number]
                goto_next_state = self.__goto_table[current_state][current_non_terminal_index]
                if goto_next_state == -1:
                    raise Exception("Invalid goto action: state=%d, non-terminal=%d" % (current_state, current_non_terminal_index))
                analysis_stack.append(goto_next_state)
                {%- for sentence, grammar_tuple in grammar_tuple_map.items() %}
                {%- set reduce_number = sentence_list.index(sentence) %}
                {%- if loop.first %}
                if operation_number == {{ reduce_number }}:
                {%- else %}
                elif operation_number == {{ reduce_number }}:
                {%- endif %}
                    temp_grammar_tuple_list = []
                    real_temp_grammar_tuple_list = []
                    for _ in range(reduce_sum):
                        temp_grammar_tuple_list.insert(0, symbol_stack.pop())
                    for i in [
                              {%- for node in grammar_tuple -%}
                              {%- if node.isdigit() %}{{ node }}{% elif node[-1] == "*" %}{{ node[:-1] }}.0{% else %}"{{ node }}"{% endif -%}
                              {%- if not loop.last %}, {% endif -%}
                              {%- endfor -%}
                             ]:
                        {%- if "@" in grammar_tuple or "$" in grammar_tuple %}
                        {%- if "@" in grammar_tuple %}
                        if i == "@":
                            real_temp_grammar_tuple_list.append({{ reduce_number }})
                        el
                        {%- endif -%}
                        {%- if "$" in grammar_tuple %}
                        if i == "$":
                            real_temp_grammar_tuple_list.append("${{ sentence[0] }}")
                        el
                        {%- endif -%}
                        se:
                            if isinstance(i, float):
                                real_temp_grammar_tuple_list += temp_grammar_tuple_list[int(i)]
                            else:
                                real_temp_grammar_tuple_list.append(temp_grammar_tuple_list[i])
                        {%- else %}
                        if isinstance(i, float):
                            real_temp_grammar_tuple_list += temp_grammar_tuple_list[int(i)]
                        else:
                            real_temp_grammar_tuple_list.append(temp_grammar_tuple_list[i])
                        {%- endif %}
                    symbol_stack.append(tuple(real_temp_grammar_tuple_list))
                {%- endfor %}
                {%- if have_default_reduce_tuple %}
                {%- if no_special_generate %}
                if operation_number in [{{ ", ".join(none_grammar_tuple_reduce) }}]:
                {%- else %}
                elif operation_number in [{{ ", ".join(none_grammar_tuple_reduce) }}]:
                {%- endif %}
                    temp_grammar_tuple_list = []
                    for _ in range(reduce_sum):
                        temp_grammar_tuple_list.insert(0, symbol_stack.pop())
                    temp_grammar_tuple_list.insert(0, operation_number)
                    symbol_stack.append(tuple(temp_grammar_tuple_list))
                {%- endif %}
                else:
                    raise Exception("Invalid reduce number: reduce=%d" % operation_number)
            elif operation_flag == "{{ table_sign_accept }}":
                grammar.grammar_tree = symbol_stack[0]
                return grammar
            else:
                raise Exception("Invalid action: action=%s." % operation)
        raise Exception("Analyzer unusual exit.")

