{% if code_comment -%}
"""
    {{ configure.boson_title }} - {{ configure.boson_description }}

        Author: {{ configure.boson_author }}
        Email:  {{ configure.boson_email }}
        Site:   {{ configure.boson_url }}

    This code was generated by boson python code generator.
        {% for sentence in analyzer_table.sentence_list %}
        {{ ('%%%dd' % reduce_number_width) % loop.index0 }}: {{ sentence[0] }} -> {% for element in sentence[1:] -%}
                                                                                  {%- if element in grammar_package.literal_reverse_map -%}
                                                                                  '{{ grammar_package.literal_reverse_map[element] }}'
                                                                                  {%- else -%}
                                                                                  {{ element }}
                                                                                  {%- endif -%}
                                                                                  {%- if not loop.last %} {% endif -%}
                                                                                  {%- endfor -%}
        {%- endfor %}
"""


{% endif -%}
class {{ configure.boson_option['lexical_token_class_name'] }}:
    text: str
    line: int
    symbol: str

    def __init__(self, text: str, line: int, symbol: str):
        self.text = text
        self.line = line
        self.symbol = symbol


class {{ configure.boson_option['grammar_class_name'] }}:
    def __init__(self):
        self.__grammar_tree = None
        self.__error_index = None

    def get_grammar_tree(self):
        return self.__grammar_tree

    def set_grammar_tree(self, grammar_tree: tuple):
        self.__grammar_tree = grammar_tree

    grammar_tree = property(get_grammar_tree, set_grammar_tree)

    def get_error_index(self):
        return self.__error_index

    def set_error_index(self, error_index: int):
        self.__error_index = error_index

    error_index = property(get_error_index, set_error_index)


class {{ configure.boson_option['grammar_node_class_name'] }}:
    def __init__(self):
        self.reduce_number = -1
        self.__data = []

    def __getitem__(self, item):
        return self.__data[item]

    def __iadd__(self, other):
        self.__data += other
        return self

    def append(self, item):
        self.__data.append(item)

    def insert(self, index, item):
        self.__data.insert(index, item)

    def data(self):
        return self.__data


class {{ configure.boson_option['grammar_analyzer_class_name'] }}:
    def __init__(self):
        self.__terminal_index = {
            {%- for terminal, index in analyzer_table.terminal_index.items() %}
            '{{ terminal }}': {{ index }}
            {%- if not loop.last %},{% endif -%}
            {%- endfor %}
        }
        {%- if sparse_table %}
        self.__action_table = {
            {%- for i, sub_table in analyzer_table.action_table.items() %}
            {{ i }}: {
            {%- for j, each in sub_table.items() -%}
            {{ j }}: '{{ each }}'
            {%- if not loop.last %}, {% endif -%}
            {%- endfor -%}
            }
            {%- if not loop.last %}, {% endif -%}
            {%- endfor %}
        }
        self.__goto_table = {
            {%- for i, sub_table in analyzer_table.goto_table.items() %}
            {{ i }}: {
            {%- for j, each in sub_table.items() -%}
            {{ j }}: {{ each }}
            {%- if not loop.last %}, {% endif -%}
            {%- endfor -%}
            }
            {%- if not loop.last %}, {% endif -%}
            {%- endfor %}
        }
        {%- else %}
        self.__action_table = [
            {%- for line in analyzer_table.action_table %}
            [
                {%- for each in line -%}
                '{{ each }}'
                {%- if not loop.last %}, {% endif -%}
                {%- endfor -%}
            ]
            {%- if not loop.last %},{% endif -%}
            {%- endfor %}
        ]
        self.__goto_table = [
            {%- for line in analyzer_table.goto_table %}
            [
                {%- for each in line -%}
                {{ each }}
                {%- if not loop.last %}, {% endif -%}
                {%- endfor -%}
            ]
            {%- if not loop.last %},{% endif -%}
            {%- endfor %}
        ]
        {%- endif %}
        self.__node_table = {
            {%- for sentence, grammar_tuple in grammar_package.grammar_tuple_map.items() %}
            {{ analyzer_table.sentence_list.index(sentence) }}: {{ grammar_tuple }}
            {%- if not loop.last %},{% endif -%}
            {%- endfor %}
        }
        self.__reduce_symbol_sum = [
            {%- for index in analyzer_table.reduce_symbol_sum -%}
            {{ index }}
            {%- if not loop.last %}, {% endif -%}
            {%- endfor -%}
        ]
        self.__reduce_to_non_terminal_index = [
            {%- for index in analyzer_table.reduce_to_non_terminal_index -%}
                {{ index }}
                {%- if not loop.last %}, {% endif -%}
                {%- endfor -%}
            ]

    def __generate_grammar_tuple(self, statement_index: int, node_tuple: tuple, symbol_package: list):
        grammar_node = {{ configure.boson_option['grammar_node_class_name'] }}()
        for i in node_tuple:
            if isinstance(i, str):
                if i == '$':
                    grammar_node.append(statement_index)
                elif i == '?':
                    grammar_node += symbol_package
                else:
                    if symbol_package:
                        if i[0] == '*':
                            grammar_node += symbol_package[int(i[1:])]
                        else:
                            grammar_node.append(symbol_package[int(i)])
            else:
                if symbol_package:
                    if i[0][0] == '*':
                        for node in symbol_package[int(i[0][1:])]:
                            grammar_node += self.__generate_grammar_tuple(-1, i[1], node)
                    else:
                        for node in symbol_package[int(i[0])]:
                            grammar_node.append(self.__generate_grammar_tuple(-1, i[1], node))
        grammar_node.reduce_number = statement_index
        return grammar_node

    def grammar_analysis(self, token_list):
        grammar = {{ configure.boson_option['grammar_class_name'] }}()
        analysis_stack = [0]
        symbol_stack = []
        token_index = 0
        while token_index < len(token_list):
            token = token_list[token_index]
            current_state = analysis_stack[-1]
            {%- if sparse_table %}
            operation = self.__action_table.get(current_state, {}).get(self.__terminal_index[token.symbol], '{{ configure.boson_table_sign_error }}')
            {%- else %}
            operation = self.__action_table[current_state][self.__terminal_index[token.symbol]]
            {%- endif %}
            operation_flag = operation[0]
            if operation_flag == '{{ configure.boson_table_sign_error }}':
                grammar.error_index = token_index
                return grammar
            elif operation_flag == '{{ configure.boson_table_sign_shift }}':
                state_number = int(operation[1:])
                analysis_stack.append(state_number)
                token_index += 1
                symbol_stack.append(token.text)
            elif operation_flag == '{{ configure.boson_table_sign_reduce }}':
                statement_index = int(operation[1:]) - 1
                reduce_sum = self.__reduce_symbol_sum[statement_index]
                for _ in range(reduce_sum):
                    analysis_stack.pop()
                current_state = analysis_stack[-1]
                current_non_terminal_index = self.__reduce_to_non_terminal_index[statement_index]
                {%- if sparse_table %}
                goto_next_state = self.__goto_table.get(current_state, {}).get(current_non_terminal_index, {{ configure.boson_invalid_goto }})
                {%- else %}
                goto_next_state = self.__goto_table[current_state][current_non_terminal_index]
                {%- endif %}
                if goto_next_state == {{ configure.boson_invalid_goto }}:
                    raise ValueError('Invalid goto action: state={}, non-terminal={}'.format(current_state, current_non_terminal_index))
                analysis_stack.append(goto_next_state)
                {%- if have_special_generate %}
                if statement_index in self.__node_table:
                    symbol_package = []
                    for _ in range(reduce_sum):
                        symbol_package.insert(0, symbol_stack.pop())
                    symbol_stack.append(self.__generate_grammar_tuple(statement_index, self.__node_table[statement_index], symbol_package))
                {%- endif %}
                {%- if have_default_reduce_tuple %}
                {%- if have_special_generate %}
                elif statement_index in [{{ ', '.join(none_grammar_tuple_reduce) }}]:
                {%- else %}
                if statement_index in [{{ ', '.join(none_grammar_tuple_reduce) }}]:
                {%- endif %}
                    grammar_node = {{ configure.boson_option['grammar_node_class_name'] }}()
                    for _ in range(reduce_sum):
                        grammar_node.insert(0, symbol_stack.pop())
                    grammar_node.reduce_number = statement_index
                    symbol_stack.append(grammar_node)
                {%- endif %}
                {%- if have_special_generate or have_default_reduce_tuple %}
                else:
                    raise ValueError('Invalid reduce number: reduce={}'.format(statement_index))
                {%- endif %}
            elif operation_flag == '{{ configure.boson_table_sign_accept }}':
                grammar.grammar_tree = symbol_stack[0]
                return grammar
            else:
                raise ValueError('Invalid action: action={}'.format(operation))
        raise RuntimeError('Analyzer unusual exit.')
{%- if generate_semantics_analyzer %}


class {{ configure.boson_option['semantics_analyzer_class_name'] }}:
    def __init__(self):
        self.__reduce_number_to_grammar_name = {
            {%- for reduce_number, grammar_name in reduce_number_to_grammar_name.items() %}
            {{ reduce_number }}: '{{ grammar_name }}'
            {%- if not loop.last %}, {% endif -%}
            {%- endfor %}
        }
        self.__reduce_number_to_grammar_number = {
            {%- for reduce_number, grammar_number in reduce_number_to_grammar_number.items() %}
            {{ reduce_number }}: {{ grammar_number }}
            {%- if not loop.last %}, {% endif -%}
            {%- endfor %}
        }
        self.__naive_reduce_number = {
            {%- for reduce_number in naive_reduce_number -%}
            {{ reduce_number }}
            {%- if not loop.last %}, {% endif -%}
            {%- endfor -%}
        }
        self.__semantics_entity = {}

    @staticmethod
    def __default_semantics_entity(grammar_entity):
        return grammar_entity

    @staticmethod
    def __naive_semantics_entity(grammar_entity):
        if len(grammar_entity) == 0:
            return None
        elif len(grammar_entity) == 1:
            return grammar_entity[0]
        else:
            return grammar_entity

    def __semantics_analysis(self, grammar_tree: {{ configure.boson_option['grammar_node_class_name'] }}):
        if grammar_tree.reduce_number in self.__reduce_number_to_grammar_name:
            grammar_name = self.__reduce_number_to_grammar_name[grammar_tree.reduce_number]
        elif grammar_tree.reduce_number in self.__reduce_number_to_grammar_number:
            grammar_name = '{{ configure.boson_grammar_name_prefix }}{}'.format(self.__reduce_number_to_grammar_number[grammar_tree.reduce_number])
        else:
            grammar_name = '{{ configure.boson_grammar_name_prefix }}hidden'
        grammar_entity = list(map(lambda g: self.__semantics_analysis(g) if isinstance(g, {{ configure.boson_option['grammar_node_class_name'] }}) else g, grammar_tree.data()))
        if grammar_name in self.__semantics_entity:
            return self.__semantics_entity[grammar_name](grammar_entity)
        elif grammar_tree.reduce_number in self.__naive_reduce_number:
            return self.__naive_semantics_entity(grammar_entity)
        else:
            return self.__default_semantics_entity(grammar_entity)

    def semantics_analysis(self, grammar_tree: {{ configure.boson_option['grammar_node_class_name'] }}):
        return self.__semantics_analysis(grammar_tree)

    def semantics_entity(self, sign):
        def decorator(f):
            if isinstance(sign, int):
                name = '{{ configure.boson_grammar_name_prefix }}{}'.format(sign)
            elif isinstance(sign, str):
                name = sign
            else:
                raise ValueError('Invalid grammar sign: {}'.format(sign))
            self.__semantics_entity[name] = f
            return f
        return decorator
{%- endif %}

