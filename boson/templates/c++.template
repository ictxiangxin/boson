{% if code_comment -%}
/*
    {{ configure.boson_title }} - {{ configure.boson_description }}

        Author: {{ configure.boson_author }}
        Email:  {{ configure.boson_email }}
        Site:   {{ configure.boson_url }}

    This code was generated by boson python code generator.
        {% for sentence in analyzer_table.sentence_list %}
        {{ ('%%%dd' % reduce_number_width) % loop.index0 }}: {{ sentence[0] }} -> {% for element in sentence[1:] -%}
                                                                                  {%- if element in grammar_package.literal_reverse_map -%}
                                                                                  '{{ grammar_package.literal_reverse_map[element] }}'
                                                                                  {%- else -%}
                                                                                  {{ element }}
                                                                                  {%- endif -%}
                                                                                  {%- if not loop.last %} {% endif -%}
                                                                                  {%- endfor -%}
        {%- endfor %}
*/


{% endif -%}
#include <stack>
#include <vector>
#include <set>
#include <unordered_map>
#include <string>


class {{ configure.boson_option['lexical_token_class_name'] }} {
public:
    {{ configure.boson_option['lexical_token_class_name'] }}() = default;

    {{ configure.boson_option['lexical_token_class_name'] }}(std::string &text, const int line, std::string &symbol): text(text), line(line), symbol(symbol) {};

    {{ configure.boson_option['lexical_token_class_name'] }}(const char *text, const int line, const char *symbol): text(text), line(line), symbol(symbol) {};

    {{ configure.boson_option['lexical_token_class_name'] }}(const char *text, const int line, std::string &symbol): text(text), line(line), symbol(symbol) {};

    {{ configure.boson_option['lexical_token_class_name'] }}(std::string &text, const int line, const char *symbol): text(text), line(line), symbol(symbol) {};

    std::string text;
    int line = -1;
    std::string symbol;
};


class {{ configure.boson_option['grammar_node_class_name'] }} {
public:
    {{ configure.boson_option['grammar_node_class_name'] }}() = default;

    explicit {{ configure.boson_option['grammar_node_class_name'] }}(std::string &text) {
        this->set_text(text);
    }

    static {{ configure.boson_option['grammar_node_class_name'] }} &null_node() {
        static {{ configure.boson_option['grammar_node_class_name'] }} node;
        return node;
    }

    int get_reduce_number() {
        return this->_reduce_number;
    }

    void set_reduce_number(int reduce_number) {
        this->_reduce_number = reduce_number;
    }

    std::string &get_text() {
        return this->_text;
    }

    void set_text(std::string &text) {
        this->_text = text;
    }

    void append(const {{ configure.boson_option['grammar_node_class_name'] }} &item) {
        this->_data.push_back(item);
    }

    void insert(int index, const {{ configure.boson_option['grammar_node_class_name'] }} &item) {
        this->_data.insert(this->_data.begin() + index, item);
    }

    std::vector<{{ configure.boson_option['grammar_node_class_name'] }}> &data() {
        return this->_data;
    }

    {{ configure.boson_option['grammar_node_class_name'] }} &operator[](int index) {
        return this->_data[index];
    }

    {{ configure.boson_option['grammar_node_class_name'] }} &operator+=(const {{ configure.boson_option['grammar_node_class_name'] }} &item) {
        this->append(item);
        return *this;
    }

private:
    int _reduce_number = -1;
    std::string _text;
    std::vector<{{ configure.boson_option['grammar_node_class_name'] }}> _data;
};


class {{ configure.boson_option['grammar_class_name'] }} {
public:
    {{ configure.boson_option['grammar_class_name'] }}() = default;

    {{ configure.boson_option['grammar_node_class_name'] }} &get_grammar_tree() {
        return this->_grammar_tree;
    }

    void set_grammar_tree({{ configure.boson_option['grammar_node_class_name'] }} &grammar_tree) {
        this->_grammar_tree = grammar_tree;
    }

    int get_error_index() {
        return this->_error_index;
    }

    void set_error_index(int error_index) {
        this->_error_index = error_index;
    }

private:
    {{ configure.boson_option['grammar_node_class_name'] }} _grammar_tree;
    int _error_index = -1;
};


class {{ configure.boson_option['grammar_analyzer_class_name'] }} {
public:
    {{ configure.boson_option['grammar_analyzer_class_name'] }}() = default;

    {{ configure.boson_option['grammar_class_name'] }} grammar_analysis(std::vector<{{ configure.boson_option['lexical_token_class_name'] }}> token_list) {
        {{ configure.boson_option['grammar_class_name'] }} grammar;
        std::stack<int> analysis_stack;
        std::stack<{{ configure.boson_option['grammar_node_class_name'] }}> symbol_stack;
        analysis_stack.push(0);
        int token_index = 0;
        while (token_index < token_list.size()) {
            {{ configure.boson_option['lexical_token_class_name'] }} &token = token_list[token_index];
            int current_state = analysis_stack.top();
            {%- if sparse_table %}
            std::string operation = "{{ configure.boson_table_sign_error }}";
            int terminal_index = this->_terminal_index[token.symbol];
            if (this->_action_table.count(current_state)) {
                std::unordered_map<int, std::string> &actions = this->_action_table[current_state];
                if (actions.count(terminal_index)) {
                    operation = actions[terminal_index];
                }
            }
            {%- else %}
            std::string operation = this->_action_table[current_state][this->_terminal_index[token.symbol]];
            {%- endif %}
            char operation_flag = operation[0];
            if (operation_flag == '{{ configure.boson_table_sign_error }}') {
                grammar.set_error_index(token_index);
                return grammar;
            } else if (operation_flag == '{{ configure.boson_table_sign_shift }}') {
                int state_number = (int) strtol(operation.c_str() + 1, nullptr, 10);
                analysis_stack.push(state_number);
                token_index++;
                {{ configure.boson_option['grammar_node_class_name'] }} grammar_node(token.text);
                symbol_stack.push(grammar_node);
            } else if (operation_flag == '{{ configure.boson_table_sign_reduce }}') {
                int statement_index = (int) strtol(operation.c_str() + 1, nullptr, 10) - 1;
                int reduce_sum = this->_reduce_symbol_sum[statement_index];
                for (int i = 0; i < reduce_sum; i++) {
                    analysis_stack.pop();
                }
                current_state = analysis_stack.top();
                int current_non_terminal_index = this->_reduce_to_non_terminal_index[statement_index];
                {%- if sparse_table %}
                int goto_next_state = -1;
                if (this->_goto_table.count(current_state)) {
                    std::unordered_map<int, int> &goto_table = this->_goto_table[current_state];
                    if (goto_table.count(current_non_terminal_index)) {
                        goto_next_state = goto_table[current_non_terminal_index];
                    }
                }
                {%- else %}
                int goto_next_state = this->_goto_table[current_state][current_non_terminal_index];
                {%- endif %}
                if (goto_next_state == {{ configure.boson_invalid_goto }}) {
                    throw std::runtime_error("Invalid goto action.");
                }
                analysis_stack.push(goto_next_state);
                {%- if have_special_generate %}
                if (this->_node_table.count(statement_index)) {
                    std::vector<{{ configure.boson_option['grammar_node_class_name'] }}> symbol_package;
                    for (int i = 0; i < reduce_sum; i++) {
                        symbol_package.insert(symbol_package.begin(), symbol_stack.top());
                        symbol_stack.pop();
                    }
                    symbol_stack.push(this->_generate_grammar_tuple(statement_index, this->_node_table[statement_index], symbol_package));
                {%- endif %}
                {%- if have_default_reduce_tuple %}
                {%- if have_special_generate %}
                } else if (this->_none_grammar_tuple_reduce.count(statement_index)) {
                {%- else %}
                if (this->_none_grammar_tuple_reduce.count(statement_index)) {
                {%- endif %}
                    {{ configure.boson_option['grammar_node_class_name'] }} grammar_node;
                    for (int i = 0; i < reduce_sum; i++) {
                        grammar_node.insert(0, symbol_stack.top());
                        symbol_stack.pop();
                    }
                    grammar_node.set_reduce_number(statement_index);
                    symbol_stack.push(grammar_node);
                {%- endif %}
                {%- if have_special_generate or have_default_reduce_tuple %}
                } else {
                    throw std::runtime_error("Invalid reduce number.");
                }
                {%- endif %}
            } else if (operation_flag == '{{ configure.boson_table_sign_accept }}') {
                grammar.set_grammar_tree(symbol_stack.top());
                return grammar;
            } else {
                throw std::runtime_error("Invalid action.");
            }
        }
        throw std::runtime_error("Analyzer unusual exit.");
    }

private:
    std::unordered_map<std::string, int>_terminal_index = {
        {%- for terminal, index in analyzer_table.terminal_index.items() %}
        {"{{ terminal }}", {{ index -}} }
        {%- if not loop.last %},{% endif -%}
        {%- endfor %}
    };
    {% if sparse_table %}
    std::unordered_map<int, std::unordered_map<int, std::string>> _action_table = {
        {%- for i, sub_table in analyzer_table.action_table.items() %}
        { {{- i }}, {
        {%- for j, each in sub_table.items() -%}
        { {{- j }}, "{{ each }}"}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
        }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor %}
    };

    std::unordered_map<int, std::unordered_map<int, int>> _goto_table = {
        {%- for i, sub_table in analyzer_table.goto_table.items() %}
        { {{- i }}, {
        {%- for j, each in sub_table.items() -%}
        { {{- j }}, {{ each -}} }
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
        }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor %}
    };
    {% else %}
    std::vector<std::vector<std::string>> _action_table = {
        {%- for line in analyzer_table.action_table %}
        {
            {%- for each in line -%}
            "{{ each }}"
            {%- if not loop.last %}, {% endif -%}
            {%- endfor -%}
        }
        {%- if not loop.last %},{% endif -%}
        {%- endfor %}
    };

    std::vector<std::vector<int>> _goto_table = {
        {%- for line in analyzer_table.goto_table %}
        {
            {%- for each in line -%}
            {{ each }}
            {%- if not loop.last %}, {% endif -%}
            {%- endfor -%}
        }
        {%- if not loop.last %},{% endif -%}
        {%- endfor %}
    };

    {%- endif %}
    std::unordered_map<int, std::string> _node_table = {
        {%- for sentence, grammar_tuple in grammar_package.grammar_tuple_map.items() %}
        { {{- analyzer_table.sentence_list.index(sentence) }}, "{{ grammar_tuple }}"}
        {%- if not loop.last %},{% endif -%}
        {%- endfor %}
    };

    std::vector<int> _reduce_symbol_sum = {
        {%- for index in analyzer_table.reduce_symbol_sum -%}
        {{ index }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    };

    std::vector<int> _reduce_to_non_terminal_index = {
        {%- for index in analyzer_table.reduce_to_non_terminal_index -%}
        {{ index }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    };

    std::set<int> _none_grammar_tuple_reduce = {
        {%- for index in none_grammar_tuple_reduce -%}
        {{ index }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    };

    {{ configure.boson_option['grammar_node_class_name'] }} _generate_grammar_tuple(int statement_index, std::string &node_tuple, std::vector<{{ configure.boson_option['grammar_node_class_name'] }}> &symbol_package) {
        {{ configure.boson_option['grammar_node_class_name'] }} grammar_node;
        int state = 0;
        int sub_start_index = -1;
        bool star = false;
        int parenthesis_count = 0;
        std::string number_text;
        for (size_t i = 1; i < node_tuple.length(); i++) {
            char c = node_tuple[i];
            if (state == 0) {
                if (c == '(') {
                    state = 2;
                } else if (c == '$') {
                    {{ configure.boson_option['grammar_node_class_name'] }} reduce_node;
                    reduce_node.set_reduce_number(statement_index);
                    grammar_node.append(reduce_node);
                } else if (c == '?') {
                    for (auto &node : symbol_package) {
                        grammar_node.append(node);
                    }
                } else if (c == '\'' || c == ',' || c == ' ' || c == ')') {
                    continue;
                } else if (c == '*') {
                    star = true;
                } else if ('0' <= c && c <= '9') {
                    number_text += c;
                    state = 1;
                } else {
                    throw std::runtime_error("Invalid grammar node.");
                }
            } else if (state == 1) {
                if ('0' <= c && c <= '9') {
                    number_text += c;
                } else {
                    i--;
                    int reduce_number = (int) strtol(number_text.c_str(), nullptr, 10);
                    if (star) {
                        for (auto &node : symbol_package[reduce_number].data()) {
                            grammar_node.append(node);
                        }
                    } else {
                        grammar_node.append(symbol_package[reduce_number]);
                    }
                    star = false;
                    number_text = "";
                    state = 0;
                }
            } else if (state == 2) {
                if (c == '*') {
                    star = true;
                } else if (c == '\'' || c == ',' || c == ' ') {
                    continue;
                } else if ('0' <= c && c <= '9') {
                    number_text += c;
                } else {
                    i--;
                    state = 3;
                }
            } else {
                if (c == '(') {
                    if (parenthesis_count == 0) {
                        sub_start_index = i;
                    }
                    parenthesis_count++;
                } else if (c == ')') {
                    parenthesis_count--;
                    if (parenthesis_count == 0) {
                        int reduce_number = (int) strtol(number_text.c_str(), nullptr, 10);
                        std::string sub_node_tuple = node_tuple.substr(sub_start_index, i - sub_start_index + 1);
                        for (auto &each: symbol_package[reduce_number].data()) {
                            {{ configure.boson_option['grammar_node_class_name'] }} sub_node = this->_generate_grammar_tuple(-1, sub_node_tuple, each.data());
                            if (star) {
                                for (auto &node : sub_node.data()) {
                                    grammar_node.append(node);
                                }
                            } else {
                                grammar_node.append(sub_node);
                            }
                        }
                        star = false;
                        number_text = "";
                        state = 0;
                    }
                }
            }
        }
        grammar_node.set_reduce_number(statement_index);
        return grammar_node;
    }
};


{%- if generate_semantics_analyzer %}


typedef {{ configure.boson_option['grammar_node_class_name'] }} (*semantic_function)({{ configure.boson_option['grammar_node_class_name'] }} &);

class {{ configure.boson_option['semantics_analyzer_class_name'] }} {
public:
    {{ configure.boson_option['semantics_analyzer_class_name'] }}() = default;

    {{ configure.boson_option['grammar_node_class_name'] }} semantics_analysis({{ configure.boson_option['grammar_node_class_name'] }} grammar_tree) {
        return this->_semantics_analysis(grammar_tree);
    }

    static {{ configure.boson_option['grammar_node_class_name'] }} default_semantics_entity({{ configure.boson_option['grammar_node_class_name'] }} &grammar_entity) {
        return grammar_entity;
    }

    static {{ configure.boson_option['grammar_node_class_name'] }} naive_semantics_entity({{ configure.boson_option['grammar_node_class_name'] }} &grammar_entity) {
        if (grammar_entity.data().size() == 1) {
            return grammar_entity.data()[0];
        } else {
            return grammar_entity;
        }
    }

    void semantics_entity(int reduce_number, semantic_function function) {
        std::string reduce_name = "{{ configure.boson_grammar_name_prefix }}" + std::to_string(reduce_number);
        this->semantics_entity(reduce_name, function);
    }

    void semantics_entity(const char *reduce_name, semantic_function function) {
        std::string reduce_name_string(reduce_name);
        this->semantics_entity(reduce_name_string, function);
    }

    void semantics_entity(std::string &reduce_name, semantic_function function) {
        this->_semantics_entity[reduce_name] = function;
    }

private:
    std::unordered_map<int, std::string> _reduce_number_to_grammar_name = {
        {%- for reduce_number, grammar_name in reduce_number_to_grammar_name.items() %}
        { {{- reduce_number }}, "{{ grammar_name }}"}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor %}
    };

    std::unordered_map<int, int> _reduce_number_to_grammar_number = {
        {%- for reduce_number, grammar_number in reduce_number_to_grammar_number.items() %}
        { {{- reduce_number }}, {{ grammar_number -}} }
        {%- if not loop.last %}, {% endif -%}
        {%- endfor %}
    };

    std::set<int> _naive_reduce_number = {
        {%- for reduce_number in naive_reduce_number -%}
        {{ reduce_number }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    };

    std::unordered_map<std::string, semantic_function> _semantics_entity;

    {{ configure.boson_option['grammar_node_class_name'] }} _semantics_analysis({{ configure.boson_option['grammar_node_class_name'] }} &grammar_tree) {
        std::string grammar_name;
        if (this->_reduce_number_to_grammar_name.count(grammar_tree.get_reduce_number())) {
            grammar_name = this->_reduce_number_to_grammar_name[grammar_tree.get_reduce_number()];
        } else if (this->_reduce_number_to_grammar_number.count(grammar_tree.get_reduce_number())) {
            grammar_name = "{{ configure.boson_grammar_name_prefix }}" + std::to_string(this->_reduce_number_to_grammar_number[grammar_tree.get_reduce_number()]);
        } else {
            grammar_name = "{{ configure.boson_grammar_name_prefix }}hidden";
        }
        {{ configure.boson_option['grammar_node_class_name'] }} grammar_entity;
        for (auto &node: grammar_tree.data()) {
            if (!node.data().empty()) {
                grammar_entity.append(this->_semantics_analysis(node));
            } else {
                grammar_entity.append(node);
            }
        }
        if (this->_semantics_entity.count(grammar_name)) {
            return this->_semantics_entity[grammar_name](grammar_entity);
        } else if (this->_naive_reduce_number.count(grammar_tree.get_reduce_number())) {
            return {{ configure.boson_option['semantics_analyzer_class_name'] }}::naive_semantics_entity(grammar_entity);
        } else {
            return {{ configure.boson_option['semantics_analyzer_class_name'] }}::default_semantics_entity(grammar_entity);
        }
    }
};
{%- endif %}

