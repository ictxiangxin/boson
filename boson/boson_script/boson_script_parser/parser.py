from typing import Dict, List, Tuple

from .token import BosonToken
from .grammar_node import BosonGrammarNode
from .grammar import BosonGrammar


class BosonParser:
    def __init__(self):
        self.__terminal_index_mapping: Dict[str, int] = {
            '!symbol_4': 0,
            'name': 1,
            '!symbol_3': 2,
            'node_name': 3,
            '!symbol_1': 4,
            '!symbol_9': 5,
            '!symbol_10': 6,
            'node': 7,
            '!symbol_6': 8,
            '!symbol_14': 9,
            '!symbol_8': 10,
            '!symbol_16': 11,
            '$': 12,
            '!symbol_11': 13,
            '!symbol_12': 14,
            '!symbol_5': 15,
            '!symbol_2': 16,
            'number': 17,
            '!symbol_7': 18,
            'regular': 19,
            'string': 20,
            '!symbol_13': 21,
            'command': 22,
            '!symbol_15': 23
        }
        self.__sparse_action_table: Dict[int, Dict[int, str]] = {
            0: {1: 's7', 22: 's8'},
            1: {12: 'a'},
            2: {1: 's7', 12: 'r74', 22: 's8'},
            3: {1: 'r108', 12: 'r108', 22: 'r108'},
            4: {1: 'r45', 12: 'r45', 22: 'r45'},
            5: {1: 'r89', 12: 'r89', 22: 'r89'},
            6: {1: 'r101', 12: 'r101', 22: 'r101'},
            7: {10: 's45', 16: 's46'},
            8: {1: 's11', 15: 's14', 20: 's13'},
            9: {1: 's11', 4: 's44', 15: 's14', 20: 's13'},
            10: {1: 'r62', 4: 'r62', 15: 'r62', 20: 'r62'},
            11: {1: 'r49', 4: 'r49', 15: 'r49', 20: 'r49'},
            12: {1: 'r69', 4: 'r69', 15: 'r69', 20: 'r69'},
            13: {1: 'r86', 4: 'r86', 15: 'r86', 20: 'r86'},
            14: {1: 's16'},
            15: {8: 'r70', 18: 'r70'},
            16: {16: 's19'},
            17: {8: 's18'},
            18: {1: 'r68', 4: 'r68', 5: 'r68', 8: 'r68', 9: 'r68', 15: 'r68', 18: 'r68', 20: 'r68'},
            19: {1: 's24', 15: 's14', 17: 's23', 20: 's21', 21: 's26'},
            20: {8: 'r92', 18: 'r92'},
            21: {8: 'r2', 9: 'r2', 18: 'r2'},
            22: {8: 'r32', 9: 'r32', 18: 'r32'},
            23: {8: 'r65', 9: 'r65', 18: 'r65'},
            24: {8: 'r67', 9: 'r67', 18: 'r67'},
            25: {8: 'r98', 9: 'r98', 18: 'r98'},
            26: {1: 's24', 15: 's14', 17: 's23', 20: 's21', 21: 's26'},
            27: {18: 's30'},
            28: {9: 'r3', 18: 's34'},
            29: {9: 'r88', 18: 'r88'},
            30: {1: 's24', 15: 's14', 17: 's23', 20: 's21', 21: 's26'},
            31: {9: 'r55', 18: 'r55'},
            32: {9: 'r79', 18: 'r79'},
            33: {9: 'r38'},
            34: {1: 's24', 9: 'r48', 15: 's14', 17: 's23', 20: 's21', 21: 's26'},
            35: {9: 's36'},
            36: {8: 'r78', 9: 'r78', 18: 'r78'},
            37: {8: 'r29', 18: 's40'},
            38: {8: 'r104'},
            39: {8: 'r94', 18: 'r94'},
            40: {1: 's16', 8: 'r21'},
            41: {8: 'r1'},
            42: {8: 'r102', 18: 'r102'},
            43: {1: 'r17', 4: 'r17', 15: 'r17', 20: 'r17'},
            44: {1: 'r75', 12: 'r75', 22: 'r75'},
            45: {1: 's75', 4: 'r66', 5: 'r66', 6: 's68', 13: 's64', 16: 'r66', 19: 's76', 20: 's77', 21: 's63'},
            46: {19: 's47'},
            47: {0: 'r61', 2: 's50', 4: 'r61'},
            48: {0: 's52', 4: 'r52'},
            49: {0: 'r41', 4: 'r41'},
            50: {0: 'r34', 4: 'r34'},
            51: {4: 'r99'},
            52: {15: 's55'},
            53: {4: 's54'},
            54: {1: 'r85', 12: 'r85', 22: 'r85'},
            55: {1: 's57'},
            56: {8: 's62'},
            57: {8: 'r15', 18: 'r15'},
            58: {8: 'r80', 18: 's60'},
            59: {8: 'r105', 18: 'r105'},
            60: {1: 's61'},
            61: {8: 'r13', 18: 'r13'},
            62: {4: 'r50'},
            63: {1: 's75', 13: 's64', 19: 's76', 20: 's77', 21: 's63'},
            64: {1: 's75', 13: 's64', 19: 's76', 20: 's77', 21: 's63'},
            65: {4: 's130'},
            66: {4: 'r72', 5: 'r72'},
            67: {4: 'r37', 5: 'r37', 16: 's93'},
            68: {4: 'r20', 5: 'r20', 16: 'r20'},
            69: {4: 'r47', 5: 'r47', 16: 'r47'},
            70: {1: 's75', 4: 'r97', 5: 'r97', 9: 'r97', 13: 's64', 14: 'r97', 16: 'r97', 19: 's76', 20: 's77', 21: 's63'},
            71: {1: 'r73', 4: 'r73', 5: 'r73', 9: 'r73', 13: 'r73', 14: 'r73', 16: 'r73', 19: 'r73', 20: 'r73', 21: 'r73'},
            72: {0: 's88', 1: 'r7', 4: 'r7', 5: 'r7', 9: 'r7', 13: 'r7', 14: 'r7', 16: 'r7', 19: 'r7', 20: 'r7', 21: 'r7'},
            73: {0: 'r26', 1: 'r26', 4: 'r26', 5: 'r26', 9: 'r26', 13: 'r26', 14: 'r26', 16: 'r26', 19: 'r26', 20: 'r26', 21: 'r26'},
            74: {0: 'r58', 1: 'r58', 4: 'r58', 5: 'r58', 9: 'r58', 11: 's81', 13: 'r58', 14: 'r58', 16: 'r58', 19: 'r58', 20: 'r58', 21: 'r58', 23: 's82'},
            75: {0: 'r11', 1: 'r11', 4: 'r11', 5: 'r11', 9: 'r11', 11: 'r11', 13: 'r11', 14: 'r11', 16: 'r11', 19: 'r11', 20: 'r11', 21: 'r11', 23: 'r11'},
            76: {0: 'r83', 1: 'r83', 2: 's79', 4: 'r83', 5: 'r83', 9: 'r83', 11: 'r83', 13: 'r83', 14: 'r83', 16: 'r83', 19: 'r83', 20: 'r83', 21: 'r83', 23: 'r83'},
            77: {0: 'r53', 1: 'r53', 4: 'r53', 5: 'r53', 9: 'r53', 11: 'r53', 13: 'r53', 14: 'r53', 16: 'r53', 19: 'r53', 20: 'r53', 21: 'r53', 23: 'r53'},
            78: {0: 'r40', 1: 'r40', 4: 'r40', 5: 'r40', 9: 'r40', 11: 'r40', 13: 'r40', 14: 'r40', 16: 'r40', 19: 'r40', 20: 'r40', 21: 'r40', 23: 'r40'},
            79: {0: 'r6', 1: 'r6', 4: 'r6', 5: 'r6', 9: 'r6', 11: 'r6', 13: 'r6', 14: 'r6', 16: 'r6', 19: 'r6', 20: 'r6', 21: 'r6', 23: 'r6'},
            80: {0: 'r23', 1: 'r23', 4: 'r23', 5: 'r23', 9: 'r23', 11: 'r23', 13: 'r23', 14: 'r23', 16: 'r23', 19: 'r23', 20: 'r23', 21: 'r23', 23: 'r23'},
            81: {0: 'r4', 1: 'r4', 4: 'r4', 5: 'r4', 9: 'r4', 13: 'r4', 14: 'r4', 16: 'r4', 19: 'r4', 20: 'r4', 21: 'r4'},
            82: {0: 'r42', 1: 'r42', 4: 'r42', 5: 'r42', 9: 'r42', 13: 'r42', 14: 'r42', 16: 'r42', 19: 'r42', 20: 'r42', 21: 'r42'},
            83: {0: 'r107', 1: 'r107', 4: 'r107', 5: 'r107', 9: 'r107', 13: 'r107', 14: 'r107', 16: 'r107', 19: 'r107', 20: 'r107', 21: 'r107'},
            84: {0: 'r16', 1: 'r16', 4: 'r16', 5: 'r16', 9: 'r16', 13: 'r16', 14: 'r16', 16: 'r16', 19: 'r16', 20: 'r16', 21: 'r16'},
            85: {0: 'r87', 1: 'r87', 4: 'r87', 5: 'r87', 9: 'r87', 13: 'r87', 14: 'r87', 16: 'r87', 19: 'r87', 20: 'r87', 21: 'r87'},
            86: {1: 'r112', 4: 'r112', 5: 'r112', 9: 'r112', 13: 'r112', 14: 'r112', 16: 'r112', 19: 'r112', 20: 'r112', 21: 'r112'},
            87: {1: 'r81', 4: 'r81', 5: 'r81', 9: 'r81', 13: 'r81', 14: 'r81', 16: 'r81', 19: 'r81', 20: 'r81', 21: 'r81'},
            88: {1: 's89'},
            89: {1: 'r12', 4: 'r12', 5: 'r12', 9: 'r12', 13: 'r12', 14: 'r12', 16: 'r12', 19: 'r12', 20: 'r12', 21: 'r12'},
            90: {1: 'r33', 4: 'r33', 5: 'r33', 9: 'r33', 13: 'r33', 14: 'r33', 16: 'r33', 19: 'r33', 20: 'r33', 21: 'r33'},
            91: {4: 'r90', 5: 'r90'},
            92: {4: 'r35', 5: 'r35'},
            93: {1: 's96', 13: 'r77', 21: 'r77'},
            94: {13: 's98', 21: 's99'},
            95: {13: 'r28', 21: 'r28'},
            96: {13: 'r19', 21: 'r19'},
            97: {4: 'r54', 5: 'r54', 15: 's14'},
            98: {3: 'r10', 7: 'r10', 14: 'r59', 23: 's108'},
            99: {17: 's100'},
            100: {9: 's101'},
            101: {4: 'r51', 5: 'r51', 14: 'r51', 15: 'r51', 18: 'r51'},
            102: {14: 's122'},
            103: {14: 'r9'},
            104: {14: 'r60'},
            105: {14: 'r103', 18: 'r103'},
            106: {3: 's111', 7: 's109'},
            107: {3: 'r5', 7: 'r5'},
            108: {3: 'r110', 7: 'r110'},
            109: {13: 'r100', 14: 'r100', 18: 'r100', 21: 'r100', 23: 'r100'},
            110: {13: 'r46', 14: 'r22', 18: 'r22', 21: 'r46', 23: 's115'},
            111: {13: 'r31', 14: 'r31', 18: 'r31', 21: 'r31', 23: 'r31'},
            112: {14: 'r8', 18: 'r8'},
            113: {13: 's98', 21: 's99'},
            114: {13: 'r91', 21: 'r91'},
            115: {13: 'r57', 21: 'r57'},
            116: {14: 'r96', 18: 'r96'},
            117: {14: 'r93', 18: 'r93'},
            118: {14: 'r27', 18: 's119'},
            119: {3: 'r10', 7: 'r10', 23: 's108'},
            120: {14: 'r111', 18: 'r111'},
            121: {14: 'r95', 18: 'r95'},
            122: {4: 'r30', 5: 'r30', 14: 'r30', 15: 'r30', 18: 'r30'},
            123: {4: 'r56', 5: 'r56'},
            124: {4: 'r84', 5: 'r84'},
            125: {4: 'r106', 5: 'r106'},
            126: {4: 'r43', 5: 's128'},
            127: {4: 'r24', 5: 'r24'},
            128: {1: 's75', 4: 'r66', 5: 'r66', 6: 's68', 13: 's64', 16: 'r66', 19: 's76', 20: 's77', 21: 's63'},
            129: {4: 'r76', 5: 'r76'},
            130: {1: 'r64', 12: 'r64', 22: 'r64'},
            131: {14: 's137'},
            132: {5: 'r39', 9: 'r39', 14: 'r39'},
            133: {5: 's135', 9: 'r18', 14: 'r18'},
            134: {5: 'r36', 9: 'r36', 14: 'r36'},
            135: {1: 's75', 13: 's64', 19: 's76', 20: 's77', 21: 's63'},
            136: {5: 'r82', 9: 'r82', 14: 'r82'},
            137: {0: 'r109', 1: 'r109', 4: 'r109', 5: 'r109', 9: 'r109', 11: 's81', 13: 'r109', 14: 'r109', 16: 'r109', 19: 'r109', 20: 'r109', 21: 'r109', 23: 's82'},
            138: {0: 'r63', 1: 'r63', 4: 'r63', 5: 'r63', 9: 'r63', 13: 'r63', 14: 'r63', 16: 'r63', 19: 'r63', 20: 'r63', 21: 'r63'},
            139: {0: 'r25', 1: 'r25', 4: 'r25', 5: 'r25', 9: 'r25', 13: 'r25', 14: 'r25', 16: 'r25', 19: 'r25', 20: 'r25', 21: 'r25'},
            140: {0: 'r71', 1: 'r71', 4: 'r71', 5: 'r71', 9: 'r71', 13: 'r71', 14: 'r71', 16: 'r71', 19: 'r71', 20: 'r71', 21: 'r71'},
            141: {9: 's142'},
            142: {0: 'r14', 1: 'r14', 4: 'r14', 5: 'r14', 9: 'r14', 13: 'r14', 14: 'r14', 16: 'r14', 19: 'r14', 20: 'r14', 21: 'r14'},
            143: {1: 'r44', 12: 'r44', 22: 'r44'}
        }
        self.__sparse_goto_table: Dict[int, Dict[int, int]] = {
            0: {16: 1, 22: 6, 27: 4, 29: 5, 48: 2, 49: 3},
            2: {22: 6, 27: 4, 29: 5, 49: 143},
            8: {4: 10, 47: 9, 67: 12},
            9: {4: 43, 67: 12},
            14: {59: 15, 64: 17},
            15: {70: 37},
            19: {5: 22, 13: 20, 67: 25},
            26: {5: 22, 13: 27, 67: 25},
            27: {40: 28, 50: 29},
            28: {10: 35, 20: 33, 50: 32},
            30: {5: 22, 13: 31, 67: 25},
            34: {5: 22, 13: 31, 67: 25},
            37: {1: 39, 18: 41, 58: 38},
            40: {59: 42},
            45: {0: 70, 12: 65, 14: 73, 23: 69, 30: 72, 31: 66, 45: 74, 56: 71, 65: 67},
            47: {44: 49, 54: 48},
            48: {3: 51, 38: 53},
            55: {51: 56},
            57: {21: 58},
            58: {46: 59},
            63: {0: 70, 14: 73, 15: 141, 23: 132, 30: 72, 45: 74, 56: 71},
            64: {0: 70, 14: 73, 15: 131, 23: 132, 30: 72, 45: 74, 56: 71},
            66: {41: 126},
            67: {43: 92, 61: 91},
            70: {14: 73, 30: 72, 45: 74, 56: 90},
            72: {9: 87, 33: 86},
            74: {25: 85, 37: 84, 62: 83},
            76: {2: 78, 7: 80},
            93: {19: 94, 28: 95},
            94: {69: 97},
            97: {32: 124, 66: 123, 67: 125},
            98: {11: 104, 17: 107, 24: 105, 34: 106, 35: 102, 52: 103},
            105: {57: 118},
            106: {26: 110},
            110: {6: 114, 55: 116, 63: 112, 71: 113},
            113: {69: 117},
            118: {42: 120},
            119: {17: 107, 24: 121, 34: 106},
            126: {36: 127},
            128: {0: 70, 14: 73, 23: 69, 30: 72, 31: 129, 45: 74, 56: 71, 65: 67},
            132: {60: 133},
            133: {8: 134},
            135: {0: 70, 14: 73, 23: 136, 30: 72, 45: 74, 56: 71},
            137: {25: 140, 39: 139, 53: 138}
        }
        self.__sentence_index_grammar_tuple_mapping: Dict[int, Tuple[str, ...]] = {
            78: ('1', '*2'),
            55: ('1',),
            3: (),
            38: ('*0',),
            79: ('*0', '*1'),
            65: ('0',),
            2: ('0',),
            92: ('0', '2'),
            104: ('0', '*1'),
            102: ('1',),
            29: (),
            1: ('*0',),
            70: (),
            94: ('*0', '*1'),
            68: ('1',),
            18: ('0', '*1'),
            82: ('1',),
            39: (),
            36: ('*0', '*1'),
            14: ('1',),
            63: ('1', '*3'),
            109: (),
            25: ('*0',),
            23: ('0', '*1'),
            53: ('0',),
            83: (),
            40: ('*0',),
            107: ('0', '*1'),
            58: (),
            16: ('*0',),
            112: ('0', '*1'),
            12: ('1',),
            7: (),
            81: ('*0',),
            96: ('*0', '*1', '*2'),
            93: ('*0', '1'),
            22: (),
            8: ('*0',),
            46: (),
            91: ('*0',),
            10: (),
            5: ('*0',),
            27: ('0', '*1'),
            95: ('1',),
            103: (),
            111: ('*0', '*1'),
            51: ('1',),
            30: ('*1',),
            60: ('*0',),
            59: (),
            9: ('*0',),
            97: ('*0',),
            33: ('*0', '1'),
            35: ('0', '*1'),
            56: ('1', '2', '3'),
            37: (),
            90: ('*0',),
            54: (),
            84: ('*0',),
            77: (),
            28: ('*0',),
            43: ('0', '*1'),
            76: ('1',),
            72: (),
            24: ('*0', '*1'),
            64: ('0', '2'),
            80: ('0', '*1'),
            13: ('1',),
            15: (),
            105: ('*0', '*1'),
            85: ('0', '2', '*3', '4'),
            50: ('*2',),
            52: (),
            99: ('*0',),
            61: (),
            41: ('*0',),
            75: ('0', '*1'),
            17: ('*0', '1'),
            44: ('*0', '1'),
            88: ('*0',)
        }
        self.__reduce_symbol_count: List[int] = [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 2, 2, 3, 0, 1, 2, 2, 1, 1, 1, 0, 2, 2, 1, 1, 2, 1, 0, 3, 1, 1, 2, 1, 2, 2, 0, 1, 0, 1, 1, 1, 2, 2, 1, 0, 1, 1, 1, 4, 3, 0, 1, 0, 2, 4, 1, 0, 0, 1, 0, 1, 4, 4, 1, 0, 1, 3, 1, 0, 1, 0, 1, 1, 3, 2, 0, 5, 2, 2, 1, 2, 0, 1, 6, 1, 1, 1, 1, 1, 1, 3, 2, 2, 2, 3, 1, 1, 1, 1, 1, 2, 0, 3, 2, 1, 2, 1, 0, 1, 2, 2]
        self.__reduce_non_terminal_index: List[int] = [68, 58, 13, 10, 25, 34, 2, 33, 55, 35, 34, 45, 9, 46, 14, 21, 62, 47, 15, 28, 65, 18, 55, 45, 41, 53, 30, 11, 19, 58, 69, 26, 13, 0, 44, 31, 60, 43, 10, 60, 7, 54, 25, 12, 48, 49, 71, 65, 20, 4, 3, 69, 38, 45, 66, 50, 61, 6, 62, 35, 52, 54, 47, 14, 27, 13, 65, 13, 67, 4, 70, 39, 41, 0, 16, 22, 36, 19, 5, 40, 51, 33, 8, 7, 66, 29, 4, 37, 40, 49, 43, 71, 59, 63, 70, 42, 24, 23, 13, 38, 26, 49, 1, 57, 64, 21, 32, 30, 48, 53, 17, 57, 56]

    def parse(self, token_list: List[BosonToken]) -> BosonGrammar:
        grammar: BosonGrammar = BosonGrammar()
        analysis_stack: List[int] = [0]
        symbol_stack: List[BosonGrammarNode] = []
        token_index: int = 0
        while token_index < len(token_list):
            token: BosonToken = token_list[token_index]
            current_state: int = analysis_stack[-1]
            if token.symbol in self.__terminal_index_mapping:
                operation: str = self.__sparse_action_table.get(current_state, {}).get(self.__terminal_index_mapping[token.symbol], 'e')
            else:
                operation: str = 'e'
            operation_flag: str = operation[0]
            if operation_flag == 'e':
                grammar.error_index = token_index
                return grammar
            elif operation_flag == 's':
                analysis_stack.append(int(operation[1:]))
                token_index += 1
                grammar_node: BosonGrammarNode = BosonGrammarNode(token.text)
                symbol_stack.append(grammar_node)
            elif operation_flag == 'r':
                statement_index: int = int(operation[1:])
                reduce_count: int = self.__reduce_symbol_count[statement_index]
                for _ in range(reduce_count):
                    analysis_stack.pop()
                current_state: int = analysis_stack[-1]
                current_non_terminal_index: int = self.__reduce_non_terminal_index[statement_index]
                goto_next_state: int = self.__sparse_goto_table.get(current_state, {}).get(current_non_terminal_index, -1)
                if goto_next_state == -1:
                    raise ValueError('Invalid goto action: state={}, non-terminal={}'.format(current_state, current_non_terminal_index))
                analysis_stack.append(goto_next_state)
                if statement_index in self.__sentence_index_grammar_tuple_mapping:
                    symbol_package: List[BosonGrammarNode] = []
                    for _ in range(reduce_count):
                        symbol_package.insert(0, symbol_stack.pop())
                    grammar_node: BosonGrammarNode = BosonGrammarNode()
                    for node_string in self.__sentence_index_grammar_tuple_mapping[statement_index]:
                        if node_string[0] == '*':
                            for node in symbol_package[int(node_string[1:])]:
                                grammar_node.append(node)
                        else:
                            grammar_node.append(symbol_package[int(node_string)])
                    grammar_node.set_reduce_number(statement_index)
                    symbol_stack.append(grammar_node)
                elif statement_index in {0, 4, 6, 11, 19, 20, 21, 26, 31, 32, 34, 42, 45, 47, 48, 49, 57, 62, 66, 67, 69, 71, 73, 74, 86, 87, 89, 98, 100, 101, 106, 108, 110}:
                    grammar_node: BosonGrammarNode = BosonGrammarNode()
                    for _ in range(reduce_count):
                        grammar_node.insert(0, symbol_stack.pop())
                    grammar_node.set_reduce_number(statement_index)
                    symbol_stack.append(grammar_node)
                else:
                    raise ValueError('Invalid reduce number: reduce={}'.format(statement_index))
            elif operation_flag == 'a':
                grammar.grammar_tree = symbol_stack[0]
                return grammar
            else:
                raise ValueError('Invalid action: action={}'.format(operation))
        raise RuntimeError('Analyzer unusual exit.')
