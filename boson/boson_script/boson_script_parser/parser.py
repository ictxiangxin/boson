from typing import Dict, List, Tuple

from .token import LexicalToken
from .grammar_node import BosonGrammarNode
from .grammar import BosonGrammar


class BosonParser:
    def __init__(self):
        self.__terminal_index_mapping: Dict[str, int] = {
            'node': 0,
            '!symbol_7': 1,
            '!symbol_11': 2,
            '!symbol_14': 3,
            '!symbol_16': 4,
            'name': 5,
            '!symbol_5': 6,
            '!symbol_13': 7,
            '!symbol_4': 8,
            '!symbol_15': 9,
            '!symbol_10': 10,
            '!symbol_2': 11,
            'command': 12,
            '!symbol_8': 13,
            '!symbol_6': 14,
            '!symbol_3': 15,
            '$': 16,
            'string': 17,
            '!symbol_1': 18,
            'number': 19,
            '!symbol_12': 20,
            '!symbol_9': 21,
            'regular': 22
        }
        self.__sparse_action_table: Dict[int, Dict[int, str]] = {
            0: {5: 's7', 12: 's8'},
            1: {16: 'a'},
            2: {5: 's7', 12: 's8', 16: 'r81'},
            3: {5: 'r83', 12: 'r83', 16: 'r83'},
            4: {5: 'r3', 12: 'r3', 16: 'r3'},
            5: {5: 'r63', 12: 'r63', 16: 'r63'},
            6: {5: 'r82', 12: 'r82', 16: 'r82'},
            7: {11: 's17', 13: 's16'},
            8: {5: 's12', 17: 's13'},
            9: {5: 's12', 17: 's13', 18: 's15'},
            10: {5: 'r50', 17: 'r50', 18: 'r50'},
            11: {5: 'r60', 17: 'r60', 18: 'r60'},
            12: {5: 'r10', 17: 'r10', 18: 'r10'},
            13: {5: 'r51', 17: 'r51', 18: 'r51'},
            14: {5: 'r35', 17: 'r35', 18: 'r35'},
            15: {5: 'r41', 12: 'r41', 16: 'r41'},
            16: {2: 's46', 5: 's37', 7: 's45', 10: 's39', 11: 'r67', 17: 's35', 18: 'r67', 21: 'r67'},
            17: {22: 's18'},
            18: {8: 'r48', 15: 's21', 18: 'r48'},
            19: {8: 's23', 18: 'r19'},
            20: {8: 'r71', 18: 'r71'},
            21: {8: 'r39', 18: 'r39'},
            22: {18: 'r26'},
            23: {6: 's26'},
            24: {18: 's25'},
            25: {5: 'r5', 12: 'r5', 16: 'r5'},
            26: {5: 's28'},
            27: {14: 's33'},
            28: {1: 'r14', 14: 'r14'},
            29: {1: 's31', 14: 'r76'},
            30: {1: 'r33', 14: 'r33'},
            31: {5: 's32'},
            32: {1: 'r54', 14: 'r54'},
            33: {18: 'r38'},
            34: {18: 's123'},
            35: {2: 'r7', 3: 'r7', 4: 'r7', 5: 'r7', 7: 'r7', 9: 'r7', 11: 'r7', 17: 'r7', 18: 'r7', 20: 'r7', 21: 'r7'},
            36: {18: 'r47', 21: 'r47'},
            37: {2: 'r61', 3: 'r61', 4: 'r61', 5: 'r61', 7: 'r61', 9: 'r61', 11: 'r61', 17: 'r61', 18: 'r61', 20: 'r61', 21: 'r61'},
            38: {11: 's66', 18: 'r17', 21: 'r17'},
            39: {11: 'r30', 18: 'r30', 21: 'r30'},
            40: {11: 'r84', 18: 'r84', 21: 'r84'},
            41: {2: 's46', 3: 'r66', 5: 's37', 7: 's45', 11: 'r66', 17: 's35', 18: 'r66', 20: 'r66', 21: 'r66'},
            42: {2: 'r36', 3: 'r36', 5: 'r36', 7: 'r36', 11: 'r36', 17: 'r36', 18: 'r36', 20: 'r36', 21: 'r36'},
            43: {2: 'r57', 3: 'r57', 4: 's57', 5: 'r57', 7: 'r57', 9: 's58', 11: 'r57', 17: 'r57', 18: 'r57', 20: 'r57', 21: 'r57'},
            44: {2: 'r46', 3: 'r46', 5: 'r46', 7: 'r46', 11: 'r46', 17: 'r46', 18: 'r46', 20: 'r46', 21: 'r46'},
            45: {2: 's46', 5: 's37', 7: 's45', 17: 's35'},
            46: {2: 's46', 5: 's37', 7: 's45', 17: 's35'},
            47: {20: 's54'},
            48: {3: 'r72', 20: 'r72', 21: 's51'},
            49: {3: 'r55', 20: 'r55', 21: 's51'},
            50: {3: 'r21', 20: 'r21', 21: 'r21'},
            51: {2: 's46', 5: 's37', 7: 's45', 17: 's35'},
            52: {3: 'r89', 20: 'r89', 21: 'r89'},
            53: {3: 'r74', 20: 'r74', 21: 'r74'},
            54: {2: 'r57', 3: 'r57', 4: 's57', 5: 'r57', 7: 'r57', 9: 's58', 11: 'r57', 17: 'r57', 18: 'r57', 20: 'r57', 21: 'r57'},
            55: {2: 'r87', 3: 'r87', 5: 'r87', 7: 'r87', 11: 'r87', 17: 'r87', 18: 'r87', 20: 'r87', 21: 'r87'},
            56: {2: 'r86', 3: 'r86', 5: 'r86', 7: 'r86', 11: 'r86', 17: 'r86', 18: 'r86', 20: 'r86', 21: 'r86'},
            57: {2: 'r6', 3: 'r6', 5: 'r6', 7: 'r6', 11: 'r6', 17: 'r6', 18: 'r6', 20: 'r6', 21: 'r6'},
            58: {2: 'r42', 3: 'r42', 5: 'r42', 7: 'r42', 11: 'r42', 17: 'r42', 18: 'r42', 20: 'r42', 21: 'r42'},
            59: {2: 'r78', 3: 'r78', 5: 'r78', 7: 'r78', 11: 'r78', 17: 'r78', 18: 'r78', 20: 'r78', 21: 'r78'},
            60: {3: 's61'},
            61: {2: 'r49', 3: 'r49', 5: 'r49', 7: 'r49', 11: 'r49', 17: 'r49', 18: 'r49', 20: 'r49', 21: 'r49'},
            62: {2: 'r24', 3: 'r24', 5: 'r24', 7: 'r24', 11: 'r24', 17: 'r24', 18: 'r24', 20: 'r24', 21: 'r24'},
            63: {2: 'r45', 3: 'r45', 5: 'r45', 7: 'r45', 11: 'r45', 17: 'r45', 18: 'r45', 20: 'r45', 21: 'r45'},
            64: {18: 'r62', 21: 'r62'},
            65: {18: 'r34', 21: 'r34'},
            66: {2: 'r12', 5: 's68', 7: 'r12'},
            67: {2: 'r68', 7: 'r68'},
            68: {2: 'r88', 7: 'r88'},
            69: {2: 's70', 7: 's71'},
            70: {0: 'r65', 9: 's102', 20: 'r80'},
            71: {0: 's100'},
            72: {6: 's73', 18: 'r43', 21: 'r43'},
            73: {5: 's79'},
            74: {18: 'r52', 21: 'r52'},
            75: {18: 'r73', 21: 'r73'},
            76: {18: 'r18', 21: 'r18'},
            77: {14: 's99'},
            78: {1: 'r56', 14: 'r56'},
            79: {11: 's80'},
            80: {5: 's86', 6: 's73', 7: 's87', 17: 's82', 19: 's84'},
            81: {1: 'r37', 14: 'r37'},
            82: {1: 'r23', 3: 'r23', 14: 'r23'},
            83: {1: 'r44', 3: 'r44', 14: 'r44'},
            84: {1: 'r53', 3: 'r53', 14: 'r53'},
            85: {1: 'r58', 3: 'r58', 14: 'r58'},
            86: {1: 'r75', 3: 'r75', 14: 'r75'},
            87: {5: 's86', 6: 's73', 7: 's87', 17: 's82', 19: 's84'},
            88: {1: 's91'},
            89: {1: 's91', 3: 's93'},
            90: {1: 'r22', 3: 'r22'},
            91: {5: 's86', 6: 's73', 7: 's87', 17: 's82', 19: 's84'},
            92: {1: 'r25', 3: 'r25'},
            93: {1: 'r77', 3: 'r77', 14: 'r77'},
            94: {1: 'r20', 3: 'r20'},
            95: {1: 's97', 14: 'r69'},
            96: {1: 'r64', 14: 'r64'},
            97: {5: 's79'},
            98: {1: 'r9', 14: 'r9'},
            99: {1: 'r90', 3: 'r90', 14: 'r90', 18: 'r90', 21: 'r90'},
            100: {3: 's101'},
            101: {1: 'r32', 6: 'r32', 18: 'r32', 20: 'r32', 21: 'r32'},
            102: {0: 'r16', 2: 'r16', 7: 'r16'},
            103: {20: 's118'},
            104: {20: 'r79'},
            105: {20: 'r28'},
            106: {1: 'r2', 20: 'r2'},
            107: {0: 's109'},
            108: {0: 'r8', 2: 'r8', 7: 'r8'},
            109: {1: 'r31', 2: 'r65', 7: 'r65', 9: 's102', 20: 'r31'},
            110: {1: 'r13', 20: 'r13'},
            111: {1: 'r59', 20: 'r59'},
            112: {2: 's70', 7: 's71'},
            113: {1: 'r40', 20: 'r40'},
            114: {1: 's116', 20: 'r29'},
            115: {1: 'r1', 20: 'r1'},
            116: {0: 'r65', 9: 's102'},
            117: {1: 'r85', 20: 'r85'},
            118: {1: 'r15', 6: 'r15', 18: 'r15', 20: 'r15', 21: 'r15'},
            119: {18: 'r4', 21: 's120'},
            120: {2: 's46', 5: 's37', 7: 's45', 10: 's39', 11: 'r67', 17: 's35', 18: 'r67', 21: 'r67'},
            121: {18: 'r27', 21: 'r27'},
            122: {18: 'r11', 21: 'r11'},
            123: {5: 'r70', 12: 'r70', 16: 'r70'},
            124: {5: 'r91', 12: 'r91', 16: 'r91'}
        }
        self.__sparse_goto_table: Dict[int, Dict[int, int]] = {
            0: {0: 5, 10: 2, 13: 6, 23: 1, 51: 4, 56: 3},
            2: {0: 5, 13: 6, 51: 4, 56: 124},
            8: {30: 9, 49: 11, 53: 10},
            9: {49: 11, 53: 14},
            16: {12: 36, 18: 43, 25: 42, 27: 41, 28: 40, 47: 34, 57: 38, 58: 44},
            18: {24: 19, 43: 20},
            19: {19: 22, 33: 24},
            26: {42: 27},
            28: {38: 29},
            29: {20: 30},
            36: {29: 119},
            38: {2: 65, 8: 64},
            41: {18: 43, 25: 63, 58: 44},
            43: {16: 62, 17: 55, 48: 56},
            45: {18: 43, 25: 42, 27: 41, 28: 48, 40: 60, 58: 44},
            46: {18: 43, 25: 42, 27: 41, 28: 48, 40: 47, 58: 44},
            48: {11: 50, 21: 49},
            49: {11: 53},
            51: {18: 43, 25: 42, 27: 41, 28: 52, 58: 44},
            54: {16: 59, 17: 55, 48: 56},
            66: {36: 67, 39: 69},
            69: {3: 72},
            70: {5: 108, 7: 103, 9: 104, 14: 106, 31: 107, 50: 105},
            72: {46: 74, 52: 75, 54: 76},
            73: {15: 78, 22: 77},
            78: {34: 95},
            80: {6: 85, 45: 81, 54: 83},
            87: {6: 85, 45: 88, 54: 83},
            88: {4: 90, 32: 89},
            89: {4: 94},
            91: {6: 85, 45: 92, 54: 83},
            95: {41: 96},
            97: {15: 98},
            106: {55: 114},
            109: {5: 108, 31: 112, 37: 111, 44: 110},
            112: {3: 113},
            114: {26: 115},
            116: {5: 108, 14: 117, 31: 107},
            119: {1: 121},
            120: {12: 122, 18: 43, 25: 42, 27: 41, 28: 40, 57: 38, 58: 44}
        }
        self.__sentence_index_grammar_tuple_mapping: Dict[int, Tuple[str, ...]] = {
            77: ('1', '*2'),
            25: ('1',),
            20: ('*0', '*1'),
            53: ('0',),
            23: ('0',),
            37: ('0', '2'),
            69: ('0', '*1'),
            9: ('1',),
            56: (),
            64: ('*0', '*1'),
            90: ('1',),
            55: ('0', '*1'),
            89: ('1',),
            74: ('*0', '*1'),
            49: ('1',),
            78: ('1', '*3'),
            7: ('0',),
            24: ('0', '*1'),
            57: (),
            87: ('*0',),
            13: ('*0', '1', '*2'),
            40: ('*0', '1'),
            31: (),
            59: ('*0',),
            65: (),
            8: ('*0',),
            29: ('0', '*1'),
            85: ('1',),
            2: (),
            1: ('*0', '*1'),
            32: ('1',),
            15: ('*1',),
            28: ('*0',),
            80: (),
            79: ('*0',),
            66: ('*0',),
            45: ('*0', '1'),
            62: ('0', '*1'),
            52: ('1', '2', '3'),
            17: (),
            34: ('*0',),
            43: (),
            73: ('*0',),
            12: (),
            68: ('*0',),
            4: ('0', '*1'),
            11: ('1',),
            47: (),
            27: ('*0', '*1'),
            70: ('0', '2'),
            76: ('0', '*1'),
            54: ('1',),
            14: (),
            33: ('*0', '*1'),
            5: ('0', '2', '*3', '4'),
            38: ('*2',),
            19: (),
            26: ('*0',),
            48: (),
            71: ('*0',),
            41: ('0', '*1'),
            35: ('*0', '1'),
            91: ('*0', '1'),
            22: ('*0',),
            21: ('*0',)
        }
        self.__reduce_symbol_count: List[int] = [1, 2, 0, 1, 2, 6, 1, 1, 1, 2, 1, 2, 0, 3, 0, 3, 1, 0, 1, 0, 2, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 0, 3, 2, 1, 2, 1, 3, 4, 1, 2, 3, 1, 0, 1, 2, 1, 0, 0, 3, 1, 1, 4, 1, 2, 2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 0, 1, 0, 1, 2, 4, 1, 1, 1, 2, 1, 2, 4, 4, 1, 0, 1, 1, 1, 1, 2, 1, 1, 1, 2, 3, 2]
        self.__reduce_non_terminal_index: List[int] = [35, 55, 55, 56, 47, 0, 48, 18, 31, 41, 49, 1, 39, 14, 38, 3, 5, 8, 52, 33, 32, 21, 32, 45, 25, 4, 33, 29, 9, 50, 57, 44, 3, 38, 8, 30, 27, 15, 19, 43, 37, 13, 48, 46, 45, 27, 25, 29, 24, 58, 30, 49, 2, 45, 20, 40, 34, 16, 45, 44, 53, 18, 12, 56, 34, 31, 28, 57, 39, 22, 51, 24, 40, 46, 21, 45, 42, 6, 58, 7, 7, 23, 56, 10, 57, 26, 17, 16, 36, 11, 54, 10]

    def parse(self, token_list: List[LexicalToken]) -> BosonGrammar:
        grammar: BosonGrammar = BosonGrammar()
        analysis_stack: List[int] = [0]
        symbol_stack: List[BosonGrammarNode] = []
        token_index: int = 0
        while token_index < len(token_list):
            token: LexicalToken = token_list[token_index]
            current_state: int = analysis_stack[-1]
            if token.symbol in self.__terminal_index_mapping:
                operation: str = self.__sparse_action_table.get(current_state, {}).get(self.__terminal_index_mapping[token.symbol], 'e')
            else:
                operation: str = 'e'
            operation_flag: str = operation[0]
            if operation_flag == 'e':
                grammar.error_index = token_index
                return grammar
            elif operation_flag == 's':
                analysis_stack.append(int(operation[1:]))
                token_index += 1
                grammar_node: BosonGrammarNode = BosonGrammarNode(token.text)
                symbol_stack.append(grammar_node)
            elif operation_flag == 'r':
                statement_index: int = int(operation[1:])
                reduce_count: int = self.__reduce_symbol_count[statement_index]
                for _ in range(reduce_count):
                    analysis_stack.pop()
                current_state: int = analysis_stack[-1]
                current_non_terminal_index: int = self.__reduce_non_terminal_index[statement_index]
                goto_next_state: int = self.__sparse_goto_table.get(current_state, {}).get(current_non_terminal_index, -1)
                if goto_next_state == -1:
                    raise ValueError('Invalid goto action: state={}, non-terminal={}'.format(current_state, current_non_terminal_index))
                analysis_stack.append(goto_next_state)
                if statement_index in self.__sentence_index_grammar_tuple_mapping:
                    symbol_package: List[BosonGrammarNode] = []
                    for _ in range(reduce_count):
                        symbol_package.insert(0, symbol_stack.pop())
                    grammar_node: BosonGrammarNode = BosonGrammarNode()
                    for node_string in self.__sentence_index_grammar_tuple_mapping[statement_index]:
                        if node_string[0] == '*':
                            for node in symbol_package[int(node_string[1:])]:
                                grammar_node.append(node)
                        else:
                            grammar_node.append(symbol_package[int(node_string)])
                    grammar_node.set_reduce_number(statement_index)
                    symbol_stack.append(grammar_node)
                elif statement_index in {0, 3, 6, 10, 16, 18, 30, 36, 39, 42, 44, 46, 50, 51, 58, 60, 61, 63, 67, 72, 75, 81, 82, 83, 84, 86, 88}:
                    grammar_node: BosonGrammarNode = BosonGrammarNode()
                    for _ in range(reduce_count):
                        grammar_node.insert(0, symbol_stack.pop())
                    grammar_node.set_reduce_number(statement_index)
                    symbol_stack.append(grammar_node)
                else:
                    raise ValueError('Invalid reduce number: reduce={}'.format(statement_index))
            elif operation_flag == 'a':
                grammar.grammar_tree = symbol_stack[0]
                return grammar
            else:
                raise ValueError('Invalid action: action={}'.format(operation))
        raise RuntimeError('Analyzer unusual exit.')
