from typing import Dict, List, Tuple

from .token import BosonToken
from .grammar_node import BosonGrammarNode
from .grammar import BosonGrammar


class BosonParser:
    def __init__(self):
        self.__terminal_index_mapping: Dict[str, int] = {
            '!symbol_3': 0,
            '!symbol_7': 1,
            'number': 2,
            '$': 3,
            '!symbol_12': 4,
            '!symbol_2': 5,
            'command': 6,
            '!symbol_16': 7,
            '!symbol_13': 8,
            '!symbol_10': 9,
            'node': 10,
            'regular': 11,
            '!symbol_1': 12,
            'name': 13,
            '!symbol_15': 14,
            'string': 15,
            '!symbol_6': 16,
            '!symbol_11': 17,
            '!symbol_4': 18,
            '!symbol_14': 19,
            '!symbol_5': 20,
            '!symbol_9': 21,
            '!symbol_8': 22
        }
        self.__sparse_action_table: Dict[int, Dict[int, str]] = {
            0: {6: 's8', 13: 's3'},
            1: {3: 'a'},
            2: {3: 'r8', 6: 's8', 13: 's3'},
            3: {5: 's46', 22: 's45'},
            4: {3: 'r33', 6: 'r33', 13: 'r33'},
            5: {3: 'r24', 6: 'r24', 13: 'r24'},
            6: {3: 'r42', 6: 'r42', 13: 'r42'},
            7: {3: 'r83', 6: 'r83', 13: 'r83'},
            8: {13: 's15', 15: 's14', 20: 's9'},
            9: {13: 's20'},
            10: {12: 's16', 13: 's15', 15: 's14', 20: 's9'},
            11: {12: 'r39', 13: 'r39', 15: 'r39', 20: 'r39'},
            12: {12: 'r56', 13: 'r56', 15: 'r56', 20: 'r56'},
            13: {12: 'r28', 13: 'r28', 15: 'r28', 20: 'r28'},
            14: {12: 'r52', 13: 'r52', 15: 'r52', 20: 'r52'},
            15: {12: 'r67', 13: 'r67', 15: 'r67', 20: 'r67'},
            16: {3: 'r36', 6: 'r36', 13: 'r36'},
            17: {12: 'r11', 13: 'r11', 15: 'r11', 20: 'r11'},
            18: {16: 's44'},
            19: {1: 'r68', 16: 'r68'},
            20: {5: 's21'},
            21: {2: 's24', 8: 's28', 13: 's23', 15: 's26', 20: 's9'},
            22: {1: 'r31', 16: 'r31'},
            23: {1: 'r12', 16: 'r12', 19: 'r12'},
            24: {1: 'r54', 16: 'r54', 19: 'r54'},
            25: {1: 'r57', 16: 'r57', 19: 'r57'},
            26: {1: 'r77', 16: 'r77', 19: 'r77'},
            27: {1: 'r90', 16: 'r90', 19: 'r90'},
            28: {2: 's24', 8: 's28', 13: 's23', 15: 's26', 20: 's9'},
            29: {1: 's30'},
            30: {2: 's24', 8: 's28', 13: 's23', 15: 's26', 20: 's9'},
            31: {1: 's33', 19: 'r7'},
            32: {1: 'r10', 19: 'r10'},
            33: {2: 's24', 8: 's28', 13: 's23', 15: 's26', 19: 'r61', 20: 's9'},
            34: {16: 'r69', 19: 'r69'},
            35: {19: 's37'},
            36: {1: 'r51', 19: 'r51'},
            37: {1: 'r64', 16: 'r64', 19: 'r64'},
            38: {1: 'r5', 19: 'r5'},
            39: {1: 's40', 16: 'r7'},
            40: {13: 's20', 16: 'r61'},
            41: {16: 'r92'},
            42: {1: 'r62', 16: 'r62'},
            43: {1: 'r94', 16: 'r94'},
            44: {1: 'r16', 12: 'r16', 13: 'r16', 15: 'r16', 16: 'r16', 19: 'r16', 20: 'r16', 21: 'r16'},
            45: {5: 'r44', 8: 's63', 9: 's70', 12: 'r44', 13: 's66', 15: 's68', 17: 's75', 21: 'r44'},
            46: {11: 's47'},
            47: {0: 's50', 12: 'r40', 18: 'r40'},
            48: {12: 'r80', 18: 's52'},
            49: {12: 'r17', 18: 'r17'},
            50: {12: 'r66', 18: 'r66'},
            51: {12: 'r32'},
            52: {20: 's55'},
            53: {12: 's54'},
            54: {3: 'r20', 6: 'r20', 13: 'r20'},
            55: {13: 's56'},
            56: {1: 'r21', 16: 'r21'},
            57: {16: 's58'},
            58: {12: 'r60'},
            59: {1: 's61', 16: 'r26'},
            60: {1: 'r65', 16: 'r65'},
            61: {13: 's62'},
            62: {1: 'r91', 16: 'r91'},
            63: {8: 's63', 13: 's66', 15: 's68', 17: 's75'},
            64: {12: 's126'},
            65: {12: 'r82', 21: 'r82'},
            66: {4: 'r30', 5: 'r30', 7: 'r30', 8: 'r30', 12: 'r30', 13: 'r30', 14: 'r30', 15: 'r30', 17: 'r30', 19: 'r30', 21: 'r30'},
            67: {5: 's91', 12: 'r47', 21: 'r47'},
            68: {4: 'r95', 5: 'r95', 7: 'r95', 8: 'r95', 12: 'r95', 13: 'r95', 14: 'r95', 15: 'r95', 17: 'r95', 19: 'r95', 21: 'r95'},
            69: {5: 'r4', 12: 'r4', 21: 'r4'},
            70: {5: 'r14', 12: 'r14', 21: 'r14'},
            71: {4: 'r19', 5: 'r19', 8: 's63', 12: 'r19', 13: 's66', 15: 's68', 17: 's75', 19: 'r19', 21: 'r19'},
            72: {4: 'r34', 5: 'r34', 8: 'r34', 12: 'r34', 13: 'r34', 15: 'r34', 17: 'r34', 19: 'r34', 21: 'r34'},
            73: {4: 'r55', 5: 'r55', 7: 's79', 8: 'r55', 12: 'r55', 13: 'r55', 14: 's80', 15: 'r55', 17: 'r55', 19: 'r55', 21: 'r55'},
            74: {4: 'r93', 5: 'r93', 8: 'r93', 12: 'r93', 13: 'r93', 15: 'r93', 17: 'r93', 19: 'r93', 21: 'r93'},
            75: {8: 's63', 13: 's66', 15: 's68', 17: 's75'},
            76: {4: 'r81', 19: 'r81', 21: 's86'},
            77: {4: 's78'},
            78: {4: 'r55', 5: 'r55', 7: 's79', 8: 'r55', 12: 'r55', 13: 'r55', 14: 's80', 15: 'r55', 17: 'r55', 19: 'r55', 21: 'r55'},
            79: {4: 'r45', 5: 'r45', 8: 'r45', 12: 'r45', 13: 'r45', 15: 'r45', 17: 'r45', 19: 'r45', 21: 'r45'},
            80: {4: 'r59', 5: 'r59', 8: 'r59', 12: 'r59', 13: 'r59', 15: 'r59', 17: 'r59', 19: 'r59', 21: 'r59'},
            81: {4: 'r13', 5: 'r13', 8: 'r13', 12: 'r13', 13: 'r13', 15: 'r13', 17: 'r13', 19: 'r13', 21: 'r13'},
            82: {4: 'r25', 5: 'r25', 8: 'r25', 12: 'r25', 13: 'r25', 15: 'r25', 17: 'r25', 19: 'r25', 21: 'r25'},
            83: {4: 'r76', 5: 'r76', 8: 'r76', 12: 'r76', 13: 'r76', 15: 'r76', 17: 'r76', 19: 'r76', 21: 'r76'},
            84: {4: 'r87', 19: 'r87', 21: 's86'},
            85: {4: 'r15', 19: 'r15', 21: 'r15'},
            86: {8: 's63', 13: 's66', 15: 's68', 17: 's75'},
            87: {4: 'r43', 19: 'r43', 21: 'r43'},
            88: {4: 'r84', 19: 'r84', 21: 'r84'},
            89: {4: 'r53', 5: 'r53', 8: 'r53', 12: 'r53', 13: 'r53', 15: 'r53', 17: 'r53', 19: 'r53', 21: 'r53'},
            90: {4: 'r86', 5: 'r86', 8: 'r86', 12: 'r86', 13: 'r86', 15: 'r86', 17: 'r86', 19: 'r86', 21: 'r86'},
            91: {8: 'r23', 13: 's96', 17: 'r23'},
            92: {12: 'r41', 21: 'r41'},
            93: {12: 'r38', 21: 'r38'},
            94: {8: 's98', 17: 's99'},
            95: {8: 'r37', 17: 'r37'},
            96: {8: 'r2', 17: 'r2'},
            97: {12: 'r79', 20: 's9', 21: 'r79'},
            98: {10: 's117'},
            99: {4: 'r18', 10: 'r85', 14: 's106'},
            100: {4: 's116'},
            101: {4: 'r74'},
            102: {4: 'r71'},
            103: {1: 'r78', 4: 'r78'},
            104: {10: 's107'},
            105: {8: 'r50', 10: 'r50', 17: 'r50'},
            106: {8: 'r48', 10: 'r48', 17: 'r48'},
            107: {1: 'r70', 4: 'r70', 8: 'r85', 14: 's106', 17: 'r85'},
            108: {1: 'r6', 4: 'r6'},
            109: {1: 'r22', 4: 'r22'},
            110: {8: 's98', 17: 's99'},
            111: {1: 'r63', 4: 'r63'},
            112: {1: 's114', 4: 'r3'},
            113: {1: 'r27', 4: 'r27'},
            114: {10: 'r85', 14: 's106'},
            115: {1: 'r73', 4: 'r73'},
            116: {1: 'r49', 4: 'r49', 12: 'r49', 20: 'r49', 21: 'r49'},
            117: {19: 's118'},
            118: {1: 'r29', 4: 'r29', 12: 'r29', 20: 'r29', 21: 'r29'},
            119: {12: 'r1', 21: 'r1'},
            120: {12: 'r35', 21: 'r35'},
            121: {12: 'r9', 21: 'r9'},
            122: {12: 'r58', 21: 's124'},
            123: {12: 'r46', 21: 'r46'},
            124: {5: 'r44', 8: 's63', 9: 's70', 12: 'r44', 13: 's66', 15: 's68', 17: 's75', 21: 'r44'},
            125: {12: 'r72', 21: 'r72'},
            126: {3: 'r88', 6: 'r88', 13: 'r88'},
            127: {19: 's128'},
            128: {4: 'r89', 5: 'r89', 8: 'r89', 12: 'r89', 13: 'r89', 15: 'r89', 17: 'r89', 19: 'r89', 21: 'r89'},
            129: {3: 'r75', 6: 'r75', 13: 'r75'}
        }
        self.__sparse_goto_table: Dict[int, Dict[int, int]] = {
            0: {6: 4, 23: 1, 34: 2, 44: 6, 59: 5, 60: 7},
            2: {6: 129, 44: 6, 59: 5, 60: 7},
            8: {3: 13, 29: 12, 48: 10, 56: 11},
            9: {36: 19, 57: 18},
            10: {3: 13, 29: 12, 56: 17},
            19: {20: 39},
            21: {3: 25, 15: 27, 17: 22},
            28: {3: 25, 15: 27, 17: 29},
            29: {33: 32, 47: 31},
            30: {3: 25, 15: 27, 17: 38},
            31: {7: 34, 33: 36, 45: 35},
            33: {3: 25, 15: 27, 17: 38},
            39: {7: 34, 45: 41, 55: 42},
            40: {36: 43},
            45: {4: 67, 12: 71, 14: 72, 21: 65, 26: 74, 28: 64, 41: 69, 54: 73},
            47: {9: 49, 37: 48},
            48: {27: 51, 39: 53},
            55: {42: 57},
            56: {8: 59},
            59: {11: 60},
            63: {10: 127, 12: 71, 14: 72, 26: 74, 41: 76, 54: 73},
            65: {32: 122},
            67: {46: 92, 51: 93},
            71: {14: 90, 26: 74, 54: 73},
            73: {5: 89, 18: 83, 53: 82},
            75: {10: 77, 12: 71, 14: 72, 26: 74, 41: 76, 54: 73},
            76: {22: 84, 43: 85},
            78: {5: 81, 18: 83, 53: 82},
            84: {43: 88},
            86: {12: 71, 14: 72, 26: 74, 41: 87, 54: 73},
            91: {35: 94, 49: 95},
            94: {58: 97},
            97: {3: 120, 31: 119, 50: 121},
            99: {0: 102, 2: 103, 13: 100, 25: 104, 40: 105, 52: 101},
            103: {1: 112},
            107: {16: 109, 19: 108, 25: 110, 40: 105},
            110: {58: 111},
            112: {24: 113},
            114: {2: 115, 25: 104, 40: 105},
            122: {30: 123},
            124: {4: 67, 12: 71, 14: 72, 21: 125, 26: 74, 41: 69, 54: 73}
        }
        self.__sentence_index_grammar_tuple_mapping: Dict[int, Tuple[str, ...]] = {
            64: ('1', '*2'),
            5: ('1',),
            51: ('*0', '*1'),
            54: ('0',),
            77: ('0',),
            31: ('0', '2'),
            92: ('0', '*1'),
            94: ('1',),
            7: (),
            69: ('*0',),
            68: (),
            62: ('*0', '*1'),
            16: ('1',),
            87: ('0', '*1'),
            43: ('1',),
            84: ('*0', '*1'),
            89: ('1',),
            13: ('1', '*3'),
            95: ('0',),
            53: ('0', '*1'),
            55: (),
            25: ('*0',),
            6: ('*0', '1', '*2'),
            63: ('*0', '1'),
            70: (),
            22: ('*0',),
            85: (),
            50: ('*0',),
            3: ('0', '*1'),
            73: ('1',),
            78: (),
            27: ('*0', '*1'),
            29: ('1',),
            49: ('*1',),
            71: ('*0',),
            18: (),
            74: ('*0',),
            19: ('*0',),
            86: ('*0', '1'),
            41: ('0', '*1'),
            9: ('1', '2', '3'),
            47: (),
            38: ('*0',),
            79: (),
            1: ('*0',),
            23: (),
            37: ('*0',),
            58: ('0', '*1'),
            72: ('1',),
            82: (),
            46: ('*0', '*1'),
            88: ('0', '2'),
            26: ('0', '*1'),
            91: ('1',),
            21: (),
            65: ('*0', '*1'),
            20: ('0', '2', '*3', '4'),
            60: ('*2',),
            80: (),
            32: ('*0',),
            40: (),
            17: ('*0',),
            36: ('0', '*1'),
            11: ('*0', '1'),
            75: ('*0', '1'),
            10: ('*0',),
            15: ('*0',)
        }
        self.__reduce_symbol_count: List[int] = [1, 1, 1, 2, 1, 2, 3, 0, 1, 4, 1, 2, 1, 4, 1, 1, 3, 1, 0, 1, 6, 0, 1, 0, 1, 1, 2, 2, 1, 3, 1, 3, 1, 1, 1, 1, 3, 1, 1, 1, 0, 2, 1, 2, 0, 1, 2, 0, 1, 3, 1, 2, 1, 2, 1, 0, 1, 1, 2, 1, 4, 1, 2, 2, 5, 2, 1, 1, 0, 1, 0, 1, 2, 2, 1, 2, 1, 1, 0, 0, 0, 1, 0, 1, 2, 0, 2, 2, 4, 3, 1, 2, 3, 1, 2, 1]
        self.__reduce_non_terminal_index: List[int] = [38, 50, 49, 0, 4, 33, 2, 45, 23, 51, 47, 48, 17, 26, 4, 22, 3, 37, 13, 41, 59, 8, 19, 35, 6, 5, 42, 1, 29, 58, 54, 36, 39, 34, 12, 31, 60, 35, 46, 48, 37, 21, 6, 43, 4, 18, 32, 46, 40, 58, 25, 47, 29, 14, 17, 5, 56, 17, 28, 18, 27, 7, 20, 16, 15, 8, 9, 29, 20, 45, 19, 52, 30, 24, 13, 34, 53, 17, 1, 50, 39, 10, 32, 6, 22, 25, 12, 10, 44, 26, 17, 11, 57, 14, 55, 54]

    def parse(self, token_list: List[BosonToken]) -> BosonGrammar:
        grammar: BosonGrammar = BosonGrammar()
        analysis_stack: List[int] = [0]
        symbol_stack: List[BosonGrammarNode] = []
        token_index: int = 0
        while token_index < len(token_list):
            token: BosonToken = token_list[token_index]
            current_state: int = analysis_stack[-1]
            if token.symbol in self.__terminal_index_mapping:
                operation: str = self.__sparse_action_table.get(current_state, {}).get(self.__terminal_index_mapping[token.symbol], 'e')
            else:
                operation: str = 'e'
            operation_flag: str = operation[0]
            if operation_flag == 'e':
                grammar.error_index = token_index
                return grammar
            elif operation_flag == 's':
                analysis_stack.append(int(operation[1:]))
                token_index += 1
                grammar_node: BosonGrammarNode = BosonGrammarNode(token.text)
                symbol_stack.append(grammar_node)
            elif operation_flag == 'r':
                statement_index: int = int(operation[1:])
                reduce_count: int = self.__reduce_symbol_count[statement_index]
                for _ in range(reduce_count):
                    analysis_stack.pop()
                current_state: int = analysis_stack[-1]
                current_non_terminal_index: int = self.__reduce_non_terminal_index[statement_index]
                goto_next_state: int = self.__sparse_goto_table.get(current_state, {}).get(current_non_terminal_index, -1)
                if goto_next_state == -1:
                    raise ValueError('Invalid goto action: state={}, non-terminal={}'.format(current_state, current_non_terminal_index))
                analysis_stack.append(goto_next_state)
                if statement_index in self.__sentence_index_grammar_tuple_mapping:
                    symbol_package: List[BosonGrammarNode] = []
                    for _ in range(reduce_count):
                        symbol_package.insert(0, symbol_stack.pop())
                    grammar_node: BosonGrammarNode = BosonGrammarNode()
                    for node_string in self.__sentence_index_grammar_tuple_mapping[statement_index]:
                        if node_string[0] == '*':
                            for node in symbol_package[int(node_string[1:])]:
                                grammar_node.append(node)
                        else:
                            grammar_node.append(symbol_package[int(node_string)])
                    grammar_node.set_reduce_number(statement_index)
                    symbol_stack.append(grammar_node)
                elif statement_index in {0, 2, 4, 8, 12, 14, 24, 28, 30, 33, 34, 35, 39, 42, 44, 45, 48, 52, 56, 57, 59, 61, 66, 67, 76, 81, 83, 90, 93}:
                    grammar_node: BosonGrammarNode = BosonGrammarNode()
                    for _ in range(reduce_count):
                        grammar_node.insert(0, symbol_stack.pop())
                    grammar_node.set_reduce_number(statement_index)
                    symbol_stack.append(grammar_node)
                else:
                    raise ValueError('Invalid reduce number: reduce={}'.format(statement_index))
            elif operation_flag == 'a':
                grammar.grammar_tree = symbol_stack[0]
                return grammar
            else:
                raise ValueError('Invalid action: action={}'.format(operation))
        raise RuntimeError('Analyzer unusual exit.')
