from typing import Dict, List, Tuple

from .token import BosonToken
from .grammar_node import BosonGrammarNode
from .grammar import BosonGrammar


class BosonParser:
    def __init__(self):
        self.__terminal_index_mapping: Dict[str, int] = {
            '!symbol_19': 0,
            '$': 1,
            'string': 2,
            '!symbol_15': 3,
            'number': 4,
            '!symbol_9': 5,
            '!symbol_6': 6,
            'name': 7,
            '!symbol_8': 8,
            '!symbol_4': 9,
            '!symbol_5': 10,
            '!symbol_2': 11,
            '!symbol_16': 12,
            '!symbol_12': 13,
            '!symbol_13': 14,
            '!symbol_14': 15,
            '!symbol_1': 16,
            '!symbol_3': 17,
            '!symbol_17': 18,
            '!symbol_18': 19,
            '!symbol_10': 20,
            '!symbol_11': 21,
            'regular': 22,
            '!symbol_7': 23
        }
        self.__sparse_action_table: Dict[int, Dict[int, str]] = {
            0: {7: 's7', 16: 's8'},
            1: {1: 'a'},
            2: {1: 'r57', 7: 's7', 16: 's8'},
            3: {1: 'r16', 7: 'r16', 16: 'r16'},
            4: {1: 'r31', 7: 'r31', 16: 'r31'},
            5: {1: 'r75', 7: 'r75', 16: 'r75'},
            6: {1: 'r92', 7: 'r92', 16: 'r92'},
            7: {5: 's45', 17: 's46'},
            8: {2: 's12', 6: 's9', 7: 's14'},
            9: {7: 's19'},
            10: {2: 's12', 6: 's9', 7: 's14', 11: 's15'},
            11: {2: 'r67', 6: 'r67', 7: 'r67', 11: 'r67'},
            12: {2: 'r8', 6: 'r8', 7: 'r8', 11: 'r8'},
            13: {2: 'r15', 6: 'r15', 7: 'r15', 11: 'r15'},
            14: {2: 'r29', 6: 'r29', 7: 'r29', 11: 'r29'},
            15: {1: 'r104', 7: 'r104', 16: 'r104'},
            16: {2: 'r95', 6: 'r95', 7: 'r95', 11: 'r95'},
            17: {23: 's44'},
            18: {8: 'r5', 23: 'r5'},
            19: {17: 's20'},
            20: {2: 's24', 4: 's23', 6: 's9', 7: 's26', 15: 's27'},
            21: {8: 'r20', 23: 'r20'},
            22: {3: 'r6', 8: 'r6', 23: 'r6'},
            23: {3: 'r19', 8: 'r19', 23: 'r19'},
            24: {3: 'r69', 8: 'r69', 23: 'r69'},
            25: {3: 'r72', 8: 'r72', 23: 'r72'},
            26: {3: 'r103', 8: 'r103', 23: 'r103'},
            27: {2: 's24', 4: 's23', 6: 's9', 7: 's26', 15: 's27'},
            28: {8: 's29'},
            29: {2: 's24', 4: 's23', 6: 's9', 7: 's26', 15: 's27'},
            30: {3: 'r39', 8: 's32'},
            31: {3: 'r22', 8: 'r22'},
            32: {2: 's24', 3: 'r59', 4: 's23', 6: 's9', 7: 's26', 15: 's27'},
            33: {3: 'r77'},
            34: {3: 's36'},
            35: {3: 'r63', 8: 'r63'},
            36: {3: 'r64', 8: 'r64', 23: 'r64'},
            37: {3: 'r105', 8: 'r105'},
            38: {8: 's41', 23: 'r41'},
            39: {23: 'r7'},
            40: {8: 'r79', 23: 'r79'},
            41: {7: 's19', 23: 'r87'},
            42: {23: 'r11'},
            43: {8: 'r100', 23: 'r100'},
            44: {2: 'r98', 3: 'r98', 6: 'r98', 7: 'r98', 8: 'r98', 11: 'r98', 20: 'r98', 23: 'r98'},
            45: {2: 's64', 7: 's68', 11: 'r53', 13: 's76', 15: 's77', 17: 'r53', 20: 'r53', 21: 's70', 22: 's66'},
            46: {22: 's47'},
            47: {9: 's48', 10: 'r24', 11: 'r24'},
            48: {10: 'r40', 11: 'r40'},
            49: {10: 's52', 11: 'r37'},
            50: {10: 'r51', 11: 'r51'},
            51: {11: 'r4'},
            52: {6: 's55'},
            53: {11: 's54'},
            54: {1: 'r94', 7: 'r94', 16: 'r94'},
            55: {7: 's57'},
            56: {23: 's62'},
            57: {8: 'r50', 23: 'r50'},
            58: {8: 's60', 23: 'r23'},
            59: {8: 'r10', 23: 'r10'},
            60: {7: 's61'},
            61: {8: 'r73', 23: 'r73'},
            62: {11: 'r90'},
            63: {11: 's142'},
            64: {0: 'r65', 2: 'r65', 3: 'r65', 7: 'r65', 10: 'r65', 11: 'r65', 12: 'r65', 13: 'r65', 14: 'r65', 15: 'r65', 17: 'r65', 20: 'r65', 22: 'r65'},
            65: {11: 'r54', 20: 'r54'},
            66: {0: 'r34', 2: 'r34', 3: 'r34', 7: 'r34', 9: 's137', 10: 'r34', 11: 'r34', 12: 'r34', 13: 'r34', 14: 'r34', 15: 'r34', 17: 'r34', 20: 'r34', 22: 'r34'},
            67: {11: 'r96', 17: 's102', 20: 'r96'},
            68: {0: 'r97', 2: 'r97', 3: 'r97', 7: 'r97', 10: 'r97', 11: 'r97', 12: 'r97', 13: 'r97', 14: 'r97', 15: 'r97', 17: 'r97', 20: 'r97', 22: 'r97'},
            69: {11: 'r102', 17: 'r102', 20: 'r102'},
            70: {11: 'r110', 17: 'r110', 20: 'r110'},
            71: {2: 's64', 3: 'r25', 7: 's68', 11: 'r25', 13: 's76', 14: 'r25', 15: 's77', 17: 'r25', 20: 'r25', 22: 's66'},
            72: {2: 'r52', 3: 'r52', 7: 'r52', 11: 'r52', 13: 'r52', 14: 'r52', 15: 'r52', 17: 'r52', 20: 'r52', 22: 'r52'},
            73: {2: 'r61', 3: 'r61', 7: 'r61', 10: 's97', 11: 'r61', 13: 'r61', 14: 'r61', 15: 'r61', 17: 'r61', 20: 'r61', 22: 'r61'},
            74: {0: 's90', 2: 'r36', 3: 'r36', 7: 'r36', 10: 'r36', 11: 'r36', 12: 's91', 13: 'r36', 14: 'r36', 15: 'r36', 17: 'r36', 20: 'r36', 22: 'r36'},
            75: {2: 'r83', 3: 'r83', 7: 'r83', 10: 'r83', 11: 'r83', 13: 'r83', 14: 'r83', 15: 'r83', 17: 'r83', 20: 'r83', 22: 'r83'},
            76: {2: 's64', 7: 's68', 13: 's76', 15: 's77', 22: 's66'},
            77: {2: 's64', 7: 's68', 13: 's76', 15: 's77', 22: 's66'},
            78: {3: 's84'},
            79: {3: 'r21', 14: 'r21', 20: 'r21'},
            80: {3: 'r3', 14: 'r3', 20: 's81'},
            81: {2: 's64', 7: 's68', 13: 's76', 15: 's77', 22: 's66'},
            82: {3: 'r2', 14: 'r2', 20: 'r2'},
            83: {3: 'r74', 14: 'r74', 20: 'r74'},
            84: {2: 'r111', 3: 'r111', 7: 'r111', 10: 'r111', 11: 'r111', 13: 'r111', 14: 'r111', 15: 'r111', 17: 'r111', 20: 'r111', 22: 'r111'},
            85: {14: 's86'},
            86: {0: 's90', 2: 'r27', 3: 'r27', 7: 'r27', 10: 'r27', 11: 'r27', 12: 's91', 13: 'r27', 14: 'r27', 15: 'r27', 17: 'r27', 20: 'r27', 22: 'r27'},
            87: {2: 'r28', 3: 'r28', 7: 'r28', 10: 'r28', 11: 'r28', 13: 'r28', 14: 'r28', 15: 'r28', 17: 'r28', 20: 'r28', 22: 'r28'},
            88: {2: 'r56', 3: 'r56', 7: 'r56', 10: 'r56', 11: 'r56', 13: 'r56', 14: 'r56', 15: 'r56', 17: 'r56', 20: 'r56', 22: 'r56'},
            89: {2: 'r13', 3: 'r13', 7: 'r13', 10: 'r13', 11: 'r13', 13: 'r13', 14: 'r13', 15: 'r13', 17: 'r13', 20: 'r13', 22: 'r13'},
            90: {2: 'r9', 3: 'r9', 7: 'r9', 10: 'r9', 11: 'r9', 13: 'r9', 14: 'r9', 15: 'r9', 17: 'r9', 20: 'r9', 22: 'r9'},
            91: {2: 'r62', 3: 'r62', 7: 'r62', 10: 'r62', 11: 'r62', 13: 'r62', 14: 'r62', 15: 'r62', 17: 'r62', 20: 'r62', 22: 'r62'},
            92: {2: 'r88', 3: 'r88', 7: 'r88', 10: 'r88', 11: 'r88', 13: 'r88', 14: 'r88', 15: 'r88', 17: 'r88', 20: 'r88', 22: 'r88'},
            93: {2: 'r60', 3: 'r60', 7: 'r60', 10: 'r60', 11: 'r60', 13: 'r60', 14: 'r60', 15: 'r60', 17: 'r60', 20: 'r60', 22: 'r60'},
            94: {2: 'r78', 3: 'r78', 7: 'r78', 10: 'r78', 11: 'r78', 13: 'r78', 14: 'r78', 15: 'r78', 17: 'r78', 20: 'r78', 22: 'r78'},
            95: {2: 'r35', 3: 'r35', 7: 'r35', 11: 'r35', 13: 'r35', 14: 'r35', 15: 'r35', 17: 'r35', 20: 'r35', 22: 'r35'},
            96: {2: 'r66', 3: 'r66', 7: 'r66', 11: 'r66', 13: 'r66', 14: 'r66', 15: 'r66', 17: 'r66', 20: 'r66', 22: 'r66'},
            97: {7: 's98'},
            98: {2: 'r85', 3: 'r85', 7: 'r85', 11: 'r85', 13: 'r85', 14: 'r85', 15: 'r85', 17: 'r85', 20: 'r85', 22: 'r85'},
            99: {2: 'r30', 3: 'r30', 7: 'r30', 11: 'r30', 13: 'r30', 14: 'r30', 15: 'r30', 17: 'r30', 20: 'r30', 22: 'r30'},
            100: {11: 'r46', 20: 'r46'},
            101: {11: 'r70', 20: 'r70'},
            102: {7: 's105', 13: 'r82', 15: 'r82'},
            103: {13: 's108', 15: 's107'},
            104: {13: 'r49', 15: 'r49'},
            105: {13: 'r89', 15: 'r89'},
            106: {6: 's9', 11: 'r76', 20: 'r76'},
            107: {4: 's130'},
            108: {12: 's115', 14: 'r80', 18: 'r17', 19: 'r17'},
            109: {14: 's129'},
            110: {14: 'r58'},
            111: {14: 'r45'},
            112: {8: 'r18', 14: 'r18'},
            113: {18: 's117', 19: 's118'},
            114: {18: 'r112', 19: 'r112'},
            115: {18: 'r101', 19: 'r101'},
            116: {8: 'r42', 12: 's122', 13: 'r106', 14: 'r42', 15: 'r106'},
            117: {8: 'r14', 12: 'r14', 13: 'r14', 14: 'r14', 15: 'r14'},
            118: {8: 'r108', 12: 'r108', 13: 'r108', 14: 'r108', 15: 'r108'},
            119: {8: 'r107', 14: 'r107'},
            120: {13: 's108', 15: 's107'},
            121: {13: 'r93', 15: 'r93'},
            122: {13: 'r47', 15: 'r47'},
            123: {8: 'r81', 14: 'r81'},
            124: {8: 'r43', 14: 'r43'},
            125: {8: 's126', 14: 'r84'},
            126: {12: 's115', 18: 'r17', 19: 'r17'},
            127: {8: 'r38', 14: 'r38'},
            128: {8: 'r26', 14: 'r26'},
            129: {6: 'r86', 8: 'r86', 11: 'r86', 14: 'r86', 20: 'r86'},
            130: {3: 's131'},
            131: {6: 'r33', 8: 'r33', 11: 'r33', 14: 'r33', 20: 'r33'},
            132: {11: 'r109', 20: 'r109'},
            133: {11: 'r44', 20: 'r44'},
            134: {11: 'r48', 20: 'r48'},
            135: {0: 'r91', 2: 'r91', 3: 'r91', 7: 'r91', 10: 'r91', 11: 'r91', 12: 'r91', 13: 'r91', 14: 'r91', 15: 'r91', 17: 'r91', 20: 'r91', 22: 'r91'},
            136: {0: 'r68', 2: 'r68', 3: 'r68', 7: 'r68', 10: 'r68', 11: 'r68', 12: 'r68', 13: 'r68', 14: 'r68', 15: 'r68', 17: 'r68', 20: 'r68', 22: 'r68'},
            137: {0: 'r1', 2: 'r1', 3: 'r1', 7: 'r1', 10: 'r1', 11: 'r1', 12: 'r1', 13: 'r1', 14: 'r1', 15: 'r1', 17: 'r1', 20: 'r1', 22: 'r1'},
            138: {11: 'r12', 20: 's140'},
            139: {11: 'r71', 20: 'r71'},
            140: {2: 's64', 7: 's68', 11: 'r53', 13: 's76', 15: 's77', 17: 'r53', 20: 'r53', 21: 's70', 22: 's66'},
            141: {11: 'r55', 20: 'r55'},
            142: {1: 'r99', 7: 'r99', 16: 'r99'},
            143: {1: 'r32', 7: 'r32', 16: 'r32'}
        }
        self.__sparse_goto_table: Dict[int, Dict[int, int]] = {
            0: {6: 2, 10: 6, 17: 4, 46: 1, 49: 3, 63: 5},
            2: {10: 6, 17: 4, 49: 143, 63: 5},
            8: {3: 11, 23: 10, 64: 13},
            9: {25: 18, 38: 17},
            10: {3: 16, 64: 13},
            18: {33: 38},
            20: {4: 22, 35: 21, 64: 25},
            27: {4: 22, 35: 28, 64: 25},
            28: {12: 30, 65: 31},
            29: {4: 22, 35: 37, 64: 25},
            30: {22: 33, 51: 34, 65: 35},
            32: {4: 22, 35: 37, 64: 25},
            38: {24: 40, 47: 39, 58: 42},
            41: {25: 43},
            45: {2: 65, 5: 71, 11: 75, 18: 63, 20: 72, 26: 69, 29: 73, 40: 67, 45: 74},
            47: {15: 49, 57: 50},
            49: {28: 51, 48: 53},
            55: {1: 56},
            57: {69: 58},
            58: {31: 59},
            65: {9: 138},
            66: {50: 135, 67: 136},
            67: {30: 100, 66: 101},
            71: {11: 75, 20: 99, 29: 73, 45: 74},
            73: {7: 95, 52: 96},
            74: {16: 94, 19: 93, 54: 92},
            76: {5: 71, 11: 75, 20: 72, 26: 79, 29: 73, 45: 74, 59: 85},
            77: {5: 71, 11: 75, 20: 72, 26: 79, 29: 73, 45: 74, 59: 78},
            79: {36: 80},
            80: {13: 82},
            81: {5: 71, 11: 75, 20: 72, 26: 83, 29: 73, 45: 74},
            86: {19: 89, 42: 87, 56: 88},
            102: {8: 104, 21: 103},
            103: {27: 106},
            106: {39: 133, 43: 132, 64: 134},
            108: {0: 113, 44: 112, 61: 110, 68: 114, 70: 109, 71: 111},
            112: {55: 125},
            113: {37: 116},
            116: {32: 121, 34: 120, 41: 123, 53: 119},
            120: {27: 124},
            125: {14: 127},
            126: {0: 113, 44: 128, 68: 114},
            138: {62: 139},
            140: {2: 141, 5: 71, 11: 75, 20: 72, 26: 69, 29: 73, 40: 67, 45: 74}
        }
        self.__sentence_index_grammar_tuple_mapping: Dict[int, Tuple[str, ...]] = {
            64: ('1', '*2'),
            105: ('1',),
            39: (),
            77: ('*0',),
            63: ('*0', '*1'),
            19: ('0',),
            69: ('0',),
            20: ('0', '2'),
            7: ('0', '*1'),
            100: ('1',),
            41: (),
            11: ('*0',),
            5: (),
            79: ('*0', '*1'),
            98: ('1',),
            3: ('0', '*1'),
            74: ('1',),
            21: (),
            2: ('*0', '*1'),
            111: ('1',),
            28: ('1', '*3'),
            27: (),
            56: ('*0',),
            91: ('0', '*1'),
            65: ('0',),
            34: (),
            68: ('*0',),
            78: ('0', '*1'),
            36: (),
            88: ('*0',),
            35: ('0', '*1'),
            85: ('1',),
            61: (),
            66: ('*0',),
            81: ('*0', '*1', '*2'),
            43: ('*0', '1'),
            42: (),
            107: ('*0',),
            106: (),
            93: ('*0',),
            17: (),
            112: ('*0',),
            84: ('0', '*1'),
            26: ('1',),
            18: (),
            38: ('*0', '*1'),
            33: ('1',),
            86: ('*1',),
            45: ('*0',),
            80: (),
            58: ('*0',),
            25: ('*0',),
            30: ('*0', '1'),
            70: ('0', '*1'),
            109: ('1', '2', '3'),
            96: (),
            46: ('*0',),
            76: (),
            44: ('*0',),
            82: (),
            49: ('*0',),
            12: ('0', '*1'),
            55: ('1',),
            54: (),
            71: ('*0', '*1'),
            99: ('0', '2'),
            23: ('0', '*1'),
            73: ('1',),
            50: (),
            10: ('*0', '*1'),
            94: ('0', '2', '*3', '4'),
            90: ('*2',),
            37: (),
            4: ('*0',),
            24: (),
            51: ('*0',),
            104: ('0', '*1'),
            95: ('*0', '1'),
            32: ('*0', '1'),
            22: ('*0',)
        }
        self.__reduce_symbol_count: List[int] = [1, 1, 2, 2, 1, 0, 1, 3, 1, 1, 2, 1, 2, 1, 1, 1, 1, 0, 0, 1, 3, 0, 1, 2, 0, 1, 2, 0, 4, 1, 2, 1, 2, 3, 0, 2, 0, 0, 2, 0, 1, 0, 0, 2, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 2, 1, 1, 1, 1, 1, 0, 1, 2, 5, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 0, 1, 2, 2, 0, 3, 0, 1, 2, 2, 3, 1, 1, 1, 4, 2, 1, 1, 6, 2, 0, 1, 3, 4, 2, 1, 1, 1, 3, 2, 0, 1, 1, 4, 1, 3, 1]
        self.__reduce_non_terminal_index: List[int] = [60, 67, 36, 59, 48, 33, 35, 38, 3, 19, 69, 47, 18, 56, 37, 3, 6, 0, 55, 35, 25, 36, 12, 1, 15, 26, 14, 42, 11, 3, 5, 49, 6, 27, 50, 20, 16, 48, 55, 51, 57, 47, 41, 53, 43, 61, 66, 32, 39, 21, 69, 15, 5, 40, 9, 62, 42, 46, 70, 22, 54, 7, 19, 12, 4, 45, 7, 23, 50, 35, 2, 9, 35, 31, 13, 49, 43, 51, 29, 33, 70, 44, 21, 29, 71, 52, 27, 58, 16, 8, 28, 45, 49, 34, 63, 23, 66, 45, 64, 17, 24, 68, 40, 35, 10, 65, 34, 41, 37, 30, 40, 11, 0]

    def parse(self, token_list: List[BosonToken]) -> BosonGrammar:
        grammar: BosonGrammar = BosonGrammar()
        analysis_stack: List[int] = [0]
        symbol_stack: List[BosonGrammarNode] = []
        token_index: int = 0
        while token_index < len(token_list):
            token: BosonToken = token_list[token_index]
            current_state: int = analysis_stack[-1]
            if token.symbol in self.__terminal_index_mapping:
                operation: str = self.__sparse_action_table.get(current_state, {}).get(self.__terminal_index_mapping[token.symbol], 'e')
            else:
                operation: str = 'e'
            operation_flag: str = operation[0]
            if operation_flag == 'e':
                grammar.error_index = token_index
                return grammar
            elif operation_flag == 's':
                analysis_stack.append(int(operation[1:]))
                token_index += 1
                grammar_node: BosonGrammarNode = BosonGrammarNode(token.text)
                symbol_stack.append(grammar_node)
            elif operation_flag == 'r':
                statement_index: int = int(operation[1:])
                reduce_count: int = self.__reduce_symbol_count[statement_index]
                for _ in range(reduce_count):
                    analysis_stack.pop()
                current_state: int = analysis_stack[-1]
                current_non_terminal_index: int = self.__reduce_non_terminal_index[statement_index]
                goto_next_state: int = self.__sparse_goto_table.get(current_state, {}).get(current_non_terminal_index, -1)
                if goto_next_state == -1:
                    raise ValueError(f'Invalid goto action: state={current_state}, non-terminal={current_non_terminal_index}')
                analysis_stack.append(goto_next_state)
                if statement_index in self.__sentence_index_grammar_tuple_mapping:
                    symbol_package: List[BosonGrammarNode] = []
                    for _ in range(reduce_count):
                        symbol_package.insert(0, symbol_stack.pop())
                    grammar_node: BosonGrammarNode = BosonGrammarNode()
                    for node_string in self.__sentence_index_grammar_tuple_mapping[statement_index]:
                        if node_string[0] == '*':
                            for node in symbol_package[int(node_string[1:])]:
                                grammar_node.append(node)
                        else:
                            grammar_node.append(symbol_package[int(node_string)])
                    grammar_node.set_reduce_number(statement_index)
                    symbol_stack.append(grammar_node)
                elif statement_index in {0, 1, 6, 8, 9, 13, 14, 15, 16, 29, 31, 40, 47, 48, 52, 53, 57, 59, 60, 62, 67, 72, 75, 83, 87, 89, 92, 97, 101, 102, 103, 108, 110}:
                    grammar_node: BosonGrammarNode = BosonGrammarNode()
                    for _ in range(reduce_count):
                        grammar_node.insert(0, symbol_stack.pop())
                    grammar_node.set_reduce_number(statement_index)
                    symbol_stack.append(grammar_node)
                else:
                    raise ValueError(f'Invalid reduce number: reduce={statement_index}')
            elif operation_flag == 'a':
                grammar.grammar_tree = symbol_stack[0]
                return grammar
            else:
                raise ValueError(f'Invalid action: action={operation}')
        raise RuntimeError('Analyzer unusual exit.')
