from typing import Dict, List, Tuple

from .token import BosonToken
from .grammar_node import BosonGrammarNode
from .grammar import BosonGrammar


class BosonParser:
    def __init__(self):
        self.__terminal_index_mapping: Dict[str, int] = {
            '!symbol_7': 0,
            '!symbol_6': 1,
            '!symbol_10': 2,
            '!symbol_11': 3,
            'number': 4,
            '!symbol_1': 5,
            '!symbol_9': 6,
            '!symbol_14': 7,
            'regular': 8,
            '$': 9,
            '!symbol_17': 10,
            'string': 11,
            '!symbol_18': 12,
            '!symbol_12': 13,
            '!symbol_15': 14,
            '!symbol_13': 15,
            'name': 16,
            '!symbol_5': 17,
            '!symbol_2': 18,
            '!symbol_4': 19,
            '!symbol_16': 20,
            '!symbol_3': 21,
            '!symbol_8': 22,
            '!symbol_19': 23
        }
        self.__sparse_action_table: Dict[int, Dict[int, str]] = {
            0: {5: 's1', 16: 's8'},
            1: {1: 's90', 11: 's140', 16: 's141'},
            2: {9: 'a'},
            3: {5: 's1', 9: 'r8', 16: 's8'},
            4: {5: 'r41', 9: 'r41', 16: 'r41'},
            5: {5: 'r53', 9: 'r53', 16: 'r53'},
            6: {5: 'r73', 9: 'r73', 16: 'r73'},
            7: {5: 'r81', 9: 'r81', 16: 'r81'},
            8: {6: 's9', 21: 's10'},
            9: {2: 'r16', 3: 's33', 7: 's27', 8: 's41', 11: 's39', 13: 's28', 16: 's40', 18: 'r16', 21: 'r16'},
            10: {8: 's11'},
            11: {17: 'r70', 18: 'r70', 19: 's13'},
            12: {17: 'r112', 18: 'r112'},
            13: {17: 'r46', 18: 'r46'},
            14: {17: 's16', 18: 'r64'},
            15: {18: 'r4'},
            16: {1: 's19'},
            17: {18: 's18'},
            18: {5: 'r63', 9: 'r63', 16: 'r63'},
            19: {16: 's20'},
            20: {0: 'r50', 22: 'r50'},
            21: {0: 's22'},
            22: {18: 'r93'},
            23: {0: 'r82', 22: 's24'},
            24: {16: 's26'},
            25: {0: 'r17', 22: 'r17'},
            26: {0: 'r71', 22: 'r71'},
            27: {7: 's27', 8: 's41', 11: 's39', 13: 's28', 16: 's40'},
            28: {7: 's27', 8: 's41', 11: 's39', 13: 's28', 16: 's40'},
            29: {18: 's123'},
            30: {2: 'r61', 18: 'r61'},
            31: {2: 'r26', 18: 'r26', 21: 's57'},
            32: {2: 'r48', 18: 'r48', 21: 'r48'},
            33: {2: 'r90', 18: 'r90', 21: 'r90'},
            34: {2: 'r99', 7: 's27', 8: 's41', 11: 's39', 13: 's28', 14: 'r99', 15: 'r99', 16: 's40', 18: 'r99', 21: 'r99'},
            35: {2: 'r91', 7: 'r91', 8: 'r91', 11: 'r91', 13: 'r91', 14: 'r91', 15: 'r91', 16: 'r91', 18: 'r91', 21: 'r91'},
            36: {2: 'r30', 7: 'r30', 8: 'r30', 11: 'r30', 13: 'r30', 14: 'r30', 15: 'r30', 16: 'r30', 17: 's52', 18: 'r30', 21: 'r30'},
            37: {2: 'r84', 7: 'r84', 8: 'r84', 11: 'r84', 13: 'r84', 14: 'r84', 15: 'r84', 16: 'r84', 17: 'r84', 18: 'r84', 21: 'r84'},
            38: {2: 'r15', 7: 'r15', 8: 'r15', 11: 'r15', 13: 'r15', 14: 'r15', 15: 'r15', 16: 'r15', 17: 'r15', 18: 'r15', 20: 's47', 21: 'r15', 23: 's48'},
            39: {2: 'r7', 7: 'r7', 8: 'r7', 11: 'r7', 13: 'r7', 14: 'r7', 15: 'r7', 16: 'r7', 17: 'r7', 18: 'r7', 20: 'r7', 21: 'r7', 23: 'r7'},
            40: {2: 'r18', 7: 'r18', 8: 'r18', 11: 'r18', 13: 'r18', 14: 'r18', 15: 'r18', 16: 'r18', 17: 'r18', 18: 'r18', 20: 'r18', 21: 'r18', 23: 'r18'},
            41: {2: 'r89', 7: 'r89', 8: 'r89', 11: 'r89', 13: 'r89', 14: 'r89', 15: 'r89', 16: 'r89', 17: 'r89', 18: 'r89', 19: 's44', 20: 'r89', 21: 'r89', 23: 'r89'},
            42: {2: 'r56', 7: 'r56', 8: 'r56', 11: 'r56', 13: 'r56', 14: 'r56', 15: 'r56', 16: 'r56', 17: 'r56', 18: 'r56', 20: 'r56', 21: 'r56', 23: 'r56'},
            43: {2: 'r1', 7: 'r1', 8: 'r1', 11: 'r1', 13: 'r1', 14: 'r1', 15: 'r1', 16: 'r1', 17: 'r1', 18: 'r1', 20: 'r1', 21: 'r1', 23: 'r1'},
            44: {2: 'r39', 7: 'r39', 8: 'r39', 11: 'r39', 13: 'r39', 14: 'r39', 15: 'r39', 16: 'r39', 17: 'r39', 18: 'r39', 20: 'r39', 21: 'r39', 23: 'r39'},
            45: {2: 'r74', 7: 'r74', 8: 'r74', 11: 'r74', 13: 'r74', 14: 'r74', 15: 'r74', 16: 'r74', 17: 'r74', 18: 'r74', 21: 'r74'},
            46: {2: 'r103', 7: 'r103', 8: 'r103', 11: 'r103', 13: 'r103', 14: 'r103', 15: 'r103', 16: 'r103', 17: 'r103', 18: 'r103', 21: 'r103'},
            47: {2: 'r25', 7: 'r25', 8: 'r25', 11: 'r25', 13: 'r25', 14: 'r25', 15: 'r25', 16: 'r25', 17: 'r25', 18: 'r25', 21: 'r25'},
            48: {2: 'r49', 7: 'r49', 8: 'r49', 11: 'r49', 13: 'r49', 14: 'r49', 15: 'r49', 16: 'r49', 17: 'r49', 18: 'r49', 21: 'r49'},
            49: {2: 'r87', 7: 'r87', 8: 'r87', 11: 'r87', 13: 'r87', 14: 'r87', 15: 'r87', 16: 'r87', 17: 'r87', 18: 'r87', 21: 'r87'},
            50: {2: 'r35', 7: 'r35', 8: 'r35', 11: 'r35', 13: 'r35', 14: 'r35', 15: 'r35', 16: 'r35', 18: 'r35', 21: 'r35'},
            51: {2: 'r43', 7: 'r43', 8: 'r43', 11: 'r43', 13: 'r43', 14: 'r43', 15: 'r43', 16: 'r43', 18: 'r43', 21: 'r43'},
            52: {16: 's53'},
            53: {2: 'r77', 7: 'r77', 8: 'r77', 11: 'r77', 13: 'r77', 14: 'r77', 15: 'r77', 16: 'r77', 18: 'r77', 21: 'r77'},
            54: {2: 'r40', 7: 'r40', 8: 'r40', 11: 'r40', 13: 'r40', 14: 'r40', 15: 'r40', 16: 'r40', 18: 'r40', 21: 'r40'},
            55: {2: 'r5', 18: 'r5'},
            56: {2: 'r97', 18: 'r97'},
            57: {7: 'r28', 13: 'r28', 16: 's58'},
            58: {7: 'r55', 13: 'r55'},
            59: {7: 's62', 13: 's63'},
            60: {7: 'r69', 13: 'r69'},
            61: {1: 's90', 2: 'r109', 18: 'r109'},
            62: {4: 's85'},
            63: {10: 'r21', 12: 'r21', 15: 'r3', 20: 's70'},
            64: {15: 's84'},
            65: {15: 'r85'},
            66: {15: 'r33'},
            67: {15: 'r2', 22: 'r2'},
            68: {10: 's71', 12: 's72'},
            69: {10: 'r66', 12: 'r66'},
            70: {10: 'r57', 12: 'r57'},
            71: {7: 'r62', 13: 'r62', 15: 'r62', 20: 'r62', 22: 'r62'},
            72: {7: 'r94', 13: 'r94', 15: 'r94', 20: 'r94', 22: 'r94'},
            73: {7: 'r54', 13: 'r54', 15: 'r11', 20: 's77', 22: 'r11'},
            74: {15: 'r34', 22: 'r34'},
            75: {7: 's62', 13: 's63'},
            76: {7: 'r104', 13: 'r104'},
            77: {7: 'r51', 13: 'r51'},
            78: {15: 'r75', 22: 'r75'},
            79: {15: 'r80', 22: 'r80'},
            80: {15: 'r72', 22: 's82'},
            81: {15: 'r86', 22: 'r86'},
            82: {10: 'r21', 12: 'r21', 20: 's70'},
            83: {15: 'r100', 22: 'r100'},
            84: {1: 'r83', 2: 'r83', 15: 'r83', 18: 'r83', 22: 'r83'},
            85: {14: 's86'},
            86: {1: 'r29', 2: 'r29', 15: 'r29', 18: 'r29', 22: 'r29'},
            87: {2: 'r98', 18: 'r98'},
            88: {2: 'r45', 18: 'r45'},
            89: {2: 'r10', 18: 'r10'},
            90: {16: 's91'},
            91: {21: 's101'},
            92: {0: 's100'},
            93: {0: 'r52', 22: 'r52'},
            94: {0: 'r27', 22: 's95'},
            95: {0: 'r108', 16: 's91'},
            96: {0: 'r58'},
            97: {0: 'r88'},
            98: {0: 'r110', 22: 'r110'},
            99: {0: 'r19', 22: 'r19'},
            100: {0: 'r42', 1: 'r42', 2: 'r42', 11: 'r42', 14: 'r42', 16: 'r42', 18: 'r42', 22: 'r42'},
            101: {1: 's90', 4: 's108', 7: 's102', 11: 's106', 16: 's105'},
            102: {1: 's90', 4: 's108', 7: 's102', 11: 's106', 16: 's105'},
            103: {0: 'r96', 22: 'r96'},
            104: {0: 'r12', 14: 'r12', 22: 'r12'},
            105: {0: 'r47', 14: 'r47', 22: 'r47'},
            106: {0: 'r79', 14: 'r79', 22: 'r79'},
            107: {0: 'r101', 14: 'r101', 22: 'r101'},
            108: {0: 'r102', 14: 'r102', 22: 'r102'},
            109: {22: 's112'},
            110: {14: 'r44', 22: 's116'},
            111: {14: 'r78', 22: 'r78'},
            112: {1: 's90', 4: 's108', 7: 's102', 11: 's106', 16: 's105'},
            113: {14: 'r6', 22: 'r6'},
            114: {14: 's118'},
            115: {14: 'r105', 22: 'r105'},
            116: {1: 's90', 4: 's108', 7: 's102', 11: 's106', 14: 'r60', 16: 's105'},
            117: {14: 'r111'},
            118: {0: 'r36', 14: 'r36', 22: 'r36'},
            119: {2: 's121', 18: 'r13'},
            120: {2: 'r65', 18: 'r65'},
            121: {2: 'r16', 3: 's33', 7: 's27', 8: 's41', 11: 's39', 13: 's28', 16: 's40', 18: 'r16', 21: 'r16'},
            122: {2: 'r107', 18: 'r107'},
            123: {5: 'r59', 9: 'r59', 16: 'r59'},
            124: {15: 's130'},
            125: {2: 'r24', 14: 'r24', 15: 'r24'},
            126: {2: 's127', 14: 'r37', 15: 'r37'},
            127: {7: 's27', 8: 's41', 11: 's39', 13: 's28', 16: 's40'},
            128: {2: 'r32', 14: 'r32', 15: 'r32'},
            129: {2: 'r23', 14: 'r23', 15: 'r23'},
            130: {2: 'r20', 7: 'r20', 8: 'r20', 11: 'r20', 13: 'r20', 14: 'r20', 15: 'r20', 16: 'r20', 17: 'r20', 18: 'r20', 20: 's47', 21: 'r20', 23: 's48'},
            131: {2: 'r68', 7: 'r68', 8: 'r68', 11: 'r68', 13: 'r68', 14: 'r68', 15: 'r68', 16: 'r68', 17: 'r68', 18: 'r68', 21: 'r68'},
            132: {2: 'r22', 7: 'r22', 8: 'r22', 11: 'r22', 13: 'r22', 14: 'r22', 15: 'r22', 16: 'r22', 17: 'r22', 18: 'r22', 21: 'r22'},
            133: {2: 'r106', 7: 'r106', 8: 'r106', 11: 'r106', 13: 'r106', 14: 'r106', 15: 'r106', 16: 'r106', 17: 'r106', 18: 'r106', 21: 'r106'},
            134: {14: 's135'},
            135: {2: 'r92', 7: 'r92', 8: 'r92', 11: 'r92', 13: 'r92', 14: 'r92', 15: 'r92', 16: 'r92', 17: 'r92', 18: 'r92', 21: 'r92'},
            136: {5: 'r9', 9: 'r9', 16: 'r9'},
            137: {1: 's90', 11: 's140', 16: 's141', 18: 's142'},
            138: {1: 'r14', 11: 'r14', 16: 'r14', 18: 'r14'},
            139: {1: 'r38', 11: 'r38', 16: 'r38', 18: 'r38'},
            140: {1: 'r76', 11: 'r76', 16: 'r76', 18: 'r76'},
            141: {1: 'r95', 11: 'r95', 16: 'r95', 18: 'r95'},
            142: {5: 'r31', 9: 'r31', 16: 'r31'},
            143: {1: 'r67', 11: 'r67', 16: 'r67', 18: 'r67'}
        }
        self.__sparse_goto_table: Dict[int, Dict[int, int]] = {
            0: {0: 4, 26: 3, 35: 5, 50: 7, 58: 2, 64: 6},
            1: {14: 139, 29: 138, 51: 137},
            3: {0: 136, 35: 5, 50: 7, 64: 6},
            9: {5: 34, 6: 38, 18: 32, 20: 29, 27: 30, 32: 35, 33: 36, 47: 37, 53: 31},
            11: {44: 14, 55: 12},
            14: {3: 15, 28: 17},
            19: {66: 21},
            20: {61: 23},
            23: {71: 25},
            27: {5: 34, 6: 38, 8: 134, 18: 125, 32: 35, 33: 36, 47: 37},
            28: {5: 34, 6: 38, 8: 124, 18: 125, 32: 35, 33: 36, 47: 37},
            30: {30: 119},
            31: {37: 55, 46: 56},
            34: {6: 38, 32: 54, 33: 36, 47: 37},
            36: {15: 51, 19: 50},
            38: {23: 46, 31: 49, 43: 45},
            41: {17: 43, 49: 42},
            57: {60: 59, 69: 60},
            59: {56: 61},
            61: {4: 87, 14: 89, 54: 88},
            63: {12: 68, 13: 65, 36: 69, 40: 66, 42: 64, 65: 67},
            67: {48: 80},
            68: {22: 73},
            73: {1: 76, 7: 74, 57: 78, 63: 75},
            75: {56: 79},
            80: {11: 81},
            82: {12: 68, 36: 69, 65: 83},
            90: {9: 93, 10: 92},
            93: {52: 94},
            94: {16: 96, 34: 97, 62: 98},
            95: {9: 99},
            101: {14: 107, 24: 104, 45: 103},
            102: {14: 107, 24: 104, 45: 109},
            109: {38: 111, 41: 110},
            110: {38: 115, 67: 117, 70: 114},
            112: {14: 107, 24: 104, 45: 113},
            116: {14: 107, 24: 104, 45: 113},
            119: {21: 120},
            121: {5: 34, 6: 38, 18: 32, 27: 122, 32: 35, 33: 36, 47: 37, 53: 31},
            125: {59: 126},
            126: {68: 128},
            127: {5: 34, 6: 38, 18: 129, 32: 35, 33: 36, 47: 37},
            130: {2: 131, 23: 132, 39: 133},
            137: {14: 139, 29: 143}
        }
        self.__sentence_index_grammar_tuple_mapping: Dict[int, Tuple[str, ...]] = {
            36: ('1', '*2'),
            6: ('1',),
            44: (),
            111: ('*0',),
            105: ('*0', '*1'),
            102: ('0',),
            79: ('0',),
            96: ('0', '2'),
            88: ('0', '*1'),
            19: ('1',),
            27: (),
            58: ('*0',),
            52: (),
            110: ('*0', '*1'),
            42: ('1',),
            37: ('0', '*1'),
            23: ('1',),
            24: (),
            32: ('*0', '*1'),
            92: ('1',),
            106: ('1', '*3'),
            20: (),
            68: ('*0',),
            56: ('0', '*1'),
            7: ('0',),
            89: (),
            1: ('*0',),
            87: ('0', '*1'),
            15: (),
            74: ('*0',),
            35: ('0', '*1'),
            77: ('1',),
            30: (),
            43: ('*0',),
            75: ('*0', '*1', '*2'),
            80: ('*0', '1'),
            11: (),
            34: ('*0',),
            54: (),
            104: ('*0',),
            21: (),
            66: ('*0',),
            72: ('0', '*1'),
            100: ('1',),
            2: (),
            86: ('*0', '*1'),
            29: ('1',),
            83: ('*1',),
            33: ('*0',),
            3: (),
            85: ('*0',),
            99: ('*0',),
            40: ('*0', '1'),
            97: ('0', '*1'),
            98: ('1', '2', '3'),
            26: (),
            5: ('*0',),
            109: (),
            45: ('*0',),
            28: (),
            69: ('*0',),
            13: ('0', '*1'),
            107: ('1',),
            61: (),
            65: ('*0', '*1'),
            59: ('0', '2'),
            82: ('0', '*1'),
            71: ('1',),
            50: (),
            17: ('*0', '*1'),
            63: ('0', '2', '*3', '4'),
            93: ('*2',),
            64: (),
            4: ('*0',),
            70: (),
            112: ('*0',),
            31: ('0', '*1'),
            67: ('*0', '1'),
            9: ('*0', '1'),
            78: ('*0',)
        }
        self.__reduce_symbol_count: List[int] = [1, 1, 0, 0, 1, 1, 2, 1, 1, 2, 1, 0, 1, 2, 1, 0, 0, 2, 1, 2, 0, 0, 1, 2, 0, 1, 0, 0, 0, 3, 0, 3, 2, 1, 1, 2, 5, 2, 1, 1, 2, 1, 3, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 2, 1, 1, 4, 1, 0, 1, 6, 0, 2, 1, 2, 1, 1, 0, 2, 2, 1, 1, 3, 1, 2, 1, 1, 2, 1, 2, 3, 1, 1, 2, 2, 3, 0, 1, 1, 3, 4, 1, 1, 3, 2, 4, 1, 2, 1, 1, 1, 1, 2, 4, 2, 1, 0, 2, 1, 1]
        self.__reduce_non_terminal_index: List[int] = [25, 49, 48, 42, 28, 46, 38, 6, 58, 26, 54, 57, 45, 20, 51, 31, 53, 61, 6, 62, 39, 12, 2, 68, 59, 23, 46, 34, 60, 56, 19, 35, 59, 13, 57, 32, 24, 8, 29, 17, 5, 26, 14, 19, 70, 4, 55, 45, 53, 23, 61, 1, 52, 0, 63, 69, 6, 36, 34, 50, 67, 30, 22, 64, 28, 30, 12, 51, 39, 60, 44, 71, 40, 0, 31, 65, 29, 15, 41, 45, 7, 0, 66, 56, 33, 42, 48, 33, 10, 49, 53, 5, 47, 3, 22, 29, 9, 27, 37, 18, 11, 45, 45, 43, 63, 41, 47, 21, 16, 4, 52, 70, 44]

    def parse(self, token_list: List[BosonToken]) -> BosonGrammar:
        grammar: BosonGrammar = BosonGrammar()
        analysis_stack: List[int] = [0]
        symbol_stack: List[BosonGrammarNode] = []
        token_index: int = 0
        while token_index < len(token_list):
            token: BosonToken = token_list[token_index]
            current_state: int = analysis_stack[-1]
            if token.symbol in self.__terminal_index_mapping:
                operation: str = self.__sparse_action_table.get(current_state, {}).get(self.__terminal_index_mapping[token.symbol], 'e')
            else:
                operation: str = 'e'
            operation_flag: str = operation[0]
            if operation_flag == 'e':
                grammar.error_index = token_index
                return grammar
            elif operation_flag == 's':
                analysis_stack.append(int(operation[1:]))
                token_index += 1
                grammar_node: BosonGrammarNode = BosonGrammarNode(token.text)
                symbol_stack.append(grammar_node)
            elif operation_flag == 'r':
                statement_index: int = int(operation[1:])
                reduce_count: int = self.__reduce_symbol_count[statement_index]
                for _ in range(reduce_count):
                    analysis_stack.pop()
                current_state: int = analysis_stack[-1]
                current_non_terminal_index: int = self.__reduce_non_terminal_index[statement_index]
                goto_next_state: int = self.__sparse_goto_table.get(current_state, {}).get(current_non_terminal_index, -1)
                if goto_next_state == -1:
                    raise ValueError('Invalid goto action: state={}, non-terminal={}'.format(current_state, current_non_terminal_index))
                analysis_stack.append(goto_next_state)
                if statement_index in self.__sentence_index_grammar_tuple_mapping:
                    symbol_package: List[BosonGrammarNode] = []
                    for _ in range(reduce_count):
                        symbol_package.insert(0, symbol_stack.pop())
                    grammar_node: BosonGrammarNode = BosonGrammarNode()
                    for node_string in self.__sentence_index_grammar_tuple_mapping[statement_index]:
                        if node_string[0] == '*':
                            for node in symbol_package[int(node_string[1:])]:
                                grammar_node.append(node)
                        else:
                            grammar_node.append(symbol_package[int(node_string)])
                    grammar_node.set_reduce_number(statement_index)
                    symbol_stack.append(grammar_node)
                elif statement_index in {0, 8, 10, 12, 14, 16, 18, 22, 25, 38, 39, 41, 46, 47, 48, 49, 51, 53, 55, 57, 60, 62, 73, 76, 81, 84, 90, 91, 94, 95, 101, 103, 108}:
                    grammar_node: BosonGrammarNode = BosonGrammarNode()
                    for _ in range(reduce_count):
                        grammar_node.insert(0, symbol_stack.pop())
                    grammar_node.set_reduce_number(statement_index)
                    symbol_stack.append(grammar_node)
                else:
                    raise ValueError('Invalid reduce number: reduce={}'.format(statement_index))
            elif operation_flag == 'a':
                grammar.grammar_tree = symbol_stack[0]
                return grammar
            else:
                raise ValueError('Invalid action: action={}'.format(operation))
        raise RuntimeError('Analyzer unusual exit.')
