from typing import Dict, List, Tuple

from .token import BosonToken
from .grammar_node import BosonGrammarNode
from .grammar import BosonGrammar


class BosonParser:
    def __init__(self):
        self.__terminal_index_mapping: Dict[str, int] = {
            'node': 0,
            '!symbol_1': 1,
            '$': 2,
            '!symbol_7': 3,
            '!symbol_8': 4,
            '!symbol_4': 5,
            'name': 6,
            'command': 7,
            'string': 8,
            '!symbol_11': 9,
            '!symbol_13': 10,
            'regular': 11,
            '!symbol_15': 12,
            '!symbol_9': 13,
            '!symbol_2': 14,
            'number': 15,
            '!symbol_14': 16,
            '!symbol_10': 17,
            '!symbol_6': 18,
            '!symbol_5': 19,
            '!symbol_16': 20,
            '!symbol_3': 21,
            '!symbol_12': 22
        }
        self.__sparse_action_table: Dict[int, Dict[int, str]] = {
            0: {6: 's4', 7: 's8'},
            1: {2: 'a'},
            2: {2: 'r18', 6: 's4', 7: 's8'},
            3: {2: 'r9', 6: 'r9', 7: 'r9'},
            4: {4: 's45', 14: 's46'},
            5: {2: 'r63', 6: 'r63', 7: 'r63'},
            6: {2: 'r82', 6: 'r82', 7: 'r82'},
            7: {2: 'r86', 6: 'r86', 7: 'r86'},
            8: {6: 's11', 8: 's12', 19: 's13'},
            9: {1: 'r51', 6: 'r51', 8: 'r51', 19: 'r51'},
            10: {1: 'r11', 6: 'r11', 8: 'r11', 19: 'r11'},
            11: {1: 'r30', 6: 'r30', 8: 'r30', 19: 'r30'},
            12: {1: 'r50', 6: 'r50', 8: 'r50', 19: 'r50'},
            13: {6: 's18'},
            14: {1: 's17', 6: 's11', 8: 's12', 19: 's13'},
            15: {1: 'r55', 6: 'r55', 8: 'r55', 19: 'r55'},
            16: {1: 'r7', 6: 'r7', 8: 'r7', 19: 'r7'},
            17: {2: 'r2', 6: 'r2', 7: 'r2'},
            18: {14: 's28'},
            19: {18: 's27'},
            20: {3: 'r48', 18: 'r48'},
            21: {3: 's23', 18: 'r12'},
            22: {16: 'r88', 18: 'r88'},
            23: {6: 's18', 18: 'r27'},
            24: {18: 'r65'},
            25: {3: 'r79', 18: 'r79'},
            26: {3: 'r42', 18: 'r42'},
            27: {1: 'r21', 3: 'r21', 6: 'r21', 8: 'r21', 13: 'r21', 16: 'r21', 18: 'r21', 19: 'r21'},
            28: {6: 's31', 8: 's33', 10: 's35', 15: 's34', 19: 's13'},
            29: {3: 'r46', 18: 'r46'},
            30: {3: 'r6', 16: 'r6', 18: 'r6'},
            31: {3: 'r25', 16: 'r25', 18: 'r25'},
            32: {3: 'r26', 16: 'r26', 18: 'r26'},
            33: {3: 'r47', 16: 'r47', 18: 'r47'},
            34: {3: 'r84', 16: 'r84', 18: 'r84'},
            35: {6: 's31', 8: 's33', 10: 's35', 15: 's34', 19: 's13'},
            36: {3: 's39'},
            37: {3: 's42', 16: 'r12'},
            38: {3: 'r75', 16: 'r75'},
            39: {6: 's31', 8: 's33', 10: 's35', 15: 's34', 19: 's13'},
            40: {3: 'r91', 16: 'r91'},
            41: {16: 's44'},
            42: {6: 's31', 8: 's33', 10: 's35', 15: 's34', 16: 'r27', 19: 's13'},
            43: {3: 'r5', 16: 'r5'},
            44: {3: 'r22', 16: 'r22', 18: 'r22'},
            45: {1: 'r76', 6: 's65', 8: 's67', 9: 's75', 10: 's74', 13: 'r76', 14: 'r76', 17: 's69'},
            46: {11: 's47'},
            47: {1: 'r94', 5: 'r94', 21: 's50'},
            48: {1: 'r77', 5: 's51'},
            49: {1: 'r19', 5: 'r19'},
            50: {1: 'r92', 5: 'r92'},
            51: {19: 's55'},
            52: {1: 's54'},
            53: {1: 'r72'},
            54: {2: 'r58', 6: 'r58', 7: 'r58'},
            55: {6: 's56'},
            56: {3: 'r95', 18: 'r95'},
            57: {18: 's58'},
            58: {1: 'r64'},
            59: {3: 's60', 18: 'r36'},
            60: {6: 's62'},
            61: {3: 'r8', 18: 'r8'},
            62: {3: 'r68', 18: 'r68'},
            63: {1: 's128'},
            64: {1: 'r16', 13: 'r16'},
            65: {1: 'r20', 6: 'r20', 8: 'r20', 9: 'r20', 10: 'r20', 12: 'r20', 13: 'r20', 14: 'r20', 16: 'r20', 20: 'r20', 22: 'r20'},
            66: {1: 'r56', 13: 'r56', 14: 's95'},
            67: {1: 'r40', 6: 'r40', 8: 'r40', 9: 'r40', 10: 'r40', 12: 'r40', 13: 'r40', 14: 'r40', 16: 'r40', 20: 'r40', 22: 'r40'},
            68: {1: 'r53', 13: 'r53', 14: 'r53'},
            69: {1: 'r90', 13: 'r90', 14: 'r90'},
            70: {1: 'r87', 6: 's65', 8: 's67', 9: 's75', 10: 's74', 13: 'r87', 14: 'r87', 16: 'r87', 22: 'r87'},
            71: {1: 'r41', 6: 'r41', 8: 'r41', 9: 'r41', 10: 'r41', 13: 'r41', 14: 'r41', 16: 'r41', 22: 'r41'},
            72: {1: 'r33', 6: 'r33', 8: 'r33', 9: 'r33', 10: 'r33', 12: 's85', 13: 'r33', 14: 'r33', 16: 'r33', 20: 's86', 22: 'r33'},
            73: {1: 'r54', 6: 'r54', 8: 'r54', 9: 'r54', 10: 'r54', 13: 'r54', 14: 'r54', 16: 'r54', 22: 'r54'},
            74: {6: 's65', 8: 's67', 9: 's75', 10: 's74'},
            75: {6: 's65', 8: 's67', 9: 's75', 10: 's74'},
            76: {22: 's83'},
            77: {13: 's80', 16: 'r49', 22: 'r49'},
            78: {13: 'r10', 16: 'r10', 22: 'r10'},
            79: {13: 's80', 16: 'r34', 22: 'r34'},
            80: {6: 's65', 8: 's67', 9: 's75', 10: 's74'},
            81: {13: 'r59', 16: 'r59', 22: 'r59'},
            82: {13: 'r70', 16: 'r70', 22: 'r70'},
            83: {1: 'r33', 6: 'r33', 8: 'r33', 9: 'r33', 10: 'r33', 12: 's85', 13: 'r33', 14: 'r33', 16: 'r33', 20: 's86', 22: 'r33'},
            84: {1: 'r52', 6: 'r52', 8: 'r52', 9: 'r52', 10: 'r52', 13: 'r52', 14: 'r52', 16: 'r52', 22: 'r52'},
            85: {1: 'r66', 6: 'r66', 8: 'r66', 9: 'r66', 10: 'r66', 13: 'r66', 14: 'r66', 16: 'r66', 22: 'r66'},
            86: {1: 'r71', 6: 'r71', 8: 'r71', 9: 'r71', 10: 'r71', 13: 'r71', 14: 'r71', 16: 'r71', 22: 'r71'},
            87: {1: 'r57', 6: 'r57', 8: 'r57', 9: 'r57', 10: 'r57', 13: 'r57', 14: 'r57', 16: 'r57', 22: 'r57'},
            88: {1: 'r67', 6: 'r67', 8: 'r67', 9: 'r67', 10: 'r67', 13: 'r67', 14: 'r67', 16: 'r67', 22: 'r67'},
            89: {16: 's90'},
            90: {1: 'r29', 6: 'r29', 8: 'r29', 9: 'r29', 10: 'r29', 13: 'r29', 14: 'r29', 16: 'r29', 22: 'r29'},
            91: {1: 'r43', 6: 'r43', 8: 'r43', 9: 'r43', 10: 'r43', 13: 'r43', 14: 'r43', 16: 'r43', 22: 'r43'},
            92: {1: 'r45', 6: 'r45', 8: 'r45', 9: 'r45', 10: 'r45', 13: 'r45', 14: 'r45', 16: 'r45', 22: 'r45'},
            93: {1: 'r4', 13: 'r4'},
            94: {1: 'r31', 13: 'r31'},
            95: {6: 's96', 9: 'r14', 10: 'r14'},
            96: {9: 'r39', 10: 'r39'},
            97: {9: 's100', 10: 's101'},
            98: {9: 'r35', 10: 'r35'},
            99: {1: 'r28', 13: 'r28', 19: 's13'},
            100: {0: 'r74', 12: 's110', 22: 'r1'},
            101: {15: 's102'},
            102: {16: 's103'},
            103: {1: 'r73', 3: 'r73', 13: 'r73', 19: 'r73', 22: 'r73'},
            104: {22: 's120'},
            105: {22: 'r37'},
            106: {22: 'r44'},
            107: {3: 'r83', 22: 'r83'},
            108: {0: 's111'},
            109: {0: 'r85', 9: 'r85', 10: 'r85'},
            110: {0: 'r17', 9: 'r17', 10: 'r17'},
            111: {3: 'r60', 9: 'r74', 10: 'r74', 12: 's110', 22: 'r60'},
            112: {3: 'r61', 22: 'r61'},
            113: {3: 'r80', 22: 'r80'},
            114: {9: 's100', 10: 's101'},
            115: {3: 'r78', 22: 'r78'},
            116: {3: 's117', 22: 'r3'},
            117: {0: 'r74', 12: 's110'},
            118: {3: 'r13', 22: 'r13'},
            119: {3: 'r89', 22: 'r89'},
            120: {1: 'r62', 3: 'r62', 13: 'r62', 19: 'r62', 22: 'r62'},
            121: {1: 'r32', 13: 'r32'},
            122: {1: 'r38', 13: 'r38'},
            123: {1: 'r69', 13: 'r69'},
            124: {1: 'r93', 13: 's126'},
            125: {1: 'r81', 13: 'r81'},
            126: {1: 'r76', 6: 's65', 8: 's67', 9: 's75', 10: 's74', 13: 'r76', 14: 'r76', 17: 's69'},
            127: {1: 'r23', 13: 'r23'},
            128: {2: 'r24', 6: 'r24', 7: 'r24'},
            129: {2: 'r15', 6: 'r15', 7: 'r15'}
        }
        self.__sparse_goto_table: Dict[int, Dict[int, int]] = {
            0: {17: 3, 30: 2, 47: 6, 48: 1, 50: 5, 55: 7},
            2: {17: 129, 47: 6, 50: 5, 55: 7},
            8: {42: 9, 46: 14, 52: 10, 60: 15},
            13: {26: 19, 35: 20},
            14: {42: 9, 52: 10, 60: 16},
            20: {38: 21},
            21: {32: 25, 34: 22, 58: 24},
            23: {35: 26},
            28: {2: 29, 52: 30, 59: 32},
            35: {2: 36, 52: 30, 59: 32},
            36: {0: 38, 40: 37},
            37: {0: 43, 34: 22, 58: 41},
            39: {2: 40, 52: 30, 59: 32},
            42: {2: 40, 52: 30, 59: 32},
            45: {8: 70, 9: 68, 16: 72, 21: 73, 25: 64, 29: 71, 41: 63, 54: 66},
            47: {6: 48, 53: 49},
            48: {3: 53, 43: 52},
            55: {57: 57},
            56: {10: 59},
            59: {28: 61},
            64: {27: 124},
            66: {12: 93, 31: 94},
            70: {16: 72, 21: 73, 29: 92},
            72: {5: 84, 15: 91, 24: 88},
            74: {8: 70, 9: 77, 14: 89, 16: 72, 21: 73, 29: 71},
            75: {8: 70, 9: 77, 14: 76, 16: 72, 21: 73, 29: 71},
            77: {36: 78, 51: 79},
            79: {36: 82},
            80: {8: 70, 9: 81, 16: 72, 21: 73, 29: 71},
            83: {5: 84, 15: 87, 24: 88},
            95: {19: 97, 56: 98},
            97: {4: 99},
            99: {23: 121, 39: 122, 52: 123},
            100: {1: 105, 18: 107, 20: 109, 22: 108, 37: 106, 44: 104},
            107: {11: 116},
            111: {20: 109, 22: 114, 33: 112, 45: 113},
            114: {4: 115},
            116: {13: 118},
            117: {18: 119, 20: 109, 22: 108},
            124: {49: 125},
            126: {8: 70, 9: 68, 16: 72, 21: 73, 25: 127, 29: 71, 54: 66}
        }
        self.__sentence_index_grammar_tuple_mapping: Dict[int, Tuple[str, ...]] = {
            22: ('1', '*2'),
            91: ('1',),
            5: ('*0', '*1'),
            84: ('0',),
            47: ('0',),
            46: ('0', '2'),
            65: ('0', '*1'),
            42: ('1',),
            12: (),
            88: ('*0',),
            48: (),
            79: ('*0', '*1'),
            21: ('1',),
            34: ('0', '*1'),
            59: ('1',),
            70: ('*0', '*1'),
            29: ('1',),
            57: ('1', '*3'),
            40: ('0',),
            43: ('0', '*1'),
            33: (),
            67: ('*0',),
            61: ('*0', '1', '*2'),
            78: ('*0', '1'),
            60: (),
            80: ('*0',),
            74: (),
            85: ('*0',),
            3: ('0', '*1'),
            89: ('1',),
            83: (),
            13: ('*0', '*1'),
            73: ('1',),
            62: ('*1',),
            44: ('*0',),
            1: (),
            37: ('*0',),
            87: ('*0',),
            45: ('*0', '1'),
            4: ('0', '*1'),
            32: ('1', '2', '3'),
            56: (),
            31: ('*0',),
            28: (),
            38: ('*0',),
            14: (),
            35: ('*0',),
            93: ('0', '*1'),
            23: ('1',),
            16: (),
            81: ('*0', '*1'),
            24: ('0', '2'),
            36: ('0', '*1'),
            68: ('1',),
            95: (),
            8: ('*0', '*1'),
            58: ('0', '2', '*3', '4'),
            64: ('*2',),
            77: (),
            72: ('*0',),
            94: (),
            19: ('*0',),
            2: ('0', '*1'),
            7: ('*0', '1'),
            15: ('*0', '1'),
            75: ('*0',),
            10: ('*0',)
        }
        self.__reduce_symbol_count: List[int] = [1, 0, 3, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 2, 0, 2, 0, 1, 1, 1, 1, 3, 5, 2, 4, 1, 1, 1, 0, 3, 1, 1, 4, 0, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 3, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 4, 6, 2, 0, 3, 3, 1, 4, 3, 1, 1, 2, 1, 2, 1, 1, 3, 0, 1, 0, 0, 2, 2, 1, 2, 1, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 0, 0]
        self.__reduce_non_terminal_index: List[int] = [7, 44, 47, 37, 25, 40, 2, 46, 10, 30, 51, 42, 58, 11, 19, 30, 27, 20, 48, 6, 16, 52, 59, 49, 50, 2, 2, 34, 23, 21, 42, 12, 31, 15, 14, 19, 57, 44, 23, 56, 16, 8, 32, 29, 1, 8, 35, 2, 38, 14, 42, 60, 24, 54, 29, 46, 12, 21, 55, 36, 33, 18, 4, 17, 3, 26, 5, 15, 28, 39, 51, 5, 43, 4, 22, 40, 54, 43, 45, 38, 33, 27, 17, 11, 2, 22, 17, 9, 58, 13, 54, 0, 53, 41, 6, 10]

    def parse(self, token_list: List[BosonToken]) -> BosonGrammar:
        grammar: BosonGrammar = BosonGrammar()
        analysis_stack: List[int] = [0]
        symbol_stack: List[BosonGrammarNode] = []
        token_index: int = 0
        while token_index < len(token_list):
            token: BosonToken = token_list[token_index]
            current_state: int = analysis_stack[-1]
            if token.symbol in self.__terminal_index_mapping:
                operation: str = self.__sparse_action_table.get(current_state, {}).get(self.__terminal_index_mapping[token.symbol], 'e')
            else:
                operation: str = 'e'
            operation_flag: str = operation[0]
            if operation_flag == 'e':
                grammar.error_index = token_index
                return grammar
            elif operation_flag == 's':
                analysis_stack.append(int(operation[1:]))
                token_index += 1
                grammar_node: BosonGrammarNode = BosonGrammarNode(token.text)
                symbol_stack.append(grammar_node)
            elif operation_flag == 'r':
                statement_index: int = int(operation[1:])
                reduce_count: int = self.__reduce_symbol_count[statement_index]
                for _ in range(reduce_count):
                    analysis_stack.pop()
                current_state: int = analysis_stack[-1]
                current_non_terminal_index: int = self.__reduce_non_terminal_index[statement_index]
                goto_next_state: int = self.__sparse_goto_table.get(current_state, {}).get(current_non_terminal_index, -1)
                if goto_next_state == -1:
                    raise ValueError('Invalid goto action: state={}, non-terminal={}'.format(current_state, current_non_terminal_index))
                analysis_stack.append(goto_next_state)
                if statement_index in self.__sentence_index_grammar_tuple_mapping:
                    symbol_package: List[BosonGrammarNode] = []
                    for _ in range(reduce_count):
                        symbol_package.insert(0, symbol_stack.pop())
                    grammar_node: BosonGrammarNode = BosonGrammarNode()
                    for node_string in self.__sentence_index_grammar_tuple_mapping[statement_index]:
                        if node_string[0] == '*':
                            for node in symbol_package[int(node_string[1:])]:
                                grammar_node.append(node)
                        else:
                            grammar_node.append(symbol_package[int(node_string)])
                    grammar_node.set_reduce_number(statement_index)
                    symbol_stack.append(grammar_node)
                elif statement_index in {0, 6, 9, 11, 17, 18, 20, 25, 26, 27, 30, 39, 41, 49, 50, 51, 52, 53, 54, 55, 63, 66, 69, 71, 76, 82, 86, 90, 92}:
                    grammar_node: BosonGrammarNode = BosonGrammarNode()
                    for _ in range(reduce_count):
                        grammar_node.insert(0, symbol_stack.pop())
                    grammar_node.set_reduce_number(statement_index)
                    symbol_stack.append(grammar_node)
                else:
                    raise ValueError('Invalid reduce number: reduce={}'.format(statement_index))
            elif operation_flag == 'a':
                grammar.grammar_tree = symbol_stack[0]
                return grammar
            else:
                raise ValueError('Invalid action: action={}'.format(operation))
        raise RuntimeError('Analyzer unusual exit.')
