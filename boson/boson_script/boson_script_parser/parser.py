from .token import LexicalToken
from .grammar_node import BosonGrammarNode
from .grammar import BosonGrammar


class BosonParser:
    def __init__(self):
        self.__terminal_index_mapping: dict = {
            'name': 0,
            '!symbol_15': 1,
            '!symbol_8': 2,
            '!symbol_6': 3,
            '!symbol_12': 4,
            'string': 5,
            '!symbol_1': 6,
            'number': 7,
            'node': 8,
            '!symbol_11': 9,
            '$': 10,
            '!symbol_7': 11,
            '!symbol_14': 12,
            '!symbol_4': 13,
            'regular': 14,
            '!symbol_13': 15,
            '!symbol_3': 16,
            'command': 17,
            '!symbol_16': 18,
            '!symbol_9': 19,
            '!symbol_2': 20,
            '!symbol_10': 21,
            '!symbol_5': 22
        }
        self.__sparse_action_table: dict = {
            0: {0: 's7', 17: 's8'},
            1: {10: 'a'},
            2: {0: 's7', 10: 'r65', 17: 's8'},
            3: {0: 'r25', 10: 'r25', 17: 'r25'},
            4: {0: 'r14', 10: 'r14', 17: 'r14'},
            5: {0: 'r44', 10: 'r44', 17: 'r44'},
            6: {0: 'r89', 10: 'r89', 17: 'r89'},
            7: {2: 's17', 20: 's16'},
            8: {0: 's10', 5: 's11'},
            9: {0: 'r78', 5: 'r78', 6: 'r78'},
            10: {0: 'r75', 5: 'r75', 6: 'r75'},
            11: {0: 'r86', 5: 'r86', 6: 'r86'},
            12: {0: 's10', 5: 's11', 6: 's14'},
            13: {0: 'r23', 5: 'r23', 6: 'r23'},
            14: {0: 'r30', 10: 'r30', 17: 'r30'},
            15: {0: 'r31', 5: 'r31', 6: 'r31'},
            16: {14: 's108'},
            17: {0: 's22', 5: 's20', 6: 'r72', 9: 's29', 15: 's30', 19: 'r72', 20: 'r72', 21: 's24'},
            18: {6: 's107'},
            19: {6: 'r85', 19: 'r85'},
            20: {0: 'r21', 1: 'r21', 4: 'r21', 5: 'r21', 6: 'r21', 9: 'r21', 12: 'r21', 15: 'r21', 18: 'r21', 19: 'r21', 20: 'r21'},
            21: {6: 'r81', 19: 'r81', 20: 's50'},
            22: {0: 'r47', 1: 'r47', 4: 'r47', 5: 'r47', 6: 'r47', 9: 'r47', 12: 'r47', 15: 'r47', 18: 'r47', 19: 'r47', 20: 'r47'},
            23: {6: 'r2', 19: 'r2', 20: 'r2'},
            24: {6: 'r70', 19: 'r70', 20: 'r70'},
            25: {0: 's22', 4: 'r60', 5: 's20', 6: 'r60', 9: 's29', 12: 'r60', 15: 's30', 19: 'r60', 20: 'r60'},
            26: {0: 'r49', 4: 'r49', 5: 'r49', 6: 'r49', 9: 'r49', 12: 'r49', 15: 'r49', 19: 'r49', 20: 'r49'},
            27: {0: 'r1', 1: 's44', 4: 'r1', 5: 'r1', 6: 'r1', 9: 'r1', 12: 'r1', 15: 'r1', 18: 's45', 19: 'r1', 20: 'r1'},
            28: {0: 'r59', 4: 'r59', 5: 'r59', 6: 'r59', 9: 'r59', 12: 'r59', 15: 'r59', 19: 'r59', 20: 'r59'},
            29: {0: 's22', 5: 's20', 9: 's29', 15: 's30'},
            30: {0: 's22', 5: 's20', 9: 's29', 15: 's30'},
            31: {12: 's38'},
            32: {4: 'r19', 12: 'r19', 19: 's35'},
            33: {4: 'r35', 12: 'r35', 19: 's35'},
            34: {4: 'r88', 12: 'r88', 19: 'r88'},
            35: {0: 's22', 5: 's20', 9: 's29', 15: 's30'},
            36: {4: 'r68', 12: 'r68', 19: 'r68'},
            37: {4: 'r77', 12: 'r77', 19: 'r77'},
            38: {0: 'r32', 4: 'r32', 5: 'r32', 6: 'r32', 9: 'r32', 12: 'r32', 15: 'r32', 19: 'r32', 20: 'r32'},
            39: {4: 's40'},
            40: {0: 'r1', 1: 's44', 4: 'r1', 5: 'r1', 6: 'r1', 9: 'r1', 12: 'r1', 15: 'r1', 18: 's45', 19: 'r1', 20: 'r1'},
            41: {0: 'r4', 4: 'r4', 5: 'r4', 6: 'r4', 9: 'r4', 12: 'r4', 15: 'r4', 19: 'r4', 20: 'r4'},
            42: {0: 'r62', 4: 'r62', 5: 'r62', 6: 'r62', 9: 'r62', 12: 'r62', 15: 'r62', 19: 'r62', 20: 'r62'},
            43: {0: 'r7', 4: 'r7', 5: 'r7', 6: 'r7', 9: 'r7', 12: 'r7', 15: 'r7', 19: 'r7', 20: 'r7'},
            44: {0: 'r6', 4: 'r6', 5: 'r6', 6: 'r6', 9: 'r6', 12: 'r6', 15: 'r6', 19: 'r6', 20: 'r6'},
            45: {0: 'r48', 4: 'r48', 5: 'r48', 6: 'r48', 9: 'r48', 12: 'r48', 15: 'r48', 19: 'r48', 20: 'r48'},
            46: {0: 'r28', 4: 'r28', 5: 'r28', 6: 'r28', 9: 'r28', 12: 'r28', 15: 'r28', 19: 'r28', 20: 'r28'},
            47: {0: 'r53', 4: 'r53', 5: 'r53', 6: 'r53', 9: 'r53', 12: 'r53', 15: 'r53', 19: 'r53', 20: 'r53'},
            48: {6: 'r5', 19: 'r5'},
            49: {6: 'r76', 19: 'r76'},
            50: {0: 's52', 9: 'r22', 15: 'r22'},
            51: {9: 'r9', 15: 'r9'},
            52: {9: 'r80', 15: 'r80'},
            53: {9: 's54', 15: 's55'},
            54: {1: 's86', 4: 'r41', 8: 'r15'},
            55: {8: 's84'},
            56: {6: 'r79', 19: 'r79', 22: 's57'},
            57: {0: 's63'},
            58: {6: 'r11', 19: 'r11'},
            59: {6: 'r71', 19: 'r71'},
            60: {6: 'r51', 19: 'r51'},
            61: {3: 's83'},
            62: {3: 'r54', 11: 'r54'},
            63: {20: 's64'},
            64: {0: 's70', 5: 's66', 7: 's67', 15: 's71', 22: 's57'},
            65: {3: 'r36', 11: 'r36'},
            66: {3: 'r13', 11: 'r13', 12: 'r13'},
            67: {3: 'r45', 11: 'r45', 12: 'r45'},
            68: {3: 'r50', 11: 'r50', 12: 'r50'},
            69: {3: 'r57', 11: 'r57', 12: 'r57'},
            70: {3: 'r87', 11: 'r87', 12: 'r87'},
            71: {0: 's70', 5: 's66', 7: 's67', 15: 's71', 22: 's57'},
            72: {11: 's75'},
            73: {11: 's75', 12: 's77'},
            74: {11: 'r43', 12: 'r43'},
            75: {0: 's70', 5: 's66', 7: 's67', 15: 's71', 22: 's57'},
            76: {11: 'r20', 12: 'r20'},
            77: {3: 'r37', 11: 'r37', 12: 'r37'},
            78: {11: 'r10', 12: 'r10'},
            79: {3: 'r17', 11: 's81'},
            80: {3: 'r83', 11: 'r83'},
            81: {0: 's63'},
            82: {3: 'r33', 11: 'r33'},
            83: {3: 'r52', 6: 'r52', 11: 'r52', 12: 'r52', 19: 'r52'},
            84: {12: 's85'},
            85: {4: 'r82', 6: 'r82', 11: 'r82', 19: 'r82', 22: 'r82'},
            86: {8: 'r64', 9: 'r64', 15: 'r64'},
            87: {4: 's102'},
            88: {4: 'r58'},
            89: {4: 'r56'},
            90: {4: 'r91', 11: 'r91'},
            91: {8: 's93'},
            92: {8: 'r90', 9: 'r90', 15: 'r90'},
            93: {1: 's86', 4: 'r63', 9: 'r15', 11: 'r63', 15: 'r15'},
            94: {4: 'r69', 11: 'r69'},
            95: {4: 'r84', 11: 'r84'},
            96: {9: 's54', 15: 's55'},
            97: {4: 'r16', 11: 'r16'},
            98: {4: 'r38', 11: 's100'},
            99: {4: 'r26', 11: 'r26'},
            100: {1: 's86', 8: 'r15'},
            101: {4: 'r61', 11: 'r61'},
            102: {4: 'r39', 6: 'r39', 11: 'r39', 19: 'r39', 22: 'r39'},
            103: {6: 'r66', 19: 's104'},
            104: {0: 's22', 5: 's20', 6: 'r72', 9: 's29', 15: 's30', 19: 'r72', 20: 'r72', 21: 's24'},
            105: {6: 'r12', 19: 'r12'},
            106: {6: 'r18', 19: 'r18'},
            107: {0: 'r74', 10: 'r74', 17: 'r74'},
            108: {6: 'r8', 13: 'r8', 16: 's111'},
            109: {6: 'r67', 13: 's112'},
            110: {6: 'r3', 13: 'r3'},
            111: {6: 'r42', 13: 'r42'},
            112: {22: 's116'},
            113: {6: 's115'},
            114: {6: 'r24'},
            115: {0: 'r27', 10: 'r27', 17: 'r27'},
            116: {0: 's117'},
            117: {3: 'r40', 11: 'r40'},
            118: {3: 's119'},
            119: {6: 'r29'},
            120: {3: 'r34', 11: 's121'},
            121: {0: 's123'},
            122: {3: 'r55', 11: 'r55'},
            123: {3: 'r73', 11: 'r73'},
            124: {0: 'r46', 10: 'r46', 17: 'r46'}
        }
        self.__sparse_goto_table: dict = {
            0: {3: 4, 6: 1, 36: 6, 41: 2, 49: 5, 50: 3},
            2: {3: 4, 36: 6, 49: 5, 50: 124},
            8: {13: 13, 17: 12, 56: 9},
            12: {13: 15, 56: 9},
            17: {1: 19, 14: 28, 16: 23, 21: 25, 34: 18, 37: 27, 51: 21, 52: 26},
            19: {44: 103},
            21: {7: 48, 9: 49},
            25: {14: 28, 37: 27, 52: 47},
            27: {27: 42, 30: 46, 46: 43},
            29: {14: 28, 16: 32, 19: 39, 21: 25, 37: 27, 52: 26},
            30: {14: 28, 16: 32, 19: 31, 21: 25, 37: 27, 52: 26},
            32: {2: 34, 57: 33},
            33: {2: 37},
            35: {14: 28, 16: 36, 21: 25, 37: 27, 52: 26},
            40: {27: 42, 30: 41, 46: 43},
            50: {26: 51, 47: 53},
            53: {28: 56},
            54: {0: 88, 18: 92, 42: 87, 43: 90, 48: 91, 55: 89},
            56: {23: 58, 45: 59, 53: 60},
            57: {12: 62, 39: 61},
            62: {40: 79},
            64: {4: 69, 20: 65, 53: 68},
            71: {4: 69, 20: 72, 53: 68},
            72: {10: 74, 29: 73},
            73: {10: 78},
            75: {4: 69, 20: 76, 53: 68},
            79: {5: 80},
            81: {12: 82},
            90: {32: 98},
            93: {11: 95, 18: 92, 22: 94, 48: 96},
            96: {28: 97},
            98: {54: 99},
            100: {18: 92, 43: 101, 48: 91},
            103: {25: 105},
            104: {1: 106, 14: 28, 16: 23, 21: 25, 37: 27, 51: 21, 52: 26},
            108: {8: 109, 58: 110},
            109: {31: 114, 35: 113},
            116: {33: 118},
            117: {38: 120},
            120: {15: 122}
        }
        self.__sentence_index_grammar_tuple_mapping: dict = {
            37: ('1', '*2'),
            20: ('1',),
            10: ('*0', '*1'),
            45: ('0',),
            13: ('0',),
            36: ('0', '2'),
            17: ('0', '*1'),
            33: ('1',),
            54: (),
            83: ('*0', '*1'),
            52: ('1',),
            35: ('0', '*1'),
            68: ('1',),
            77: ('*0', '*1'),
            32: ('1',),
            4: ('1', '*3'),
            21: ('0',),
            28: ('0', '*1'),
            1: (),
            62: ('*0',),
            69: ('*0', '1', '*2'),
            16: ('*0', '1'),
            63: (),
            84: ('*0',),
            15: (),
            90: ('*0',),
            38: ('0', '*1'),
            61: ('1',),
            91: (),
            26: ('*0', '*1'),
            82: ('1',),
            39: ('*1',),
            56: ('*0',),
            41: (),
            58: ('*0',),
            60: ('*0',),
            53: ('*0', '1'),
            5: ('0', '*1'),
            11: ('1', '2', '3'),
            81: (),
            76: ('*0',),
            79: (),
            71: ('*0',),
            22: (),
            9: ('*0',),
            66: ('0', '*1'),
            18: ('1',),
            85: (),
            12: ('*0', '*1'),
            74: ('0', '2'),
            34: ('0', '*1'),
            73: ('1',),
            40: (),
            55: ('*0', '*1'),
            27: ('0', '2', '*3', '4'),
            29: ('*2',),
            67: (),
            24: ('*0',),
            8: (),
            3: ('*0',),
            30: ('0', '*1'),
            31: ('*0', '1'),
            46: ('*0', '1'),
            43: ('*0',),
            88: ('*0',)
        }
        self.__reduce_symbol_count: list = [1, 0, 1, 1, 4, 2, 1, 1, 0, 1, 2, 4, 2, 1, 1, 0, 2, 2, 2, 1, 2, 1, 0, 1, 1, 1, 2, 6, 2, 4, 3, 2, 3, 2, 2, 2, 3, 4, 2, 3, 0, 0, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 2, 0, 2, 1, 1, 1, 1, 1, 2, 1, 0, 1, 1, 2, 0, 2, 3, 1, 1, 0, 2, 4, 1, 1, 2, 1, 0, 1, 0, 3, 2, 1, 0, 1, 1, 1, 1, 1, 0]
        self.__reduce_non_terminal_index: list = [24, 30, 51, 8, 14, 1, 46, 27, 8, 47, 29, 9, 44, 20, 50, 48, 11, 39, 25, 19, 10, 37, 47, 17, 35, 41, 32, 36, 52, 31, 49, 17, 14, 5, 33, 19, 12, 4, 55, 28, 38, 42, 58, 29, 50, 20, 41, 37, 46, 21, 20, 45, 53, 21, 40, 38, 0, 20, 42, 52, 16, 54, 30, 22, 18, 6, 34, 35, 2, 43, 51, 23, 51, 15, 3, 56, 7, 57, 13, 23, 26, 7, 28, 40, 22, 44, 56, 20, 57, 50, 48, 32]

    def parse(self, token_list: list) -> BosonGrammar:
        grammar = BosonGrammar()
        analysis_stack = [0]
        symbol_stack = []
        token_index = 0
        while token_index < len(token_list):
            token: LexicalToken = token_list[token_index]
            current_state = analysis_stack[-1]
            if token.symbol in self.__terminal_index_mapping:
                operation = self.__sparse_action_table.get(current_state, {}).get(self.__terminal_index_mapping[token.symbol], 'e')
            else:
                operation = 'e'
            operation_flag = operation[0]
            if operation_flag == 'e':
                grammar.error_index = token_index
                return grammar
            elif operation_flag == 's':
                analysis_stack.append(int(operation[1:]))
                token_index += 1
                grammar_node = BosonGrammarNode(token.text)
                symbol_stack.append(grammar_node)
            elif operation_flag == 'r':
                statement_index = int(operation[1:])
                reduce_count = self.__reduce_symbol_count[statement_index]
                for _ in range(reduce_count):
                    analysis_stack.pop()
                current_state = analysis_stack[-1]
                current_non_terminal_index = self.__reduce_non_terminal_index[statement_index]
                goto_next_state = self.__sparse_goto_table.get(current_state, {}).get(current_non_terminal_index, -1)
                if goto_next_state == -1:
                    raise ValueError('Invalid goto action: state={}, non-terminal={}'.format(current_state, current_non_terminal_index))
                analysis_stack.append(goto_next_state)
                if statement_index in self.__sentence_index_grammar_tuple_mapping:
                    symbol_package = []
                    for _ in range(reduce_count):
                        symbol_package.insert(0, symbol_stack.pop())
                    grammar_node = BosonGrammarNode()
                    for node_string in self.__sentence_index_grammar_tuple_mapping[statement_index]:
                        if node_string[0] == '*':
                            for node in symbol_package[int(node_string[1:])]:
                                grammar_node.append(node)
                        else:
                            grammar_node.append(symbol_package[int(node_string)])
                    grammar_node.set_reduce_number(statement_index)
                    symbol_stack.append(grammar_node)
                elif statement_index in {0, 2, 6, 7, 14, 19, 23, 25, 42, 44, 47, 48, 49, 50, 51, 57, 59, 64, 65, 70, 72, 75, 78, 80, 86, 87, 89}:
                    grammar_node = BosonGrammarNode()
                    for _ in range(reduce_count):
                        grammar_node.insert(0, symbol_stack.pop())
                    grammar_node.set_reduce_number(statement_index)
                    symbol_stack.append(grammar_node)
                else:
                    raise ValueError('Invalid reduce number: reduce={}'.format(statement_index))
            elif operation_flag == 'a':
                grammar.grammar_tree = symbol_stack[0]
                return grammar
            else:
                raise ValueError('Invalid action: action={}'.format(operation))
        raise RuntimeError('Analyzer unusual exit.')
