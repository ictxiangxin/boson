from .token import LexicalToken
from .grammar_node import BosonGrammarNode
from .grammar import BosonGrammar


class BosonParser:
    def __init__(self):
        self.__terminal_index_mapping: dict = {
            '!symbol_5': 0,
            '!symbol_4': 1,
            'command': 2,
            '!symbol_6': 3,
            '!symbol_10': 4,
            'regular': 5,
            '!symbol_8': 6,
            '!symbol_1': 7,
            '!symbol_3': 8,
            '!symbol_9': 9,
            '!symbol_2': 10,
            'name': 11,
            '!symbol_15': 12,
            '$': 13,
            '!symbol_13': 14,
            'number': 15,
            'node': 16,
            '!symbol_14': 17,
            'string': 18,
            '!symbol_12': 19,
            '!symbol_16': 20,
            '!symbol_11': 21,
            '!symbol_7': 22
        }
        self.__sparse_action_table: dict = {
            0: {2: 's7', 11: 's8'},
            1: {13: 'a'},
            2: {2: 's7', 11: 's8', 13: 'r1'},
            3: {2: 'r28', 11: 'r28', 13: 'r28'},
            4: {2: 'r13', 11: 'r13', 13: 'r13'},
            5: {2: 'r16', 11: 'r16', 13: 'r16'},
            6: {2: 'r22', 11: 'r22', 13: 'r22'},
            7: {11: 's120', 18: 's121'},
            8: {6: 's10', 10: 's9'},
            9: {5: 's101'},
            10: {4: 's19', 7: 'r32', 9: 'r32', 10: 'r32', 11: 's12', 14: 's13', 18: 's11', 21: 's14'},
            11: {7: 'r26', 9: 'r26', 10: 'r26', 11: 'r26', 12: 'r26', 14: 'r26', 17: 'r26', 18: 'r26', 19: 'r26', 20: 'r26', 21: 'r26'},
            12: {7: 'r33', 9: 'r33', 10: 'r33', 11: 'r33', 12: 'r33', 14: 'r33', 17: 'r33', 18: 'r33', 19: 'r33', 20: 'r33', 21: 'r33'},
            13: {11: 's12', 14: 's13', 18: 's11', 21: 's14'},
            14: {11: 's12', 14: 's13', 18: 's11', 21: 's14'},
            15: {7: 's89'},
            16: {7: 'r85', 9: 'r85'},
            17: {7: 'r59', 9: 'r59', 10: 's31'},
            18: {7: 'r34', 9: 'r34', 10: 'r34'},
            19: {7: 'r75', 9: 'r75', 10: 'r75'},
            20: {7: 'r6', 9: 'r6', 10: 'r6', 11: 's12', 14: 's13', 17: 'r6', 18: 's11', 19: 'r6', 21: 's14'},
            21: {7: 'r67', 9: 'r67', 10: 'r67', 11: 'r67', 14: 'r67', 17: 'r67', 18: 'r67', 19: 'r67', 21: 'r67'},
            22: {7: 'r29', 9: 'r29', 10: 'r29', 11: 'r29', 14: 'r29', 17: 'r29', 18: 'r29', 19: 'r29', 21: 'r29'},
            23: {7: 'r79', 9: 'r79', 10: 'r79', 11: 'r79', 12: 's26', 14: 'r79', 17: 'r79', 18: 'r79', 19: 'r79', 20: 's27', 21: 'r79'},
            24: {7: 'r48', 9: 'r48', 10: 'r48', 11: 'r48', 14: 'r48', 17: 'r48', 18: 'r48', 19: 'r48', 21: 'r48'},
            25: {7: 'r21', 9: 'r21', 10: 'r21', 11: 'r21', 14: 'r21', 17: 'r21', 18: 'r21', 19: 'r21', 21: 'r21'},
            26: {7: 'r36', 9: 'r36', 10: 'r36', 11: 'r36', 14: 'r36', 17: 'r36', 18: 'r36', 19: 'r36', 21: 'r36'},
            27: {7: 'r60', 9: 'r60', 10: 'r60', 11: 'r60', 14: 'r60', 17: 'r60', 18: 'r60', 19: 'r60', 21: 'r60'},
            28: {7: 'r30', 9: 'r30', 10: 'r30', 11: 'r30', 14: 'r30', 17: 'r30', 18: 'r30', 19: 'r30', 21: 'r30'},
            29: {7: 'r10', 9: 'r10', 10: 'r10', 11: 'r10', 14: 'r10', 17: 'r10', 18: 'r10', 19: 'r10', 21: 'r10'},
            30: {7: 'r41', 9: 'r41'},
            31: {11: 's35', 14: 'r9', 21: 'r9'},
            32: {7: 'r2', 9: 'r2'},
            33: {14: 's36', 21: 's37'},
            34: {14: 'r82', 21: 'r82'},
            35: {14: 'r52', 21: 'r52'},
            36: {16: 's83'},
            37: {12: 's72', 16: 'r38', 19: 'r61'},
            38: {0: 's41', 7: 'r64', 9: 'r64'},
            39: {7: 'r49', 9: 'r49'},
            40: {7: 'r40', 9: 'r40'},
            41: {11: 's43'},
            42: {7: 'r90', 9: 'r90'},
            43: {10: 's51'},
            44: {3: 's50'},
            45: {3: 'r17', 22: 'r17'},
            46: {3: 'r72', 22: 's48'},
            47: {3: 'r18', 22: 'r18'},
            48: {11: 's43'},
            49: {3: 'r89', 22: 'r89'},
            50: {3: 'r43', 7: 'r43', 9: 'r43', 17: 'r43', 22: 'r43'},
            51: {0: 's41', 11: 's54', 14: 's58', 15: 's55', 18: 's57'},
            52: {3: 'r69', 22: 'r69'},
            53: {3: 'r7', 17: 'r7', 22: 'r7'},
            54: {3: 'r56', 17: 'r56', 22: 'r56'},
            55: {3: 'r62', 17: 'r62', 22: 'r62'},
            56: {3: 'r63', 17: 'r63', 22: 'r63'},
            57: {3: 'r91', 17: 'r91', 22: 'r91'},
            58: {0: 's41', 11: 's54', 14: 's58', 15: 's55', 18: 's57'},
            59: {22: 's62'},
            60: {17: 's64', 22: 's62'},
            61: {17: 'r31', 22: 'r31'},
            62: {0: 's41', 11: 's54', 14: 's58', 15: 's55', 18: 's57'},
            63: {17: 'r68', 22: 'r68'},
            64: {3: 'r88', 17: 'r88', 22: 'r88'},
            65: {17: 'r71', 22: 'r71'},
            66: {19: 's82'},
            67: {19: 'r11'},
            68: {19: 'r87'},
            69: {19: 'r81', 22: 'r81'},
            70: {16: 's73'},
            71: {14: 'r55', 16: 'r55', 21: 'r55'},
            72: {14: 'r83', 16: 'r83', 21: 'r83'},
            73: {12: 's72', 14: 'r38', 19: 'r14', 21: 'r38', 22: 'r14'},
            74: {19: 'r5', 22: 'r5'},
            75: {19: 'r73', 22: 'r73'},
            76: {14: 's36', 21: 's37'},
            77: {19: 'r42', 22: 'r42'},
            78: {19: 'r50', 22: 's79'},
            79: {12: 's72', 16: 'r38'},
            80: {19: 'r70', 22: 'r70'},
            81: {19: 'r12', 22: 'r12'},
            82: {0: 'r51', 7: 'r51', 9: 'r51', 19: 'r51', 22: 'r51'},
            83: {17: 's84'},
            84: {0: 'r25', 7: 'r25', 9: 'r25', 19: 'r25', 22: 'r25'},
            85: {7: 'r57', 9: 's86'},
            86: {4: 's19', 7: 'r32', 9: 'r32', 10: 'r32', 11: 's12', 14: 's13', 18: 's11', 21: 's14'},
            87: {7: 'r66', 9: 'r66'},
            88: {7: 'r77', 9: 'r77'},
            89: {2: 'r46', 11: 'r46', 13: 'r46'},
            90: {19: 's97'},
            91: {9: 's92', 17: 'r19', 19: 'r19'},
            92: {11: 's12', 14: 's13', 18: 's11', 21: 's14'},
            93: {9: 's92', 17: 'r76', 19: 'r76'},
            94: {9: 'r45', 17: 'r45', 19: 'r45'},
            95: {9: 'r74', 17: 'r74', 19: 'r74'},
            96: {9: 'r44', 17: 'r44', 19: 'r44'},
            97: {7: 'r79', 9: 'r79', 10: 'r79', 11: 'r79', 12: 's26', 14: 'r79', 17: 'r79', 18: 'r79', 19: 'r79', 20: 's27', 21: 'r79'},
            98: {7: 'r86', 9: 'r86', 10: 'r86', 11: 'r86', 14: 'r86', 17: 'r86', 18: 'r86', 19: 'r86', 21: 'r86'},
            99: {17: 's100'},
            100: {7: 'r35', 9: 'r35', 10: 'r35', 11: 'r35', 14: 'r35', 17: 'r35', 18: 'r35', 19: 'r35', 21: 'r35'},
            101: {1: 'r78', 7: 'r78', 8: 's102'},
            102: {1: 'r37', 7: 'r37'},
            103: {1: 's106', 7: 'r58'},
            104: {1: 'r20', 7: 'r20'},
            105: {7: 'r54'},
            106: {0: 's109'},
            107: {7: 's108'},
            108: {2: 'r39', 11: 'r39', 13: 'r39'},
            109: {11: 's111'},
            110: {3: 's116'},
            111: {3: 'r80', 22: 'r80'},
            112: {3: 'r53', 22: 's114'},
            113: {3: 'r84', 22: 'r84'},
            114: {11: 's115'},
            115: {3: 'r24', 22: 'r24'},
            116: {7: 'r3'},
            117: {7: 's122', 11: 's120', 18: 's121'},
            118: {7: 'r47', 11: 'r47', 18: 'r47'},
            119: {7: 'r8', 11: 'r8', 18: 'r8'},
            120: {7: 'r27', 11: 'r27', 18: 'r27'},
            121: {7: 'r65', 11: 'r65', 18: 'r65'},
            122: {2: 'r4', 11: 'r4', 13: 'r4'},
            123: {7: 'r15', 11: 'r15', 18: 'r15'},
            124: {2: 'r23', 11: 'r23', 13: 'r23'}
        }
        self.__sparse_goto_table: dict = {
            0: {16: 5, 20: 6, 26: 1, 34: 4, 43: 3, 46: 2},
            2: {16: 5, 20: 6, 34: 4, 43: 124},
            7: {17: 118, 21: 119, 35: 117},
            10: {3: 21, 14: 17, 22: 22, 27: 15, 32: 18, 49: 20, 50: 23, 51: 16},
            13: {3: 21, 13: 99, 22: 22, 32: 91, 49: 20, 50: 23},
            14: {3: 21, 13: 90, 22: 22, 32: 91, 49: 20, 50: 23},
            16: {11: 85},
            17: {5: 32, 9: 30},
            20: {3: 29, 22: 22, 50: 23},
            23: {12: 24, 23: 28, 25: 25},
            31: {15: 34, 41: 33},
            33: {37: 38},
            37: {1: 68, 18: 67, 19: 70, 24: 66, 29: 69, 55: 71},
            38: {7: 40, 52: 42, 58: 39},
            41: {38: 45, 57: 44},
            45: {56: 46},
            46: {40: 47},
            48: {38: 49},
            51: {7: 56, 48: 52, 54: 53},
            58: {7: 56, 48: 59, 54: 53},
            59: {4: 60, 53: 61},
            60: {53: 65},
            62: {7: 56, 48: 63, 54: 53},
            69: {39: 78},
            73: {0: 75, 19: 76, 42: 74, 55: 71},
            76: {37: 77},
            78: {28: 80},
            79: {19: 70, 29: 81, 55: 71},
            85: {2: 87},
            86: {3: 21, 14: 17, 22: 22, 32: 18, 49: 20, 50: 23, 51: 88},
            91: {33: 93, 36: 94},
            92: {3: 21, 22: 22, 32: 96, 49: 20, 50: 23},
            93: {36: 95},
            97: {12: 24, 23: 98, 25: 25},
            101: {8: 104, 30: 103},
            103: {6: 107, 31: 105},
            109: {44: 110},
            111: {45: 112},
            112: {10: 113},
            117: {17: 123, 21: 119}
        }
        self.__sentence_index_grammar_tuple_mapping: dict = {
            88: ('1', '*2'),
            68: ('1',),
            71: ('*0', '*1'),
            62: ('0',),
            91: ('0',),
            69: ('0', '2'),
            72: ('0', '*1'),
            89: ('1',),
            17: (),
            18: ('*0', '*1'),
            43: ('1',),
            76: ('0', '*1'),
            44: ('1',),
            74: ('*0', '*1'),
            35: ('1',),
            86: ('1', '*3'),
            26: ('0',),
            30: ('0', '*1'),
            79: (),
            48: ('*0',),
            5: ('*0', '1', '*2'),
            42: ('*0', '1'),
            14: (),
            73: ('*0',),
            38: (),
            55: ('*0',),
            50: ('0', '*1'),
            12: ('1',),
            81: (),
            70: ('*0', '*1'),
            25: ('1',),
            51: ('*1',),
            87: ('*0',),
            61: (),
            11: ('*0',),
            6: ('*0',),
            10: ('*0', '1'),
            2: ('0', '*1'),
            90: ('1', '2', '3'),
            59: (),
            41: ('*0',),
            64: (),
            49: ('*0',),
            9: (),
            82: ('*0',),
            57: ('0', '*1'),
            77: ('1',),
            85: (),
            66: ('*0', '*1'),
            46: ('0', '2'),
            53: ('0', '*1'),
            24: ('1',),
            80: (),
            84: ('*0', '*1'),
            39: ('0', '2', '*3', '4'),
            3: ('*2',),
            58: (),
            54: ('*0',),
            78: (),
            20: ('*0',),
            4: ('0', '*1'),
            15: ('*0', '1'),
            23: ('*0', '1'),
            31: ('*0',),
            45: ('*0',)
        }
        self.__reduce_symbol_count: list = [1, 1, 2, 4, 3, 3, 1, 1, 1, 0, 2, 1, 2, 1, 0, 2, 1, 0, 2, 1, 1, 1, 1, 2, 2, 3, 1, 1, 1, 1, 2, 1, 0, 1, 1, 3, 1, 1, 0, 6, 1, 1, 2, 3, 2, 1, 4, 1, 1, 1, 2, 3, 1, 2, 1, 1, 1, 2, 0, 0, 1, 0, 1, 1, 0, 1, 2, 1, 2, 3, 2, 2, 2, 1, 2, 1, 2, 2, 0, 0, 0, 0, 1, 1, 2, 0, 4, 1, 4, 2, 4, 1]
        self.__reduce_non_terminal_index: list = [47, 26, 51, 31, 20, 29, 32, 48, 17, 41, 49, 24, 28, 43, 42, 35, 43, 56, 56, 13, 30, 12, 43, 46, 10, 37, 50, 21, 46, 3, 3, 4, 14, 50, 14, 22, 25, 8, 19, 34, 58, 5, 0, 7, 36, 33, 16, 35, 23, 52, 1, 37, 15, 44, 6, 19, 48, 27, 6, 5, 25, 24, 48, 48, 52, 21, 11, 49, 53, 38, 39, 4, 57, 42, 33, 14, 13, 2, 30, 23, 45, 39, 41, 55, 45, 11, 22, 18, 54, 40, 9, 48]

    def parse(self, token_list: list) -> BosonGrammar:
        grammar = BosonGrammar()
        analysis_stack = [0]
        symbol_stack = []
        token_index = 0
        while token_index < len(token_list):
            token: LexicalToken = token_list[token_index]
            current_state = analysis_stack[-1]
            if token.symbol in self.__terminal_index_mapping:
                operation = self.__sparse_action_table.get(current_state, {}).get(self.__terminal_index_mapping[token.symbol], 'e')
            else:
                operation = 'e'
            operation_flag = operation[0]
            if operation_flag == 'e':
                grammar.error_index = token_index
                return grammar
            elif operation_flag == 's':
                analysis_stack.append(int(operation[1:]))
                token_index += 1
                grammar_node = BosonGrammarNode(token.text)
                symbol_stack.append(grammar_node)
            elif operation_flag == 'r':
                statement_index = int(operation[1:])
                reduce_count = self.__reduce_symbol_count[statement_index]
                for _ in range(reduce_count):
                    analysis_stack.pop()
                current_state = analysis_stack[-1]
                current_non_terminal_index = self.__reduce_non_terminal_index[statement_index]
                goto_next_state = self.__sparse_goto_table.get(current_state, {}).get(current_non_terminal_index, -1)
                if goto_next_state == -1:
                    raise ValueError('Invalid goto action: state={}, non-terminal={}'.format(current_state, current_non_terminal_index))
                analysis_stack.append(goto_next_state)
                if statement_index in self.__sentence_index_grammar_tuple_mapping:
                    symbol_package = []
                    for _ in range(reduce_count):
                        symbol_package.insert(0, symbol_stack.pop())
                    grammar_node = BosonGrammarNode()
                    for node_string in self.__sentence_index_grammar_tuple_mapping[statement_index]:
                        if node_string[0] == '*':
                            for node in symbol_package[int(node_string[1:])]:
                                grammar_node.append(node)
                        else:
                            grammar_node.append(symbol_package[int(node_string)])
                    grammar_node.set_reduce_number(statement_index)
                    symbol_stack.append(grammar_node)
                elif statement_index in {0, 1, 7, 8, 13, 16, 19, 21, 22, 27, 28, 29, 32, 33, 34, 36, 37, 40, 47, 52, 56, 60, 63, 65, 67, 75, 83}:
                    grammar_node = BosonGrammarNode()
                    for _ in range(reduce_count):
                        grammar_node.insert(0, symbol_stack.pop())
                    grammar_node.set_reduce_number(statement_index)
                    symbol_stack.append(grammar_node)
                else:
                    raise ValueError('Invalid reduce number: reduce={}'.format(statement_index))
            elif operation_flag == 'a':
                grammar.grammar_tree = symbol_stack[0]
                return grammar
            else:
                raise ValueError('Invalid action: action={}'.format(operation))
        raise RuntimeError('Analyzer unusual exit.')
