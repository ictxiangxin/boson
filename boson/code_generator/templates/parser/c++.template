class {{ configure.boson_option['grammar_node_class_name'] }} {
public:
    {{ configure.boson_option['grammar_node_class_name'] }}() = default;

    explicit {{ configure.boson_option['grammar_node_class_name'] }}(std::string &text) {
        this->set_text(text);
    }

    int get_reduce_number() {
        return this->_reduce_number;
    }

    void set_reduce_number(int reduce_number) {
        this->_reduce_number = reduce_number;
    }

    std::string &get_text() {
        return this->_text;
    }

    void set_text(std::string &text) {
        this->_text = text;
    }

    void append(const {{ configure.boson_option['grammar_node_class_name'] }} &item) {
        this->_children.push_back(item);
    }

    void insert(int index, const {{ configure.boson_option['grammar_node_class_name'] }} &item) {
        this->_children.insert(this->_children.begin() + index, item);
    }

    std::vector<{{ configure.boson_option['grammar_node_class_name'] }}> &children() {
        return this->_children;
    }

    {{ configure.boson_option['grammar_node_class_name'] }} &operator[](int index) {
        return this->_children[index];
    }

private:
    int _reduce_number = {{ configure.boson_grammar_default_reduce_number }};
    std::string _text{};
    std::vector<{{ configure.boson_option['grammar_node_class_name'] }}> _children{};
};


class {{ configure.boson_option['grammar_class_name'] }} {
public:
    {{ configure.boson_option['grammar_class_name'] }}() = default;

    {{ configure.boson_option['grammar_node_class_name'] }} &get_grammar_tree() {
        return this->_grammar_tree;
    }

    void set_grammar_tree({{ configure.boson_option['grammar_node_class_name'] }} &grammar_tree) {
        this->_grammar_tree = grammar_tree;
    }

    int get_error_index() {
        return this->_error_index;
    }

    void set_error_index(int error_index) {
        this->_error_index = error_index;
    }

    int no_error_index() {
        return this->_no_error_index;
    }

private:
    {{ configure.boson_option['grammar_node_class_name'] }} _grammar_tree;
    int _error_index = {{ configure.boson_grammar_no_error_index }};
    int _no_error_index = {{ configure.boson_grammar_no_error_index }};
};

{% if configure.boson_option['generate_semantics_analyzer'] == 'yes' %}
template <class T>
class {{ configure.boson_option['semantics_node_class_name'] }} {
public:
    {{ configure.boson_option['semantics_node_class_name'] }}() = default;

    explicit {{ configure.boson_option['semantics_node_class_name'] }}(T data): _data(data) {};

    static {{ configure.boson_option['semantics_node_class_name'] }} &null_node() {
        static {{ configure.boson_option['semantics_node_class_name'] }} node;
        return node;
    }

    T &get_data() {
        return this->_data;
    }

    void set_data(T data) {
        this->_data = std::move(data);
    }

    int get_reduce_number() {
        return this->_reduce_number;
    }

    void set_reduce_number(int reduce_number) {
        this->_reduce_number = reduce_number;
    }

    const std::string &get_text() {
        return this->_text;
    }

    void set_text(std::string &text) {
        this->_text = text;
    }

    void append(const {{ configure.boson_option['semantics_node_class_name'] }} &item) {
        this->_children.push_back(item);
    }

    void insert(int index, const {{ configure.boson_option['semantics_node_class_name'] }} &item) {
        this->_children.insert(this->_children.begin() + index, item);
    }

    std::vector<{{ configure.boson_option['semantics_node_class_name'] }}> &children() {
        return this->_children;
    }

    {{ configure.boson_option['semantics_node_class_name'] }} &operator[](int index) {
        return this->_children[index];
    }

protected:
    int _reduce_number = -1;
    std::string _text{};
    std::vector<{{ configure.boson_option['semantics_node_class_name'] }}> _children{};
    T _data;
};


{% endif -%}
class {{ configure.boson_option['grammar_analyzer_class_name'] }} {
public:
    {{ configure.boson_option['grammar_analyzer_class_name'] }}() = default;

    {{ configure.boson_option['grammar_class_name'] }} grammar_analysis(std::vector<{{ configure.boson_option['lexical_token_class_name'] }}> token_list) {
        {{ configure.boson_option['grammar_class_name'] }} grammar;
        std::stack<int> analysis_stack;
        std::stack<{{ configure.boson_option['grammar_node_class_name'] }}> symbol_stack;
        analysis_stack.push(0);
        int token_index = 0;
        while (token_index < token_list.size()) {
            {{ configure.boson_option['lexical_token_class_name'] }} &token = token_list[token_index];
            int current_state = analysis_stack.top();
            {%- if configure.boson_option['sparse_table'] == 'yes' %}
            std::string operation = "{{ configure.boson_table_sign_error }}";
            int terminal_index = this->_terminal_index_mapping[token.symbol];
            if (this->_sparse_action_table.count(current_state)) {
                std::unordered_map<int, std::string> &actions = this->_sparse_action_table[current_state];
                if (actions.count(terminal_index)) {
                    operation = actions[terminal_index];
                }
            }
            {%- else %}
            std::string operation = this->_action_table[current_state][this->_terminal_index_mapping[token.symbol]];
            {%- endif %}
            char operation_flag = operation[0];
            if (operation_flag == '{{ configure.boson_table_sign_error }}') {
                grammar.set_error_index(token_index);
                return grammar;
            } else if (operation_flag == '{{ configure.boson_table_sign_shift }}') {
                int state_number = (int) strtol(operation.c_str() + 1, nullptr, 10);
                analysis_stack.push(state_number);
                token_index++;
                {{ configure.boson_option['grammar_node_class_name'] }} grammar_node(token.text);
                symbol_stack.push(grammar_node);
            } else if (operation_flag == '{{ configure.boson_table_sign_reduce }}') {
                int statement_index = (int) strtol(operation.c_str() + 1, nullptr, 10);
                int reduce_count = this->_reduce_symbol_count[statement_index];
                for (int i = 0; i < reduce_count; i++) {
                    analysis_stack.pop();
                }
                current_state = analysis_stack.top();
                int current_non_terminal_index_mapping = this->_reduce_non_terminal_index[statement_index];
                {%- if configure.boson_option['sparse_table'] == 'yes' %}
                int goto_next_state = -1;
                if (this->_sparse_goto_table.count(current_state)) {
                    std::unordered_map<int, int> &goto_table = this->_sparse_goto_table[current_state];
                    if (goto_table.count(current_non_terminal_index_mapping)) {
                        goto_next_state = goto_table[current_non_terminal_index_mapping];
                    }
                }
                {%- else %}
                int goto_next_state = this->_goto_table[current_state][current_non_terminal_index_mapping];
                {%- endif %}
                if (goto_next_state == {{ configure.boson_invalid_goto }}) {
                    throw std::runtime_error("Invalid goto action.");
                }
                analysis_stack.push(goto_next_state);
                {%- if parser.sentence_index_grammar_tuple_mapping %}
                if (this->_sentence_index_grammar_tuple_mapping.count(statement_index)) {
                    std::vector<{{ configure.boson_option['grammar_node_class_name'] }}> symbol_package{};
                    for (int i = 0; i < reduce_count; i++) {
                        symbol_package.insert(symbol_package.begin(), symbol_stack.top());
                        symbol_stack.pop();
                    }
                    {{ configure.boson_option['grammar_node_class_name'] }} grammar_node;
                    for (std::string &node_string : this->_sentence_index_grammar_tuple_mapping[statement_index]) {
                        if (node_string[0] == '{{ configure.boson_grammar_tuple_unpack }}') {
                            int reduce_number = (int) strtol(node_string.c_str() + 1, nullptr, 10);
                            for ({{ configure.boson_option['grammar_node_class_name'] }} &node : symbol_package[reduce_number].children()) {
                                grammar_node.append(node);
                            }
                        } else {
                            int reduce_number = (int) strtol(node_string.c_str(), nullptr, 10);
                            grammar_node.append(symbol_package[reduce_number]);
                        }
                    }
                    grammar_node.set_reduce_number(statement_index);
                    symbol_stack.push(grammar_node);
                {%- endif %}
                {%- if parser.none_grammar_tuple_sentence_index_set %}
                {%- if parser.sentence_index_grammar_tuple_mapping %}
                } else if (this->_none_grammar_tuple_reduce_set.count(statement_index)) {
                {%- else %}
                if (this->_none_grammar_tuple_reduce_set.count(statement_index)) {
                {%- endif %}
                    {{ configure.boson_option['grammar_node_class_name'] }} grammar_node;
                    for (int i = 0; i < reduce_count; i++) {
                        grammar_node.insert(0, symbol_stack.top());
                        symbol_stack.pop();
                    }
                    grammar_node.set_reduce_number(statement_index);
                    symbol_stack.push(grammar_node);
                {%- endif %}
                {%- if parser.none_grammar_tuple_sentence_index_set or parser.none_grammar_tuple_sentence_index_set %}
                } else {
                    throw std::runtime_error("Invalid reduce number.");
                }
                {%- endif %}
            } else if (operation_flag == '{{ configure.boson_table_sign_accept }}') {
                grammar.set_grammar_tree(symbol_stack.top());
                return grammar;
            } else {
                throw std::runtime_error("Invalid action.");
            }
        }
        throw std::runtime_error("Analyzer unusual exit.");
    }

private:
    std::unordered_map<std::string, int>_terminal_index_mapping = {
        {%- for terminal, index in parser.terminal_index_mapping.items() %}
        {"{{ terminal }}", {{ index -}} }
        {%- if not loop.last %},{% endif -%}
        {%- endfor %}
    };
    {% if configure.boson_option['sparse_table'] == 'yes' %}
    std::unordered_map<int, std::unordered_map<int, std::string>> _sparse_action_table = {
        {%- for i, sub_table in parser.sparse_action_table.items() %}
        { {{- i }}, {
        {%- for j, each in sub_table.items() -%}
        { {{- j }}, "{{ each }}"}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
        }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor %}
    };

    std::unordered_map<int, std::unordered_map<int, int>> _sparse_goto_table = {
        {%- for i, sub_table in parser.sparse_goto_table.items() %}
        { {{- i }}, {
        {%- for j, each in sub_table.items() -%}
        { {{- j }}, {{ each -}} }
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
        }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor %}
    };
    {% else %}
    std::vector<std::vector<std::string>> _action_table = {
        {%- for line in parser.action_table %}
        {
            {%- for each in line -%}
            "{{ each }}"
            {%- if not loop.last %}, {% endif -%}
            {%- endfor -%}
        }
        {%- if not loop.last %},{% endif -%}
        {%- endfor %}
    };

    std::vector<std::vector<int>> _goto_table = {
        {%- for line in parser.goto_table %}
        {
            {%- for each in line -%}
            {{ each }}
            {%- if not loop.last %}, {% endif -%}
            {%- endfor -%}
        }
        {%- if not loop.last %},{% endif -%}
        {%- endfor %}
    };

    {%- endif %}
    std::unordered_map<int, std::vector<std::string>> _sentence_index_grammar_tuple_mapping = {
        {%- for sentence_index, grammar_tuple in parser.sentence_index_grammar_tuple_mapping.items() %}
        { {{- sentence_index }}, {
        {%- for node in grammar_tuple -%}
        "{{ node }}"
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
        }}
        {%- if not loop.last %},{% endif -%}
        {%- endfor %}
    };

    std::vector<int> _reduce_symbol_count = {
        {%- for count in parser.reduce_symbol_count -%}
        {{ count }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    };

    std::vector<int> _reduce_non_terminal_index = {
        {%- for index in parser.reduce_non_terminal_index -%}
        {{ index }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    };

    std::set<int> _none_grammar_tuple_reduce_set = {
        {%- for index in parser.none_grammar_tuple_sentence_index_set -%}
        {{ index }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    };
};


{%- if configure.boson_option['generate_semantics_analyzer'] == 'yes' %}


template <class T>
class {{ configure.boson_option['semantics_analyzer_class_name'] }} {
public:
    using semantic_function = std::function<{{ configure.boson_option['semantics_node_class_name'] }}<T>({{ configure.boson_option['semantics_node_class_name'] }}<T> &)>;

    {{ configure.boson_option['semantics_analyzer_class_name'] }}() = default;

    {{ configure.boson_option['semantics_node_class_name'] }}<T> semantics_analysis({{ configure.boson_option['grammar_node_class_name'] }} &grammar_tree) {
        return this->_semantics_analysis(grammar_tree);
    }

    static {{ configure.boson_option['semantics_node_class_name'] }}<T> default_semantics_entity({{ configure.boson_option['semantics_node_class_name'] }}<T> &semantics_node) {
        return semantics_node;
    }

    static {{ configure.boson_option['semantics_node_class_name'] }}<T> naive_semantics_entity({{ configure.boson_option['semantics_node_class_name'] }}<T> &semantics_node) {
        if (semantics_node.children().size() == 1) {
            return semantics_node[0];
        } else {
            return semantics_node;
        }
    }

    void semantics_entity(int reduce_number, semantic_function function) {
        std::string reduce_name = "{{ configure.boson_grammar_name_prefix }}" + std::to_string(reduce_number);
        this->semantics_entity(reduce_name, function);
    }

    void semantics_entity(const char *reduce_name, semantic_function function) {
        std::string reduce_name_string(reduce_name);
        this->semantics_entity(reduce_name_string, function);
    }

    void semantics_entity(std::string &reduce_name, semantic_function function) {
        this->_semantics_entity[reduce_name] = function;
    }

private:
    std::unordered_map<int, std::string> _reduce_number_grammar_name_mapping = {
        {%- for reduce_number, grammar_name in parser.reduce_number_grammar_name_mapping.items() %}
        { {{- reduce_number }}, "{{ grammar_name }}"}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor %}
    };

    std::set<int> _naive_reduce_number_set = {
        {%- for reduce_number in parser.naive_reduce_number_set -%}
        {{ reduce_number }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    };

    std::unordered_map<std::string, semantic_function> _semantics_entity{};

    {{ configure.boson_option['semantics_node_class_name'] }}<T> _semantics_analysis(BosonGrammarNode &grammar_tree) {
        std::string grammar_name{};
        if (this->_reduce_number_grammar_name_mapping.count(grammar_tree.get_reduce_number())) {
            grammar_name = this->_reduce_number_grammar_name_mapping[grammar_tree.get_reduce_number()];
        } else {
            grammar_name = "{{ configure.boson_grammar_name_prefix }}hidden";
        }
        {{ configure.boson_option['semantics_node_class_name'] }}<T> semantics_node;
        for (auto &node: grammar_tree.children()) {
            if (!node.children().empty()) {
                semantics_node.append(this->_semantics_analysis(node));
            } else {
                {{ configure.boson_option['semantics_node_class_name'] }}<T> temp_node;
                temp_node.set_reduce_number(node.get_reduce_number());
                temp_node.set_text(node.get_text());
                semantics_node.append(temp_node);
            }
        }
        if (this->_semantics_entity.count(grammar_name)) {
            return this->_semantics_entity[grammar_name](semantics_node);
        } else if (this->_naive_reduce_number_set.count(grammar_tree.get_reduce_number())) {
            return {{ configure.boson_option['semantics_analyzer_class_name'] }}::naive_semantics_entity(semantics_node);
        } else {
            return {{ configure.boson_option['semantics_analyzer_class_name'] }}::default_semantics_entity(semantics_node);
        }
    }
};
{%- endif %}
