{% if configure.boson_option['code_comment'] == 'yes' -%}
/*
    {{ configure.boson_title }} - {{ configure.boson_description }}

        Author: {{ configure.boson_author }}
        Email:  {{ configure.boson_email }}
        Site:   {{ configure.boson_url }}

    File: "parser.hpp"
    These codes ware generated by the boson C++ code generator.
*/

{% endif -%}
#ifndef _BOSON_PARSER_HPP_
#define _BOSON_PARSER_HPP_

#include <vector>
#include <stack>
#include <set>
#include <unordered_map>
#include "token.hpp"

namespace boson {
    class {{ configure.boson_option['parser_class_name'] }} {
    public:
        {{ configure.boson_option['parser_class_name'] }}() = default;

        int check_pass_index() const {
            return this->_check_pass_index;
        }

        int check(std::vector<{{ configure.boson_option['token_class_name'] }}> token_list) {
            std::stack<int> analysis_stack;
            analysis_stack.push(0);
            int token_index = 0;
            while (token_index < token_list.size()) {
                {{ configure.boson_option['token_class_name'] }} &token = token_list[token_index];
                int current_state = analysis_stack.top();
                {%- if configure.boson_option['parser_sparse_table'] == 'yes' %}
                std::string operation = "{{ configure.boson_table_sign_error }}";
                int terminal_index = this->_terminal_index_mapping[token.symbol];
                if (this->_sparse_action_table.count(current_state)) {
                    std::unordered_map<int, std::string> &actions = this->_sparse_action_table[current_state];
                    if (actions.count(terminal_index)) {
                        operation = actions[terminal_index];
                    }
                }
                {%- else %}
                std::string operation = this->_action_table[current_state][this->_terminal_index_mapping[token.symbol]];
                {%- endif %}
                char operation_flag = operation[0];
                if (operation_flag == '{{ configure.boson_table_sign_error }}') {
                    return token_index;
                } else if (operation_flag == '{{ configure.boson_table_sign_shift }}') {
                    int state_number = (int) strtol(operation.c_str() + 1, nullptr, 10);
                    analysis_stack.push(state_number);
                    token_index++;
                } else if (operation_flag == '{{ configure.boson_table_sign_reduce }}') {
                    int statement_index = (int) strtol(operation.c_str() + 1, nullptr, 10);
                    int reduce_count = this->_reduce_symbol_count[statement_index];
                    for (int i = 0; i < reduce_count; i++) {
                        analysis_stack.pop();
                    }
                    current_state = analysis_stack.top();
                    int current_non_terminal_index_mapping = this->_reduce_non_terminal_index[statement_index];
                    {%- if configure.boson_option['parser_sparse_table'] == 'yes' %}
                    int goto_next_state = -1;
                    if (this->_sparse_goto_table.count(current_state)) {
                        std::unordered_map<int, int> &goto_table = this->_sparse_goto_table[current_state];
                        if (goto_table.count(current_non_terminal_index_mapping)) {
                            goto_next_state = goto_table[current_non_terminal_index_mapping];
                        }
                    }
                    {%- else %}
                    int goto_next_state = this->_goto_table[current_state][current_non_terminal_index_mapping];
                    {%- endif %}
                    if (goto_next_state == {{ configure.boson_invalid_goto }}) {
                        throw std::runtime_error("Invalid goto action.");
                    }
                    analysis_stack.push(goto_next_state);
                } else if (operation_flag == '{{ configure.boson_table_sign_accept }}') {
                    return this->_check_pass_index;
                } else {
                    throw std::runtime_error("Invalid action.");
                }
            }
            throw std::runtime_error("Analyzer unusual exit.");
        }

    private:
        std::unordered_map<std::string, int>_terminal_index_mapping = {
            {%- for terminal, index in parser.terminal_index_mapping.items() %}
            {"{{ terminal }}", {{ index -}} }
            {%- if not loop.last %},{% endif -%}
            {%- endfor %}
        };
        {%- if configure.boson_option['parser_sparse_table'] == 'yes' %}
        std::unordered_map<int, std::unordered_map<int, std::string>> _sparse_action_table = {
            {%- for i, sub_table in parser.sparse_action_table.items() %}
            { {{- i }}, {
            {%- for j, each in sub_table.items() -%}
            { {{- j }}, "{{ each }}"}
            {%- if not loop.last %}, {% endif -%}
            {%- endfor -%}
            }}
            {%- if not loop.last %}, {% endif -%}
            {%- endfor %}
        };
        std::unordered_map<int, std::unordered_map<int, int>> _sparse_goto_table = {
            {%- for i, sub_table in parser.sparse_goto_table.items() %}
            { {{- i }}, {
            {%- for j, each in sub_table.items() -%}
            { {{- j }}, {{ each -}} }
            {%- if not loop.last %}, {% endif -%}
            {%- endfor -%}
            }}
            {%- if not loop.last %}, {% endif -%}
            {%- endfor %}
        };
        {%- else %}
        std::vector<std::vector<std::string>> _action_table = {
            {%- for line in parser.action_table %}
            {
                {%- for each in line -%}
                "{{ each }}"
                {%- if not loop.last %}, {% endif -%}
                {%- endfor -%}
            }
            {%- if not loop.last %},{% endif -%}
            {%- endfor %}
        };
        std::vector<std::vector<int>> _goto_table = {
            {%- for line in parser.goto_table %}
            {
                {%- for each in line -%}
                {{ each }}
                {%- if not loop.last %}, {% endif -%}
                {%- endfor -%}
            }
            {%- if not loop.last %},{% endif -%}
            {%- endfor %}
        };
        {%- endif %}
        std::vector<int> _reduce_symbol_count = {
            {%- for count in parser.reduce_symbol_count -%}
            {{ count }}
            {%- if not loop.last %}, {% endif -%}
            {%- endfor -%}
        };
        std::vector<int> _reduce_non_terminal_index = {
            {%- for index in parser.reduce_non_terminal_index -%}
            {{ index }}
            {%- if not loop.last %}, {% endif -%}
            {%- endfor -%}
        };
        int _check_pass_index = {{ configure.boson_check_pass_index }};
    };
}

#endif

