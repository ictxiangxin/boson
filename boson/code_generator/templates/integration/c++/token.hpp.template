{% if configure.boson_option['code_comment'] == 'yes' -%}
/*
    {{ configure.boson_title }} - {{ configure.boson_description }}

        Author: {{ configure.boson_author }}
        Email:  {{ configure.boson_email }}
        Site:   {{ configure.boson_url }}

    File: "token.hpp"
    These codes ware generated by the boson C++ code generator.
*/

{% endif -%}
#ifndef _BOSON_TOKEN_HPP_
#define _BOSON_TOKEN_HPP_

namespace boson {
    using char_t = {{ 'char16_t ' if configure.boson_option['lexer_unicode'] == 'yes' else 'char' }};
    using string_t = {{ 'std::u16string' if configure.boson_option['lexer_unicode'] == 'yes' else 'std::string' }};

    class {{ configure.boson_option['token_class_name'] }} {
    public:
        {{ configure.boson_option['token_class_name'] }}() = default;

        {{ configure.boson_option['token_class_name'] }}(const string_t &text, const int line, std::string &symbol): text(text), line(line), symbol(symbol) {}

        {{ configure.boson_option['token_class_name'] }}(const char_t *text, const int line, const char *symbol): text(text), line(line), symbol(symbol) {}

        {{ configure.boson_option['token_class_name'] }}(const char_t *text, const int line, std::string &symbol): text(text), line(line), symbol(symbol) {}

        {{ configure.boson_option['token_class_name'] }}(const string_t &text, const int line, const char *symbol): text(text), line(line), symbol(symbol) {}

        string_t text{};
        int line = -1;
        std::string symbol{};
    };
}

#endif

