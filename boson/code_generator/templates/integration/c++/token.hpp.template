{% if boson_code_option['generate']['comment'] == 'True' -%}
/*
    {{ configure.boson_title }} - {{ configure.boson_description }}

        Author: {{ configure.boson_author }}
        Email:  {{ configure.boson_email }}
        Site:   {{ configure.boson_url }}

    File: "token.hpp"
    These codes ware generated by the boson C++ code generator.
*/

{% endif -%}
#ifndef _BOSON_TOKEN_HPP_
#define _BOSON_TOKEN_HPP_

namespace boson {
    using char_t = {{ 'char16_t ' if boson_code_option['lexer']['unicode'] == 'True' else 'char' }};
    using string_t = {{ 'std::u16string' if boson_code_option['lexer']['unicode'] == 'True' else 'std::string' }};

    class {{ boson_code_option['class_name']['token'] }} {
    public:
        {{ boson_code_option['class_name']['token'] }}() = default;

        {{ boson_code_option['class_name']['token'] }}(const string_t &text, const int line, std::string &symbol): text(text), line(line), symbol(symbol) {}

        {{ boson_code_option['class_name']['token'] }}(const char_t *text, const int line, const char *symbol): text(text), line(line), symbol(symbol) {}

        {{ boson_code_option['class_name']['token'] }}(const char_t *text, const int line, std::string &symbol): text(text), line(line), symbol(symbol) {}

        {{ boson_code_option['class_name']['token'] }}(const string_t &text, const int line, const char *symbol): text(text), line(line), symbol(symbol) {}

        string_t text{};
        int line = -1;
        std::string symbol{};
    };
}

#endif

