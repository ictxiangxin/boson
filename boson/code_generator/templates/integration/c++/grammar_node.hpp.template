{% if configure.boson_option['code_comment'] == 'yes' -%}
/*
    {{ configure.boson_title }} - {{ configure.boson_description }}

        Author: {{ configure.boson_author }}
        Email:  {{ configure.boson_email }}
        Site:   {{ configure.boson_url }}

    File: "grammar_node.hpp"
    These codes ware generated by the boson C++ code generator.
*/

{% endif -%}
#ifndef _BOSON_GRAMMAR_NODE_HPP_
#define _BOSON_GRAMMAR_NODE_HPP_

namespace boson {
    class {{ configure.boson_option['grammar_node_class_name'] }} {
    public:
        {{ configure.boson_option['grammar_node_class_name'] }}() = default;

        explicit {{ configure.boson_option['grammar_node_class_name'] }}(std::string &text) {
            this->set_text(text);
        }

        int get_reduce_number() {
            return this->_reduce_number;
        }

        void set_reduce_number(int reduce_number) {
            this->_reduce_number = reduce_number;
        }

        std::string &get_text() {
            return this->_text;
        }

        void set_text(std::string &text) {
            this->_text = text;
        }

        void append(const {{ configure.boson_option['grammar_node_class_name'] }} &item) {
            this->_children.push_back(item);
        }

        void insert(int index, const {{ configure.boson_option['grammar_node_class_name'] }} &item) {
            this->_children.insert(this->_children.begin() + index, item);
        }

        std::vector<{{ configure.boson_option['grammar_node_class_name'] }}> &children() {
            return this->_children;
        }

        {{ configure.boson_option['grammar_node_class_name'] }} &operator[](int index) {
            return this->_children[index];
        }

    private:
        int _reduce_number = {{ configure.boson_grammar_default_reduce_number }};
        std::string _text{};
        std::vector<{{ configure.boson_option['grammar_node_class_name'] }}> _children{};
    };
}

#endif

