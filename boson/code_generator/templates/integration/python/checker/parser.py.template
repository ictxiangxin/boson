{% if boson_code_option['generator']['comment'] == 'True' -%}
"""
    {{ configure.boson_title }} - {{ configure.boson_description }}

        Author: {{ configure.boson_author }}
        Email:  {{ configure.boson_email }}
        Site:   {{ configure.boson_url }}

    File: "parser.py"
    These codes ware generated by the boson Python3 code generator.
"""

{% endif -%}
from typing import Dict, List, Tuple

from .token import {{ boson_code_option['class_name']['token'] }}


class {{ boson_code_option['class_name']['parser'] }}:
    def __init__(self):
        self.__terminal_index_mapping: Dict[str, int] = {
            {%- for terminal, index in parser.terminal_index_mapping.items() %}
            '{{ terminal }}': {{ index }}
            {%- if not loop.last %},{% endif -%}
            {%- endfor %}
        }
        {%- if boson_code_option['parser']['sparse_table'] == 'True' %}
        self.__sparse_action_table: Dict[int, Dict[int, str]] = {
            {%- for i, sub_table in parser.sparse_action_table.items() %}
            {{ i }}: {{ sub_table }}
            {%- if not loop.last %},{% endif -%}
            {%- endfor %}
        }
        self.__sparse_goto_table: Dict[int, Dict[int, int]] = {
            {%- for i, sub_table in parser.sparse_goto_table.items() %}
            {{ i }}: {{ sub_table }}
            {%- if not loop.last %},{% endif -%}
            {%- endfor %}
        }
        {%- else %}
        self.__action_table: List[List[str]] = [
            {%- for line in parser.action_table %}
            {{ line }}
            {%- if not loop.last %},{% endif -%}
            {%- endfor %}
        ]
        self.__goto_table: List[List[int]] = [
            {%- for line in parser.goto_table %}
            {{ line }}
            {%- if not loop.last %},{% endif -%}
            {%- endfor %}
        ]
        {%- endif %}
        self.__reduce_symbol_count: List[int] = {{ parser.reduce_symbol_count }}
        self.__reduce_non_terminal_index: List[int] = {{ parser.reduce_non_terminal_index }}
        self.__check_pass_index: int = {{ configure.boson_check_pass_index }}

    def check_pass_index(self) -> int:
        return self.__check_pass_index

    def check(self, token_list: List[{{ boson_code_option['class_name']['token'] }}]) -> int:
        analysis_stack: List[int] = [0]
        token_index: int = 0
        while token_index < len(token_list):
            token: {{ boson_code_option['class_name']['token'] }} = token_list[token_index]
            current_state: int = analysis_stack[-1]
            if token.symbol in self.__terminal_index_mapping:
            {%- if boson_code_option['parser']['sparse_table'] == 'True' %}
                operation: str = self.__sparse_action_table.get(current_state, {}).get(self.__terminal_index_mapping[token.symbol], '{{ configure.boson_table_sign_error }}')
            {%- else %}
                operation: str = self.__action_table[current_state][self.__terminal_index_mapping[token.symbol]]
            {%- endif %}
            else:
                operation: str = '{{ configure.boson_table_sign_error }}'
            operation_flag = operation[0]
            if operation_flag == '{{ configure.boson_table_sign_error }}':
                return token_index
            elif operation_flag == '{{ configure.boson_table_sign_shift }}':
                analysis_stack.append(int(operation[1:]))
                token_index += 1
            elif operation_flag == '{{ configure.boson_table_sign_reduce }}':
                statement_index: int = int(operation[1:])
                reduce_count: int = self.__reduce_symbol_count[statement_index]
                for _ in range(reduce_count):
                    analysis_stack.pop()
                current_state: int = analysis_stack[-1]
                current_non_terminal_index = self.__reduce_non_terminal_index[statement_index]
                {%- if boson_code_option['parser']['sparse_table'] == 'True' %}
                goto_next_state: int = self.__sparse_goto_table.get(current_state, {}).get(current_non_terminal_index, {{ configure.boson_invalid_goto }})
                {%- else %}
                goto_next_state: int = self.__goto_table[current_state][current_non_terminal_index]
                {%- endif %}
                if goto_next_state == {{ configure.boson_invalid_goto }}:
                    raise ValueError('Invalid goto action: state={}, non-terminal={}'.format(current_state, current_non_terminal_index))
                analysis_stack.append(goto_next_state)
            elif operation_flag == '{{ configure.boson_table_sign_accept }}':
                return self.__check_pass_index
            else:
                raise ValueError('Invalid action: action={}'.format(operation))
        raise RuntimeError('Analyzer unusual exit.')

