{% if configure.boson_option['code_comment'] == 'yes' -%}
"""
    {{ configure.boson_title }} - {{ configure.boson_description }}

        Author: {{ configure.boson_author }}
        Email:  {{ configure.boson_email }}
        Site:   {{ configure.boson_url }}

    File: "interpreter.py"
    These codes ware generated by the boson Python3 code generator.
"""

{% endif -%}
from typing import Dict, Set

from .semantic_node import {{ configure.boson_option['semantic_node_class_name'] }}
from .grammar_node import {{ configure.boson_option['grammar_node_class_name'] }}


class {{ configure.boson_option['interpreter_class_name'] }}:
    def __init__(self):
        self.__reduce_number_grammar_name_mapping: Dict[int, str] = {
            {%- for reduce_number, grammar_name in parser.reduce_number_grammar_name_mapping.items() %}
            {{ reduce_number }}: '{{ grammar_name }}'
            {%- if not loop.last %},{% endif -%}
            {%- endfor %}
        }
        self.__naive_reduce_number_set: Set[int] = {{ parser.naive_reduce_number_set }}
        self.__semantic_action_mapping: Dict[str, callable] = {}

    def __semantics_analysis(self, grammar_tree: {{ configure.boson_option['grammar_node_class_name'] }}) -> {{ configure.boson_option['semantic_node_class_name'] }}:
        if grammar_tree.get_reduce_number() in self.__reduce_number_grammar_name_mapping:
            grammar_name: str = self.__reduce_number_grammar_name_mapping[grammar_tree.get_reduce_number()]
        else:
            grammar_name: str = '{{ configure.boson_grammar_name_prefix }}hidden'
        semantic_node = {{ configure.boson_option['semantic_node_class_name'] }}()
        if len(grammar_tree.children()) == 0:
            semantic_node.set_reduce_number(grammar_tree.get_reduce_number())
            semantic_node.set_text(grammar_tree.get_text())
        else:
            for grammar_node in grammar_tree.children():
                semantic_node.append(self.__semantics_analysis(grammar_node))
        if grammar_name in self.__semantic_action_mapping:
            return self.__semantic_action_mapping[grammar_name](semantic_node)
        elif grammar_tree.get_reduce_number() in self.__naive_reduce_number_set:
            if len(semantic_node.children()) == 0:
                return {{ configure.boson_option['semantic_node_class_name'] }}.null_node()
            elif len(semantic_node.children()) == 1:
                return semantic_node[0]
            else:
                return semantic_node
        else:
            return semantic_node

    def execute(self, grammar_tree: {{ configure.boson_option['grammar_node_class_name'] }}) -> {{ configure.boson_option['semantic_node_class_name'] }}:
        return self.__semantics_analysis(grammar_tree)

    def register_action(self, name: str) -> callable:
        def decorator(f: callable):
            self.__semantic_action_mapping[name] = f
            return f
        return decorator

