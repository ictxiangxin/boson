{% if configure.boson_option['code_comment'] == 'yes' -%}
"""
    {{ configure.boson_title }} - {{ configure.boson_description }}

        Author: {{ configure.boson_author }}
        Email:  {{ configure.boson_email }}
        Site:   {{ configure.boson_url }}

    File: "interpreter.py"
    These codes ware generated by the boson Python3 code generator.
"""

{% endif -%}
from .grammar_node import {{ configure.boson_option['grammar_node_class_name'] }}


class {{ configure.boson_option['interpreter_class_name'] }}:
    def __init__(self):
        self.__reduce_number_grammar_name_mapping: dict = {
            {%- for reduce_number, grammar_name in parser.reduce_number_grammar_name_mapping.items() %}
            {{ reduce_number }}: '{{ grammar_name }}'
            {%- if not loop.last %},{% endif -%}
            {%- endfor %}
        }
        self.__naive_reduce_number_set: set = {{ parser.naive_reduce_number_set }}
        self.__semantic_action_mapping: dict = {}

    def __semantic_analysis(self, grammar_tree: {{ configure.boson_option['grammar_node_class_name'] }}):
        if grammar_tree.reduce_number in self.__reduce_number_grammar_name_mapping:
            grammar_name = self.__reduce_number_grammar_name_mapping[grammar_tree.reduce_number]
        else:
            grammar_name = '{{ configure.boson_grammar_name_prefix }}hidden'
        semantic_node_list = []
        for grammar_node in grammar_tree.data():
            if isinstance(grammar_node, {{ configure.boson_option['grammar_node_class_name'] }}):
                semantic_node = self.__semantic_analysis(grammar_node)
            else:
                semantic_node = grammar_node
            semantic_node_list.append(semantic_node)
        if grammar_name in self.__semantic_action_mapping:
            return self.__semantic_action_mapping[grammar_name](semantic_node_list)
        elif grammar_tree.reduce_number in self.__naive_reduce_number_set:
            if len(semantic_node_list) == 0:
                return None
            elif len(semantic_node_list) == 1:
                return semantic_node_list[0]
            else:
                return semantic_node_list
        else:
            return semantic_node_list

    def execute(self, grammar_tree: {{ configure.boson_option['grammar_node_class_name'] }}):
        return self.__semantic_analysis(grammar_tree)

    def register_action(self, name: str) -> callable:
        def decorator(f: callable):
            self.__semantic_action_mapping[name] = f
            return f
        return decorator

