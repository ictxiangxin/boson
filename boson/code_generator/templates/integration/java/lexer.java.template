{% if configure.boson_option['code_comment'] == 'yes' -%}
/*
    {{ configure.boson_title }} - {{ configure.boson_description }}

        Author: {{ configure.boson_author }}
        Email:  {{ configure.boson_email }}
        Site:   {{ configure.boson_url }}

    File: "{{ configure.boson_option['lexer_class_name'] }}.java"
    These codes ware generated by the boson Java code generator.
*/

{% endif -%}
package boson;

import java.util.function.Function;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

{% if configure.boson_option['lexer_compact_table'] == 'yes' -%}
class LexerRange {
    public char start;
    public char end;

    LexerRange(char start, char end) {
        this.start = start;
        this.end = end;
    }

    static LexerRange of(char start, char end) {
        return new LexerRange(start, end);
    }
}

class CompactTable {
    public int attribute;
    public Set<Character> characterSet;
    public List<LexerRange> rangeList;
    public int nextState;

    CompactTable(int attribute, Set<Character> characterSet, List<LexerRange> rangeList, int nextState) {
        this.attribute = attribute;
        this.characterSet = characterSet;
        this.rangeList = rangeList;
        this.nextState = nextState;
    }

    static CompactTable of(int attribute, Set<Character> characterSet, List<LexerRange> rangeList, int nextState) {
        return new CompactTable(attribute, characterSet, rangeList, nextState);
    }
}
{%- else -%}
class AugmentedTable {
    public int wildcard;
    public Map<Character, Integer> moveTable;

    AugmentedTable(int wildcard, Map<Character, Integer> moveTable) {
        this.wildcard = wildcard;
        this.moveTable = moveTable;
    }

    static AugmentedTable of(int wildcard, Map<Character, Integer> moveTable) {
        return new AugmentedTable(wildcard, moveTable);
    }
}
{%- endif %}

public class {{ configure.boson_option['lexer_class_name'] }} {
    public {{ configure.boson_option['lexer_class_name'] }}() {
    }

    public List<{{ configure.boson_option['token_class_name'] }}> tokenList() {
        return this._tokenList;
    }

    public int line() {
        return this._line;
    }

    public void skip() {
        this._skip = true;
    }

    public void newline() {
        this._line++;
    }

    public int errorIndex() {
        return this._errorIndex;
    }

    public int noErrorIndex() {
        return this._noErrorIndex;
    }

    public int tokenize(String text) throws Exception {
        this._tokenList.clear();
        this._line = {{ configure.boson_lexical_start_line }};
        int state = this._startState;
        StringBuilder tokenString = new StringBuilder();
        int index = 0;
        while (index < text.length()) {
            char character = text.charAt(index);
            index++;
            boolean getToken = false;
            if (this._nonGreedyStateSet.contains(state)) {
                getToken = true;
            }
            {%- if configure.boson_option['lexer_compact_table'] == 'yes' %}
            if (this._compactMoveTable.containsKey(state)) {
                List<CompactTable> stateMoveTable = this._compactMoveTable.get(state);
                int i;
                for (i = 0; i < stateMoveTable.size(); i++) {
                    CompactTable compactTable = stateMoveTable.get(i);
                    int attribute = compactTable.attribute;
                    Set<Character> characterSet = compactTable.characterSet;
                    List<LexerRange> rangeList = compactTable.rangeList;
                    int nextState = compactTable.nextState;
                    boolean condition;
                    if (attribute == 2) {
                        condition = !characterSet.contains(character);
                        for (LexerRange range : rangeList) {
                            condition &= character < range.start || character > range.end;
                        }
                    } else {
                        condition = characterSet.contains(character);
                        if (attribute == 1 && !this._characterSet.contains(character)) {
                            condition = true;
                        }
                        for (LexerRange range : rangeList) {
                            if (condition || (range.start <= character && character <= range.end)) {
                                condition = true;
                                break;
                            }
                        }
                    }
                    if (condition) {
                        tokenString.append(character);
                        state = nextState;
                        break;
                    }
                }
                if (i == stateMoveTable.size()) {
            {%- else %}
            if (this._moveTable.containsKey(state)) {
                AugmentedTable augmentedMoveTable = this._moveTable.get(state);
                int wildcard = augmentedMoveTable.wildcard;
                Map<Character, Integer> characterMoveTable = augmentedMoveTable.moveTable;
                if (characterMoveTable.containsKey(character)) {
                    tokenString.append(character);
                    state = characterMoveTable.get(character);
                } else if (wildcard != -1 && !this._characterSet.contains(character)) {
                    tokenString.append(character);
                    state = wildcard;
                } else {
            {%- endif %}
                    if (this._endStateSet.contains(state)) {
                        getToken = true;
                    } else {
                        this._errorIndex = index - 1;
                        return this._errorIndex;
                    }
                }
            } else {
                if (this._endStateSet.contains(state)) {
                    getToken = true;
                } else {
                    this._errorIndex = index - 1;
                    return this._errorIndex;
                }
            }
            if (getToken) {
                this._generateToken(state, tokenString.toString());
                tokenString = new StringBuilder();
                state = this._startState;
                index--;
            }
        }
        if (this._endStateSet.contains(state)) {
            this._generateToken(state, tokenString.toString());
        } else {
            this._errorIndex = index - 1;
            return this._errorIndex;
        }
        this._tokenList.add(new {{ configure.boson_option['token_class_name'] }}("", this._line, "{{ configure.boson_end_symbol }}"));
        return this._errorIndex;
    }

    void registerFunction(String functionName, Function<String, String> function) {
        this._lexicalFunction.put(functionName, function);
    }

    private final List<{{ configure.boson_option['token_class_name'] }}> _tokenList = new ArrayList<>();
    private int _line = {{ configure.boson_lexical_start_line }};
    private int _errorIndex = {{ configure.boson_lexical_no_error_index }};
    private int _noErrorIndex = {{ configure.boson_lexical_no_error_index }};
    private boolean _skip = {{ 'true' if configure.boson_lexical_default_skip else 'false' }};
    {%- if configure.boson_option['lexer_compact_table'] == 'yes' %}
    private final Map<Integer, List<CompactTable>> _compactMoveTable = Map.ofEntries(
        {%- for state, stateMoveTable in lexer.compact_move_table.items() %}
        Map.entry({{ state }}, List.of(
            {%- for each in stateMoveTable %}
            CompactTable.of({{ each[0] }}, Set.of({%- for character in each[1] -%}
                '{{ '%s' % character.encode('unicode-escape').decode() }}'
            {%- if not loop.last %}, {% endif -%}
            {%- endfor -%}), List.of({%- for character_range in each[2] -%}
                LexerRange.of('{{ '%s' % character_range[0].encode('unicode-escape').decode() }}', '{{ '%s' % character_range[1].encode('unicode-escape').decode() }}')
            {%- if not loop.last %}, {% endif -%}
            {%- endfor -%}), {{ each[3] }})
            {%- if not loop.last %},{% endif -%}
            {%- endfor %}
        ))
        {%- if not loop.last %},{% endif -%}
        {%- endfor %}
    );
    {%- else %}
    private final Map<Integer, AugmentedTable> _moveTable = Map.ofEntries(
        {%- for state, stateMoveTable in lexer.move_table.items() %}
        Map.entry({{ state }}, AugmentedTable.of({{ stateMoveTable.get(True, -1) }}, Map.ofEntries(
            {%- for character, to_state in stateMoveTable.items() -%}
            {%- if character != True -%}
            Map.entry('{{ '%s' % character.encode('unicode-escape').decode() }}', {{ to_state }})
            {%- if not loop.last %}, {% endif -%}
            {%- endif -%}
            {%- endfor -%}
        )))
        {%- if not loop.last %},{% endif -%}
        {%- endfor %}
    );
    {%- endif %}
    private final Set<Character> _characterSet = Set.of(
        {%- for character in lexer.character_set -%}
            '{{ '%s' % character.encode('unicode-escape').decode() }}'
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    );
    private final int _startState = {{ lexer.start_state }};
    private final Set<Integer> _endStateSet = Set.of(
        {%- for state in lexer.end_state_set -%}
            {{ state }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    );
    private final Map<Integer, String> _lexicalSymbolMapping = Map.ofEntries(
        {%- for state, symbol in lexer.lexical_symbol_mapping.items() %}
        Map.entry({{ state }}, "{{ symbol }}")
        {%- if not loop.last %},{% endif -%}
        {%- endfor %}
    );
    private final Set<Integer> _nonGreedyStateSet = Set.of(
        {%- for state in lexer.non_greedy_state_set -%}
            {{ state }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    );
    private final Map<String, List<String>> _symbolFunctionMapping = Map.ofEntries(
        {%- for symbol, function_list in lexer.symbol_function_mapping.items() %}
        Map.entry("{{ symbol }}", List.of(
            {%- for function in function_list -%}
            "{{ function }}"
            {%- if not loop.last %},{% endif -%}
            {%- endfor -%}
        ))
        {%- if not loop.last %},{% endif -%}
        {%- endfor %}
    );
    private final Map<String, Function<String, String>> _lexicalFunction = new HashMap<>();

    private String _invokeLexicalFunction(String symbol, String tokenString) {
        this._skip = {{ 'true' if configure.boson_lexical_default_skip else 'false' }};
        if (this._symbolFunctionMapping.containsKey(symbol)) {
            for (String function : this._symbolFunctionMapping.get(symbol)) {
                if (this._lexicalFunction.containsKey(function)) {
                    tokenString = this._lexicalFunction.get(function).apply(tokenString);
                } else if (function.equals("skip")) {
                    this.skip();
                } else if (function.equals("newline")) {
                    this.newline();
                }
            }
        }
        return tokenString;
    }

    private void _generateToken(int state, String tokenString) {
        String symbol = this._lexicalSymbolMapping.getOrDefault(state, "{{ configure.boson_default_symbol }}");
        tokenString = this._invokeLexicalFunction(symbol, tokenString);
        if (!this._skip) {
            this._tokenList.add(new {{ configure.boson_option['token_class_name'] }}(tokenString, this._line, symbol));
        }
    }
}

