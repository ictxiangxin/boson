{% if boson_code_option['generate']['comment'] == 'True' -%}
/*
    {{ configure.boson_title }} - {{ configure.boson_description }}

        Author: {{ configure.boson_author }}
        Email:  {{ configure.boson_email }}
        Site:   {{ configure.boson_url }}

    File: "{{ boson_code_option['class_name']['parser'] }}.java"
    These codes ware generated by the boson Java code generator.
*/

{% endif -%}
package boson;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;

public class {{ boson_code_option['class_name']['parser'] }} {
    public {{ boson_code_option['class_name']['parser'] }}() {
    }

    public int checkPassIndex() {
        return this._checkPassIndex;
    }

    public int check(List<{{ boson_code_option['class_name']['token'] }}> tokenList) throws Exception {
        Stack<Integer> analysisStack = new Stack<>();
        analysisStack.push(0);
        int tokenIndex = 0;
        while (tokenIndex < tokenList.size()) {
            {{ boson_code_option['class_name']['token'] }} token = tokenList.get(tokenIndex);
            int currentState = analysisStack.peek();
            String operation = "{{ configure.boson_table_sign_error }}";
            if (this._terminalIndexMapping.containsKey(token.symbol)) {
            {%- if boson_code_option['parser']['sparse_table'] == 'True' %}
                int terminalIndex = this._terminalIndexMapping.get(token.symbol);
                if (this._sparseActionTable.containsKey(currentState)) {
                    Map<Integer, String> actions = this._sparseActionTable.get(currentState);
                    if (actions.containsKey(terminalIndex)) {
                        operation = actions.get(terminalIndex);
                    }
                }
            {%- else %}
                operation = this._actionTable.get(currentState).get(this._terminalIndexMapping.get(token.symbol));
            {%- endif %}
            }
            char operationFlag = operation.charAt(0);
            if (operationFlag == '{{ configure.boson_table_sign_error }}') {
                return tokenIndex;
            } else if (operationFlag == '{{ configure.boson_table_sign_shift }}') {
                analysisStack.push(Integer.parseInt(operation.substring(1)));
                tokenIndex++;
            } else if (operationFlag == '{{ configure.boson_table_sign_reduce }}') {
                int statementIndex = Integer.parseInt(operation.substring(1));
                int reduceCount = this._reduceSymbolCount.get(statementIndex);
                for (int i = 0; i < reduceCount; i++) {
                    analysisStack.pop();
                }
                currentState = analysisStack.peek();
                int currentNonTerminalIndexMapping = this._reduceNonTerminalIndex.get(statementIndex);
                {%- if boson_code_option['parser']['sparse_table'] == 'True' %}
                int gotoNextState = -1;
                if (this._sparseGotoTable.containsKey(currentState)) {
                    Map<Integer, Integer> gotoTable = this._sparseGotoTable.get(currentState);
                    if (gotoTable.containsKey(currentNonTerminalIndexMapping)) {
                        gotoNextState = gotoTable.get(currentNonTerminalIndexMapping);
                    }
                }
                {%- else %}
                int gotoNextState = this._gotoTable.get(currentState).get(currentNonTerminalIndexMapping);
                {%- endif %}
                if (gotoNextState == {{ configure.boson_invalid_goto }}) {
                    throw new Exception("Invalid goto action.");
                }
                analysisStack.push(gotoNextState);
            } else if (operationFlag == '{{ configure.boson_table_sign_accept }}') {
                return this._checkPassIndex;
            } else {
                throw new Exception("Invalid action.");
            }
        }
        throw new Exception("Analyzer unusual exit.");
    }

    private final Map<String, Integer> _terminalIndexMapping = Map.ofEntries(
        {%- for terminal, index in parser.terminal_index_mapping.items() %}
        Map.entry("{{ terminal }}", {{ index }})
        {%- if not loop.last %},{% endif -%}
        {%- endfor %}
    );
    {%- if boson_code_option['parser']['sparse_table'] == 'True' %}
    private final Map<Integer, Map<Integer, String>> _sparseActionTable = Map.ofEntries(
        {%- for i, sub_table in parser.sparse_action_table.items() %}
        Map.entry({{ i }}, Map.ofEntries(
        {%- for j, each in sub_table.items() -%}
        Map.entry({{ j }}, "{{ each }}")
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
        ))
        {%- if not loop.last %}, {% endif -%}
        {%- endfor %}
    );
    private final Map<Integer, Map<Integer, Integer>> _sparseGotoTable = Map.ofEntries(
        {%- for i, sub_table in parser.sparse_goto_table.items() %}
        Map.entry({{ i }}, Map.ofEntries(
        {%- for j, each in sub_table.items() -%}
        Map.entry({{ j }}, {{ each }})
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
        ))
        {%- if not loop.last %}, {% endif -%}
        {%- endfor %}
    );
    {%- else %}
    private final List<List<String>> _actionTable = List.of(
        {%- for line in parser.action_table %}
        List.of(
            {%- for each in line -%}
            "{{ each }}"
            {%- if not loop.last %}, {% endif -%}
            {%- endfor -%}
        )
        {%- if not loop.last %},{% endif -%}
        {%- endfor %}
    );
    private final List<List<Integer>> _gotoTable = List.of(
        {%- for line in parser.goto_table %}
        List.of(
            {%- for each in line -%}
            {{ each }}
            {%- if not loop.last %}, {% endif -%}
            {%- endfor -%}
        )
        {%- if not loop.last %},{% endif -%}
        {%- endfor %}
    );
    {%- endif %}
    private final List<Integer> _reduceSymbolCount = List.of(
        {%- for count in parser.reduce_symbol_count -%}
        {{ count }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    );
    private final List<Integer> _reduceNonTerminalIndex = List.of(
        {%- for index in parser.reduce_non_terminal_index -%}
        {{ index }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    );
    int _checkPassIndex = {{ configure.boson_check_pass_index }};
}

