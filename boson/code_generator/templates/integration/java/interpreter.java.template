{% if boson_code_option['generate']['comment'] == 'True' -%}
/*
    {{ configure.boson_title }} - {{ configure.boson_description }}

        Author: {{ configure.boson_author }}
        Email:  {{ configure.boson_email }}
        Site:   {{ configure.boson_url }}

    File: "{{ boson_code_option['class_name']['interpreter'] }}.java"
    These codes ware generated by the boson Java code generator.
*/

{% endif -%}
package boson;

import java.util.function.Function;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class {{ boson_code_option['class_name']['interpreter'] }}<T> {
    public {{ boson_code_option['class_name']['interpreter'] }}() {
    }

    public {{ boson_code_option['class_name']['semantic_node'] }}<T> execute({{ boson_code_option['class_name']['grammar_node'] }} grammarTree) {
        return this._semanticsAnalysis(grammarTree);
    }

    public void registerAction(String reduceName, Function<{{ boson_code_option['class_name']['semantic_node'] }}<T>, {{ boson_code_option['class_name']['semantic_node'] }}<T>> function) {
        this._semanticActionMapping.put(reduceName, function);
    }

    private final Map<Integer, String> _reduceNumberGrammarNameMapping = Map.ofEntries(
        {%- for reduce_number, grammarName in parser.reduce_number_grammar_name_mapping.items() %}
        Map.entry({{ reduce_number }}, "{{ grammarName }}")
        {%- if not loop.last %}, {% endif -%}
        {%- endfor %}
    );
    private final Set<Integer> _naiveReduceNumberSet = Set.of(
        {%- for reduce_number in parser.naive_reduce_number_set -%}
        {{ reduce_number }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    );
    private final Map<String, Function<{{ boson_code_option['class_name']['semantic_node'] }}<T>, {{ boson_code_option['class_name']['semantic_node'] }}<T>>> _semanticActionMapping = new HashMap<>();

    private {{ boson_code_option['class_name']['semantic_node'] }}<T> _semanticsAnalysis({{ boson_code_option['class_name']['grammar_node'] }} grammarTree) {
        String grammarName = this._reduceNumberGrammarNameMapping.getOrDefault(grammarTree.getReduceNumber(), "{{ configure.boson_grammar_name_prefix }}hidden");
        {{ boson_code_option['class_name']['semantic_node'] }}<T> semanticNode = new {{ boson_code_option['class_name']['semantic_node'] }}<>();
        if (grammarTree.children().isEmpty()) {
            semanticNode.setReduceNumber(grammarTree.getReduceNumber());
            semanticNode.setText(grammarTree.getText());
        } else {
            for ({{ boson_code_option['class_name']['grammar_node'] }} grammarNode : grammarTree.children()) {
                semanticNode.append(this._semanticsAnalysis(grammarNode));
            }
        }
        if (this._semanticActionMapping.containsKey(grammarName)) {
            return this._semanticActionMapping.get(grammarName).apply(semanticNode);
        } else if (this._naiveReduceNumberSet.contains(grammarTree.getReduceNumber())) {
            if (semanticNode.children().isEmpty()) {
                return {{ boson_code_option['class_name']['semantic_node'] }}<T>.nullNode();
            } else if (semanticNode.children().size() === 1) {
                return semanticNode.get(0);
            } else {
                return semanticNode;
            }
        } else {
            return semanticNode;
        }
    }
}

