{% if configure.boson_option['code_comment'] == 'yes' -%}
/*
    {{ configure.boson_title }} - {{ configure.boson_description }}

        Author: {{ configure.boson_author }}
        Email:  {{ configure.boson_email }}
        Site:   {{ configure.boson_url }}

    File: "{{ configure.boson_option['interpreter_class_name'] }}.java"
    These codes ware generated by the boson Java code generator.
*/

{% endif -%}
package boson;

import java.util.function.Function;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class {{ configure.boson_option['interpreter_class_name'] }}<T> {
    public {{ configure.boson_option['interpreter_class_name'] }}() {
    }

    public {{ configure.boson_option['semantic_node_class_name'] }}<T> execute({{ configure.boson_option['grammar_node_class_name'] }} grammarTree) {
        return this._semanticsAnalysis(grammarTree);
    }

    public void registerAction(String reduceName, Function<{{ configure.boson_option['semantic_node_class_name'] }}<T>, {{ configure.boson_option['semantic_node_class_name'] }}<T>> function) {
        this._semanticActionMapping.put(reduceName, function);
    }

    private final Map<Integer, String> _reduceNumberGrammarNameMapping = Map.ofEntries(
        {%- for reduce_number, grammarName in parser.reduce_number_grammar_name_mapping.items() %}
        Map.entry({{ reduce_number }}, "{{ grammarName }}")
        {%- if not loop.last %}, {% endif -%}
        {%- endfor %}
    );
    private final Set<Integer> _naiveReduceNumberSet = Set.of(
        {%- for reduce_number in parser.naive_reduce_number_set -%}
        {{ reduce_number }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    );
    private final Map<String, Function<{{ configure.boson_option['semantic_node_class_name'] }}<T>, {{ configure.boson_option['semantic_node_class_name'] }}<T>>> _semanticActionMapping = new HashMap<>();

    private {{ configure.boson_option['semantic_node_class_name'] }}<T> _semanticsAnalysis({{ configure.boson_option['grammar_node_class_name'] }} grammarTree) {
        String grammarName = this._reduceNumberGrammarNameMapping.getOrDefault(grammarTree.getReduceNumber(), "{{ configure.boson_grammar_name_prefix }}hidden");
        {{ configure.boson_option['semantic_node_class_name'] }}<T> semanticsNode = new {{ configure.boson_option['semantic_node_class_name'] }}<>();
        for ({{ configure.boson_option['grammar_node_class_name'] }} node : grammarTree.children()) {
            if (!node.children().isEmpty()) {
                semanticsNode.append(this._semanticsAnalysis(node));
            } else {
                {{ configure.boson_option['semantic_node_class_name'] }}<T> tempNode = new {{ configure.boson_option['semantic_node_class_name'] }}<>();
                tempNode.setReduceNumber(node.getReduceNumber());
                tempNode.setText(node.getText());
                semanticsNode.append(tempNode);
            }
        }
        if (this._semanticActionMapping.containsKey(grammarName)) {
            return this._semanticActionMapping.get(grammarName).apply(semanticsNode);
        } else if (this._naiveReduceNumberSet.contains(grammarTree.getReduceNumber())) {
            if (semanticsNode.children().size() == 1) {
                return semanticsNode.get(0);
            } else {
                return semanticsNode;
            }
        } else {
            return semanticsNode;
        }
    }
}

