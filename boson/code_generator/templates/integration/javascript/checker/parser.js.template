{% if configure.boson_option['code_comment'] == 'yes' -%}
/*
    {{ configure.boson_title }} - {{ configure.boson_description }}

        Author: {{ configure.boson_author }}
        Email:  {{ configure.boson_email }}
        Site:   {{ configure.boson_url }}

    File: "{{ configure.boson_option['parser_class_name'] }}.js"
    These codes ware generated by the boson Java code generator.
*/

{% endif -%}
export class {{ configure.boson_option['parser_class_name'] }} {
    constructor() {
    }

    check(tokenList) {
        let analysisStack = [0];
        let tokenIndex = 0;
        while (tokenIndex < tokenList.length) {
            const token = tokenList[tokenIndex];
            const currentState = analysisStack[analysisStack.length - 1];
            {%- if configure.boson_option['parser_sparse_table'] == 'yes' %}
            let operation = '{{ configure.boson_table_sign_error }}';
            const terminalIndex = this._terminalIndexMapping[token.symbol];
            if (this._sparseActionTable.hasOwnProperty(currentState)) {
                const actions = this._sparseActionTable[currentState];
                if (actions.hasOwnProperty(terminalIndex)) {
                    operation = actions[terminalIndex];
                }
            }
            {%- else %}
            operation = this._actionTable[currentState][this._terminalIndexMapping[token.symbol]];
            {%- endif %}
            const operationFlag = operation[0];
            if (operationFlag === '{{ configure.boson_table_sign_error }}') {
                return tokenIndex;
            } else if (operationFlag === '{{ configure.boson_table_sign_shift }}') {
                analysisStack.push(parseInt(operation.substring(1)));
                tokenIndex++;
            } else if (operationFlag === '{{ configure.boson_table_sign_reduce }}') {
                const statementIndex = parseInt(operation.substring(1));
                const reduceCount = this._reduceSymbolCount[statementIndex];
                for (let i = 0; i < reduceCount; i++) {
                    analysisStack.pop();
                }
                const currentState = analysisStack[analysisStack.length - 1];
                const currentNonTerminalIndexMapping = this._reduceNonTerminalIndex[statementIndex];
                {%- if configure.boson_option['parser_sparse_table'] == 'yes' %}
                let gotoNextState = -1;
                if (this._sparseGotoTable.hasOwnProperty(currentState)) {
                    const gotoTable = this._sparseGotoTable[currentState];
                    if (gotoTable.hasOwnProperty(currentNonTerminalIndexMapping)) {
                        gotoNextState = gotoTable[currentNonTerminalIndexMapping];
                    }
                }
                {%- else %}
                const gotoNextState = this._gotoTable[currentState][currentNonTerminalIndexMapping];
                {%- endif %}
                if (gotoNextState === {{ configure.boson_invalid_goto }}) {
                    throw 'Invalid goto action.';
                }
                analysisStack.push(gotoNextState);
            } else if (operationFlag === '{{ configure.boson_table_sign_accept }}') {
                return this._checkPassIndex;
            } else {
                throw 'Invalid action.';
            }
        }
        throw 'Analyzer unusual exit.';
    }

    _terminalIndexMapping = {
        {%- for terminal, index in parser.terminal_index_mapping.items() %}
        '{{ terminal }}': {{ index }}
        {%- if not loop.last %},{% endif -%}
        {%- endfor %}
    };
    {%- if configure.boson_option['parser_sparse_table'] == 'yes' %}
    _sparseActionTable = {
        {%- for i, sub_table in parser.sparse_action_table.items() %}
        {{ i }}: {
        {%- for j, each in sub_table.items() -%}
        {{ j }}: '{{ each }}'
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
        }
        {%- if not loop.last %}, {% endif -%}
        {%- endfor %}
    };
    _sparseGotoTable = {
        {%- for i, sub_table in parser.sparse_goto_table.items() %}
        {{ i }}: {
        {%- for j, each in sub_table.items() -%}
        {{ j }}: {{ each }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
        }
        {%- if not loop.last %}, {% endif -%}
        {%- endfor %}
    };
    {%- else %}
    _actionTable = [
        {%- for line in parser.action_table %}
        [
            {%- for each in line -%}
            '{{ each }}'
            {%- if not loop.last %}, {% endif -%}
            {%- endfor -%}
        ]
        {%- if not loop.last %},{% endif -%}
        {%- endfor %}
    ];
    _gotoTable = [
        {%- for line in parser.goto_table %}
        [
            {%- for each in line -%}
            {{ each }}
            {%- if not loop.last %}, {% endif -%}
            {%- endfor -%}
        ]
        {%- if not loop.last %},{% endif -%}
        {%- endfor %}
    ];
    {%- endif %}
    _sentenceIndexGrammarTupleMapping = {
        {%- for sentence_index, grammar_tuple in parser.sentence_index_grammar_tuple_mapping.items() %}
        {{ sentence_index }}: [
        {%- for node in grammar_tuple -%}
        '{{ node }}'
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
        ]
        {%- if not loop.last %},{% endif -%}
        {%- endfor %}
    };
    _reduceSymbolCount = [
        {%- for count in parser.reduce_symbol_count -%}
        {{ count }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    ];
    _reduceNonTerminalIndex = [
        {%- for index in parser.reduce_non_terminal_index -%}
        {{ index }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    ];
    _noneGrammarTupleReduceSet = new Set([
        {%- for index in parser.none_grammar_tuple_sentence_index_set -%}
        {{ index }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    ]);
    _checkPassIndex = {{ configure.boson_check_pass_index }};
}

