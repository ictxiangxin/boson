{% if configure.boson_option['code_comment'] == 'yes' -%}
/*
    {{ configure.boson_title }} - {{ configure.boson_description }}

        Author: {{ configure.boson_author }}
        Email:  {{ configure.boson_email }}
        Site:   {{ configure.boson_url }}

    File: "interpreter.js"
    These codes ware generated by the boson JavaScript code generator.
*/

{% endif -%}
export class {{ configure.boson_option['interpreter_class_name'] }} {
    constructor() {
        this._reduceNumberGrammarNameMapping = {
            {%- for reduce_number, grammarName in parser.reduce_number_grammar_name_mapping.items() %}
            {{ reduce_number }}: "{{ grammarName }}"
            {%- if not loop.last %}, {% endif -%}
            {%- endfor %}
        };
        this._naiveReduceNumberSet = new Set([
            {%- for reduce_number in parser.naive_reduce_number_set -%}
            {{ reduce_number }}
            {%- if not loop.last %}, {% endif -%}
            {%- endfor -%}
        ]);
        this._semanticActionMapping = {};
    }

    execute(grammarTree) {
        return this._semanticsAnalysis(grammarTree);
    }

    registerAction(reduceName, functionObject) {
        this._semanticActionMapping[reduceName] = functionObject;
    }

    _semanticsAnalysis(grammarTree) {
        let grammarName = null;
        if (this._reduceNumberGrammarNameMapping.hasOwnProperty(grammarTree.getReduceNumber())) {
            grammarName = this._reduceNumberGrammarNameMapping[grammarTree.getReduceNumber()];
        } else {
            grammarName = "{{ configure.boson_grammar_name_prefix }}hidden";
        }
        let semanticsNode = [];
        for (const index in grammarTree.children()) {
            const node = grammarTree.children()[index];
            if (!node.children().isEmpty()) {
                semanticsNode.push(this._semanticsAnalysis(node));
            } else {
                semanticsNode.push(node);
            }
        }
        if (this._semanticActionMapping.hasOwnProperty(grammarName)) {
            return this._semanticActionMapping[grammarName](semanticsNode);
        } else if (this._naiveReduceNumberSet.has(grammarTree.getReduceNumber())) {
            if (semanticsNode.length === 1) {
                return semanticsNode[0];
            } else {
                return semanticsNode;
            }
        } else {
            return semanticsNode;
        }
    }
}

