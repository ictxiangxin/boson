"""
    Boson v0.8 - Grammar analyzer generator

        Author: ict
        Email:  ictxiangxin@hotmail.com
        Site:   https://github.com/ictxiangxin/boson

    This code was generated by boson python code generator.

         0: argument -> literal
         1: argument -> name
         2: argument_list -> argument
         3: argument_list -> argument_list argument
         4: closure -> plus
         5: closure -> star
         6: closure -> ~
         7: command_statement -> command argument_list end
         8: complex_element -> bracket_l element_list bracket_r
         9: complex_element -> parentheses_l element_list parentheses_r closure
        10: derivation -> derivation_body
        11: derivation -> derivation_body assign grammar_structure
        12: derivation_body -> element_list
        13: derivation_body -> null
        14: derivation_body -> ~
        15: derivation_list -> derivation
        16: derivation_list -> derivation_list or derivation
        17: element -> complex_element
        18: element -> literal
        19: element -> name closure
        20: element_list -> element
        21: element_list -> element_list element
        22: grammar -> grammar statement
        23: grammar -> statement
        24: grammar_structure -> grammar_tuple
        25: grammar_structure -> name grammar_tuple
        26: grammar_tuple -> parentheses_l node_list parentheses_r
        27: node_element -> node_item
        28: node_element -> node_item grammar_tuple
        29: node_item -> node
        30: node_item -> star node
        31: node_list -> node_element
        32: node_list -> node_list comma node_element
        33: reduction_statement -> name reduce derivation_list end
        34: statement -> command_statement
        35: statement -> reduction_statement
"""


class BosonGrammar:
    def __init__(self):
        self.__grammar_tree = None
        self.__error_index = None

    def get_grammar_tree(self):
        return self.__grammar_tree

    def set_grammar_tree(self, grammar_tree: tuple):
        self.__grammar_tree = grammar_tree

    grammar_tree = property(get_grammar_tree, set_grammar_tree)

    def get_error_index(self):
        return self.__error_index

    def set_error_index(self, error_index: int):
        self.__error_index = error_index

    error_index = property(get_error_index, set_error_index)


class BosonBNFAnalyzer:
    def __init__(self):
        self.__terminal_index = {
            'comma': 11,
            'parentheses_l': 9,
            'parentheses_r': 0,
            'plus': 12,
            'or': 2,
            'bracket_r': 3,
            'reduce': 4,
            'end': 5,
            'bracket_l': 14,
            'node': 6,
            'literal': 15,
            'name': 7,
            'star': 8,
            '$': 13,
            'command': 16,
            'assign': 10,
            'null': 1
        }
        self.__action_table = {
            0: {16: 's6', 7: 's1'},
            1: {4: 's7'},
            2: {16: 'r35', 13: 'r35', 7: 'r35'},
            3: {16: 'r24', 13: 'r24', 7: 'r24'},
            4: {16: 's6', 13: 'a', 7: 's1'},
            5: {16: 'r36', 13: 'r36', 7: 'r36'},
            6: {15: 's11', 7: 's12'},
            7: {1: 's17', 2: 'r15', 5: 'r15', 7: 's16', 9: 's13', 10: 'r15', 14: 's22', 15: 's14'},
            8: {16: 'r23', 13: 'r23', 7: 'r23'},
            9: {15: 's11', 5: 's25', 7: 's12'},
            10: {15: 'r3', 5: 'r3', 7: 'r3'},
            11: {15: 'r1', 5: 'r1', 7: 'r1'},
            12: {15: 'r2', 5: 'r2', 7: 'r2'},
            13: {9: 's13', 15: 's14', 14: 's22', 7: 's16'},
            14: {0: 'r19', 2: 'r19', 3: 'r19', 5: 'r19', 7: 'r19', 9: 'r19', 10: 'r19', 14: 'r19', 15: 'r19'},
            15: {0: 'r18', 2: 'r18', 3: 'r18', 5: 'r18', 7: 'r18', 9: 'r18', 10: 'r18', 14: 'r18', 15: 'r18'},
            16: {0: 'r7', 2: 'r7', 3: 'r7', 5: 'r7', 7: 'r7', 8: 's28', 9: 'r7', 10: 'r7', 12: 's29', 14: 'r7', 15: 'r7'},
            17: {2: 'r14', 10: 'r14', 5: 'r14'},
            18: {2: 's30', 5: 's31'},
            19: {0: 'r21', 2: 'r21', 3: 'r21', 5: 'r21', 7: 'r21', 9: 'r21', 10: 'r21', 14: 'r21', 15: 'r21'},
            20: {2: 'r11', 10: 's32', 5: 'r11'},
            21: {2: 'r13', 5: 'r13', 7: 's16', 9: 's13', 10: 'r13', 14: 's22', 15: 's14'},
            22: {9: 's13', 15: 's14', 14: 's22', 7: 's16'},
            23: {2: 'r16', 5: 'r16'},
            24: {15: 'r4', 5: 'r4', 7: 'r4'},
            25: {16: 'r8', 13: 'r8', 7: 'r8'},
            26: {0: 's35', 9: 's13', 15: 's14', 14: 's22', 7: 's16'},
            27: {0: 'r20', 2: 'r20', 3: 'r20', 5: 'r20', 7: 'r20', 9: 'r20', 10: 'r20', 14: 'r20', 15: 'r20'},
            28: {0: 'r6', 2: 'r6', 3: 'r6', 5: 'r6', 7: 'r6', 9: 'r6', 10: 'r6', 14: 'r6', 15: 'r6'},
            29: {0: 'r5', 2: 'r5', 3: 'r5', 5: 'r5', 7: 'r5', 9: 'r5', 10: 'r5', 14: 'r5', 15: 'r5'},
            30: {1: 's17', 2: 'r15', 5: 'r15', 7: 's16', 9: 's13', 10: 'r15', 14: 's22', 15: 's14'},
            31: {16: 'r34', 13: 'r34', 7: 'r34'},
            32: {9: 's38', 7: 's39'},
            33: {0: 'r22', 2: 'r22', 3: 'r22', 5: 'r22', 7: 'r22', 9: 'r22', 10: 'r22', 14: 'r22', 15: 'r22'},
            34: {15: 's14', 9: 's13', 3: 's41', 14: 's22', 7: 's16'},
            35: {0: 'r7', 2: 'r7', 3: 'r7', 5: 'r7', 7: 'r7', 8: 's28', 9: 'r7', 10: 'r7', 12: 's29', 14: 'r7', 15: 'r7'},
            36: {2: 'r17', 5: 'r17'},
            37: {2: 'r25', 5: 'r25'},
            38: {8: 's47', 6: 's43'},
            39: {9: 's38'},
            40: {2: 'r12', 5: 'r12'},
            41: {0: 'r9', 2: 'r9', 3: 'r9', 5: 'r9', 7: 'r9', 9: 'r9', 10: 'r9', 14: 'r9', 15: 'r9'},
            42: {0: 'r10', 2: 'r10', 3: 'r10', 5: 'r10', 7: 'r10', 9: 'r10', 10: 'r10', 14: 'r10', 15: 'r10'},
            43: {0: 'r30', 9: 'r30', 11: 'r30'},
            44: {0: 's49', 11: 's50'},
            45: {0: 'r28', 9: 's38', 11: 'r28'},
            46: {0: 'r32', 11: 'r32'},
            47: {6: 's52'},
            48: {2: 'r26', 5: 'r26'},
            49: {0: 'r27', 2: 'r27', 11: 'r27', 5: 'r27'},
            50: {8: 's47', 6: 's43'},
            51: {0: 'r29', 11: 'r29'},
            52: {0: 'r31', 9: 'r31', 11: 'r31'},
            53: {0: 'r33', 11: 'r33'}
        }
        self.__goto_table = {
            0: {8: 5, 1: 4, 3: 3, 5: 2},
            32: {0: 37, 18: 40},
            34: {13: 33, 15: 15},
            35: {7: 42},
            4: {8: 5, 3: 8, 5: 2},
            38: {9: 46, 2: 44, 4: 45},
            6: {16: 10, 12: 9},
            7: {17: 21, 10: 18, 11: 23, 13: 19, 14: 20, 15: 15},
            9: {16: 24},
            39: {0: 48},
            13: {17: 26, 13: 19, 15: 15},
            45: {0: 51},
            16: {7: 27},
            50: {9: 53, 4: 45},
            21: {13: 33, 15: 15},
            22: {17: 34, 13: 19, 15: 15},
            26: {13: 33, 15: 15},
            30: {17: 21, 11: 36, 13: 19, 14: 20, 15: 15}
        }
        self.__node_table = {
            26: ['@', 'p1'],
            32: ['@', 'p0', 'p2'],
            9: ['@', 'p1', 'p3'],
            8: ['@', 'p1'],
            11: ['@', 'p0', 'p2'],
            16: ['@', 'p0', 'p2'],
            7: ['@', 'p0', 'p1'],
            33: ['@', 'p0', 'p2']
        }
        self.__reduce_symbol_sum = [1, 1, 1, 2, 1, 1, 0, 3, 3, 4, 1, 3, 1, 1, 0, 1, 3, 1, 1, 2, 1, 2, 2, 1, 1, 2, 3, 1, 2, 1, 2, 1, 3, 4, 1, 1]
        self.__reduce_to_non_terminal_index = [16, 16, 12, 12, 7, 7, 7, 5, 15, 15, 11, 11, 14, 14, 14, 10, 10, 13, 13, 13, 17, 17, 1, 1, 18, 18, 0, 9, 9, 4, 4, 2, 2, 8, 3, 3]

    def grammar_analysis(self, token_list):
        grammar = BosonGrammar()
        analysis_stack = [0]
        symbol_stack = []
        token_index = 0
        while token_index < len(token_list):
            token = token_list[token_index]
            current_state = analysis_stack[-1]
            operation = self.__action_table.get(current_state, {}).get(self.__terminal_index[token.symbol], 'e')
            operation_flag = operation[0]
            if operation_flag == 'e':
                grammar.error_index = token_index
                return grammar
            elif operation_flag == 's':
                state_number = int(operation[1:])
                analysis_stack.append(state_number)
                token_index += 1
                symbol_stack.append(token.text)
            elif operation_flag == 'r':
                statement_index = int(operation[1:]) - 1
                reduce_sum = self.__reduce_symbol_sum[statement_index]
                for _ in range(reduce_sum):
                    analysis_stack.pop()
                current_state = analysis_stack[-1]
                current_non_terminal_index = self.__reduce_to_non_terminal_index[statement_index]
                goto_next_state = self.__goto_table.get(current_state, {}).get(current_non_terminal_index, -1)
                if goto_next_state == -1:
                    raise ValueError('Invalid goto action: state={}, non-terminal={}'.format(current_state, current_non_terminal_index))
                analysis_stack.append(goto_next_state)
                if statement_index in self.__node_table:
                    temp_grammar_tuple_list = []
                    real_temp_grammar_tuple_list = []
                    for _ in range(reduce_sum):
                        temp_grammar_tuple_list.insert(0, symbol_stack.pop())
                    for i in self.__node_table[statement_index]:
                        if i == '@':
                            real_temp_grammar_tuple_list.append(statement_index)
                        else:
                            real_i = int(i[1:])
                            if i[0] == 'u':
                                real_temp_grammar_tuple_list += temp_grammar_tuple_list[real_i]
                            elif i[0] == 'p':
                                real_temp_grammar_tuple_list.append(temp_grammar_tuple_list[real_i])
                            else:
                                ValueError('Invalid node type: node={}'.format(i))
                    symbol_stack.append(tuple(real_temp_grammar_tuple_list))
                elif statement_index in [0, 1, 2, 3, 4, 5, 6, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 34, 35]:
                    temp_grammar_tuple_list = []
                    for _ in range(reduce_sum):
                        temp_grammar_tuple_list.insert(0, symbol_stack.pop())
                    temp_grammar_tuple_list.insert(0, statement_index)
                    symbol_stack.append(tuple(temp_grammar_tuple_list))
                else:
                    raise ValueError('Invalid reduce number: reduce={}'.format(statement_index))
            elif operation_flag == 'a':
                grammar.grammar_tree = symbol_stack[0]
                return grammar
            else:
                raise ValueError('Invalid action: action={}'.format(operation))
        raise RuntimeError('Analyzer unusual exit.')
