"""
    Boson v0.8 - Grammar analyzer generator

        Author: ict
        Email:  ictxiangxin@hotmail.com
        Site:   https://github.com/ictxiangxin/boson

    This code was generated by boson python code generator.

         0: command_statement -> command element_list end
         1: derivation -> derivation_body
         2: derivation -> derivation_body grammar_tuple
         3: derivation_body -> element_list
         4: derivation_body -> null
         5: derivation_body -> ~
         6: derivation_list -> derivation
         7: derivation_list -> derivation_list or derivation
         8: element -> literal
         9: element -> name
        10: element_list -> element
        11: element_list -> element_list element
        12: grammar -> grammar statement
        13: grammar -> statement
        14: grammar_tuple -> bracket_l node_list bracket_r
        15: node_list -> node
        16: node_list -> node_list comma node
        17: reduction_statement -> name reduce derivation_list end
        18: start -> grammar
        19: statement -> command_statement
        20: statement -> reduction_statement
"""


class BosonGrammar:
    def __init__(self):
        self.__grammar_tree = None
        self.__error_index = None

    def get_grammar_tree(self):
        return self.__grammar_tree

    def set_grammar_tree(self, grammar_tree: tuple):
        self.__grammar_tree = grammar_tree

    grammar_tree = property(get_grammar_tree, set_grammar_tree)

    def get_error_index(self):
        return self.__error_index

    def set_error_index(self, error_index: int):
        self.__error_index = error_index

    error_index = property(get_error_index, set_error_index)


class BosonBNFAnalyzer:
    def __init__(self):
        self.__terminal_index = {
            'name': 0,
            'null': 2,
            '$': 1,
            'end': 3,
            'comma': 4,
            'node': 5,
            'command': 6,
            'bracket_l': 7,
            'bracket_r': 8,
            'or': 9,
            'reduce': 10,
            'literal': 11
        }
        self.__action_table = [
            ['s1', 'e', 'e', 'e', 'e', 'e', 's2', 'e', 'e', 'e', 'e', 'e', 'e'],
            ['e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 's8', 'e', 'e'],
            ['s12', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 's10', 'e'],
            ['r20', 'r20', 'e', 'e', 'e', 'e', 'r20', 'e', 'e', 'e', 'e', 'e', 'e'],
            ['s1', 'r19', 'e', 'e', 'e', 'e', 's2', 'e', 'e', 'e', 'e', 'e', 'e'],
            ['r21', 'r21', 'e', 'e', 'e', 'e', 'r21', 'e', 'e', 'e', 'e', 'e', 'e'],
            ['e', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'],
            ['r14', 'r14', 'e', 'e', 'e', 'e', 'r14', 'e', 'e', 'e', 'e', 'e', 'e'],
            ['s12', 'e', 's14', 'r6', 'e', 'e', 'e', 'r6', 'e', 'r6', 'e', 's10', 'e'],
            ['s12', 'e', 'e', 's19', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 's10', 'e'],
            ['r9', 'e', 'e', 'r9', 'e', 'e', 'e', 'r9', 'e', 'r9', 'e', 'r9', 'e'],
            ['r11', 'e', 'e', 'r11', 'e', 'e', 'e', 'r11', 'e', 'r11', 'e', 'r11', 'e'],
            ['r10', 'e', 'e', 'r10', 'e', 'e', 'e', 'r10', 'e', 'r10', 'e', 'r10', 'e'],
            ['r13', 'r13', 'e', 'e', 'e', 'e', 'r13', 'e', 'e', 'e', 'e', 'e', 'e'],
            ['e', 'e', 'e', 'r5', 'e', 'e', 'e', 'r5', 'e', 'r5', 'e', 'e', 'e'],
            ['e', 'e', 'e', 's21', 'e', 'e', 'e', 'e', 'e', 's22', 'e', 'e', 'e'],
            ['s12', 'e', 'e', 'r4', 'e', 'e', 'e', 'r4', 'e', 'r4', 'e', 's10', 'e'],
            ['e', 'e', 'e', 'r7', 'e', 'e', 'e', 'e', 'e', 'r7', 'e', 'e', 'e'],
            ['e', 'e', 'e', 'r2', 'e', 'e', 'e', 's24', 'e', 'r2', 'e', 'e', 'e'],
            ['r1', 'r1', 'e', 'e', 'e', 'e', 'r1', 'e', 'e', 'e', 'e', 'e', 'e'],
            ['r12', 'e', 'e', 'r12', 'e', 'e', 'e', 'r12', 'e', 'r12', 'e', 'r12', 'e'],
            ['r18', 'r18', 'e', 'e', 'e', 'e', 'r18', 'e', 'e', 'e', 'e', 'e', 'e'],
            ['s12', 'e', 's14', 'r6', 'e', 'e', 'e', 'r6', 'e', 'r6', 'e', 's10', 'e'],
            ['e', 'e', 'e', 'r3', 'e', 'e', 'e', 'e', 'e', 'r3', 'e', 'e', 'e'],
            ['e', 'e', 'e', 'e', 'e', 's26', 'e', 'e', 'e', 'e', 'e', 'e', 'e'],
            ['e', 'e', 'e', 'r8', 'e', 'e', 'e', 'e', 'e', 'r8', 'e', 'e', 'e'],
            ['e', 'e', 'e', 'e', 'r16', 'e', 'e', 'e', 'r16', 'e', 'e', 'e', 'e'],
            ['e', 'e', 'e', 'e', 's28', 'e', 'e', 'e', 's29', 'e', 'e', 'e', 'e'],
            ['e', 'e', 'e', 'e', 'e', 's30', 'e', 'e', 'e', 'e', 'e', 'e', 'e'],
            ['e', 'e', 'e', 'r15', 'e', 'e', 'e', 'e', 'e', 'r15', 'e', 'e', 'e'],
            ['e', 'e', 'e', 'e', 'r17', 'e', 'e', 'e', 'r17', 'e', 'e', 'e', 'e']
        ]
        self.__goto_table = [
            [3, 4, -1, -1, -1, 5, -1, -1, -1, -1, -1, 6, 7],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, 11, -1, -1, 9, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [3, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, 13],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, 15, -1, 17, -1, 11, -1, -1, 16, 18, -1, -1],
            [-1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, 25, -1, 11, -1, -1, 16, 18, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
        ]
        self.__node_table = {
            17: ['@', 'p0', 'p2'],
            16: ['@', 'p0', 'p2'],
            0: ['@', 'p0', 'p1'],
            7: ['@', 'p0', 'p2'],
            14: ['@', 'p1']
        }
        self.__reduce_symbol_sum = [3, 1, 2, 1, 1, 0, 1, 3, 1, 1, 1, 2, 2, 1, 3, 1, 3, 4, 1, 1, 1]
        self.__reduce_to_non_terminal_index = [0, 4, 4, 10, 10, 10, 2, 2, 6, 6, 9, 9, 1, 1, 3, 7, 7, 5, 11, 12, 12]

    def grammar_analysis(self, token_list):
        grammar = BosonGrammar()
        analysis_stack = [0]
        symbol_stack = []
        token_index = 0
        while token_index < len(token_list):
            token = token_list[token_index]
            current_state = analysis_stack[-1]
            operation = self.__action_table[current_state][self.__terminal_index[token.symbol]]
            operation_flag = operation[0]
            if operation_flag == 'e':
                grammar.error_index = token_index
                return grammar
            elif operation_flag == 's':
                state_number = int(operation[1:])
                analysis_stack.append(state_number)
                token_index += 1
                symbol_stack.append(token.text)
            elif operation_flag == 'r':
                statement_index = int(operation[1:]) - 1
                reduce_sum = self.__reduce_symbol_sum[statement_index]
                for _ in range(reduce_sum):
                    analysis_stack.pop()
                current_state = analysis_stack[-1]
                current_non_terminal_index = self.__reduce_to_non_terminal_index[statement_index]
                goto_next_state = self.__goto_table[current_state][current_non_terminal_index]
                if goto_next_state == -1:
                    raise ValueError('Invalid goto action: state={}, non-terminal={}'.format(current_state, current_non_terminal_index))
                analysis_stack.append(goto_next_state)
                if statement_index in self.__node_table:
                    temp_grammar_tuple_list = []
                    real_temp_grammar_tuple_list = []
                    for _ in range(reduce_sum):
                        temp_grammar_tuple_list.insert(0, symbol_stack.pop())
                    for i in self.__node_table[statement_index]:
                        if i == '@':
                            real_temp_grammar_tuple_list.append(statement_index)
                        else:
                            real_i = int(i[1:])
                            if i[0] == 'u':
                                real_temp_grammar_tuple_list += temp_grammar_tuple_list[real_i]
                            elif i[0] == 'p':
                                real_temp_grammar_tuple_list.append(temp_grammar_tuple_list[real_i])
                            else:
                                ValueError('Invalid node type: node={}'.format(i))
                    symbol_stack.append(tuple(real_temp_grammar_tuple_list))
                elif statement_index in [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20]:
                    temp_grammar_tuple_list = []
                    for _ in range(reduce_sum):
                        temp_grammar_tuple_list.insert(0, symbol_stack.pop())
                    temp_grammar_tuple_list.insert(0, statement_index)
                    symbol_stack.append(tuple(temp_grammar_tuple_list))
                else:
                    raise ValueError('Invalid reduce number: reduce={}'.format(statement_index))
            elif operation_flag == 'a':
                grammar.grammar_tree = symbol_stack[0]
                return grammar
            else:
                raise ValueError('Invalid action: action={}'.format(operation))
        raise RuntimeError('Analyzer unusual exit.')
