__author__ = 'ict'

import sys

from bs_code_generator_helper import *


def bs_generate_python_code(analyzer_table, output=sys.stdout):
    terminal_index, non_terminal_index, action_table, goto_table, reduce_symbol_sum, reduce_to_non_terminal, sentence_list = \
        analyzer_table
    terminal_index_reverse_map = {}
    non_terminal_index_reverse_map = {}
    max_terminal_len = 0
    max_non_terminal_len = 0
    max_action_len = 0
    max_end_action_len = 0
    max_goto_len = 0
    max_end_goto_len = 0
    max_reduce_number_len = len(str(len(sentence_list)))
    for terminal, index in terminal_index.items():
        terminal_index_reverse_map[index] = terminal
        if len(terminal) > max_terminal_len:
            max_terminal_len = len(terminal)
    for non_terminal, index in non_terminal_index.items():
        non_terminal_index_reverse_map[index] = non_terminal
        if len(non_terminal) > max_non_terminal_len:
            max_non_terminal_len = len(non_terminal)
    for action_list in action_table:
        for action_index in range(len(action_list)):
            action = action_list[action_index]
            if len(action) > max_action_len:
                max_action_len = len(action)
            if action_index == len(action_list) - 1:
                if len(action) > max_end_action_len:
                    max_end_action_len = len(action)
    for goto_list in goto_table:
        for goto_index in range(len(goto_list)):
            goto_action = goto_list[goto_index]
            if len(str(goto_action)) > max_goto_len:
                max_goto_len = len(str(goto_action))
            if goto_index == len(goto_list) - 1:
                if len(str(goto_action)) > max_end_goto_len:
                    max_end_goto_len = len(str(goto_action))
    bs_code_output(output, "\"\"\"\n")
    bs_code_output(output, boson_title + "\n", 1)
    bs_code_output(output, "By: " + boson_author + "\n", 1)
    bs_code_output(output, "Email: " + boson_author_email + "\n", 1)
    bs_code_output(output, "\n")
    bs_code_output(output, "This code generated by boson python code generator.\n", 1)
    bs_code_output(output, "You need fill some reduce code to let it available.\n", 1)
    bs_code_output(output, "\"\"\"\n")
    bs_code_output(output, "\n")
    bs_code_output(output, "\n")
    bs_code_output(output, "terminal_index = {\n")
    for index in range(len(terminal_index_reverse_map)):
        terminal = terminal_index_reverse_map[index]
        bs_code_output(output, "\"%s\": " % terminal + " " * (max_terminal_len - len(terminal)) + "%d,\n" % index, 1)
    bs_code_output(output, "}\n")
    bs_code_output(output, "\n")
    bs_code_output(output, "action_table = [\n")
    for action_list in action_table:
        bs_code_output(output, "[", 1)
        for action_index in range(len(action_list) - 1):
            action = action_list[action_index]
            bs_code_output(output, "\"%s\", " % action + " " * (max_action_len - len(action)))
        bs_code_output(output,  " " * (max_end_action_len - len(action_list[-1])) + "\"%s\"" % action_list[-1])
        bs_code_output(output, "],\n")
    bs_code_output(output, "]\n")
    bs_code_output(output, "\n")
    bs_code_output(output, "non_terminal_index = {\n")
    for index in range(len(non_terminal_index_reverse_map)):
        non_terminal = non_terminal_index_reverse_map[index]
        bs_code_output(output, "\"%s\": " % non_terminal + " " * (max_non_terminal_len - len(non_terminal)) + "%d,\n" % index, 1)
    bs_code_output(output, "}\n")
    bs_code_output(output, "\n")
    bs_code_output(output, "goto_table = [\n")
    for goto_list in goto_table:
        bs_code_output(output, "[", 1)
        for goto_index in range(len(goto_list) - 1):
            goto_action = goto_list[goto_index]
            bs_code_output(output, "%d, " % goto_action + " " * (max_goto_len - len(str(goto_action))))
        bs_code_output(output, " " * (max_end_goto_len - len(str(goto_list[-1]))) + str(goto_list[-1]))
        bs_code_output(output, "],\n")
    bs_code_output(output, "]\n")
    bs_code_output(output, "\n")
    bs_code_output(output, "reduce_symbol_sum = {\n")
    for reduce_number, reduce_sum in reduce_symbol_sum.items():
        bs_code_output(output, "%d: " % reduce_number + " " * (max_reduce_number_len - len(str(reduce_number))) + "%d,\n" % reduce_sum, 1)
    bs_code_output(output, "}\n")
    bs_code_output(output, "\n")
    bs_code_output(output, "reduce_to_non_terminal = {\n")
    for reduce_number, reduce_non_terminal in reduce_to_non_terminal.items():
        bs_code_output(output, "%d: " % reduce_number + " " * (max_reduce_number_len - len(str(reduce_number))) + "\"%s\",\n" % reduce_non_terminal, 1)
    bs_code_output(output, "}\n")
    bs_code_output(output, "\n")
    bs_code_output(output, "\n")
    bs_code_output(output, "def grammar_analysis(token_line):\n")
    bs_code_output(output, "\"\"\"\n", 1)
    bs_code_output(output, "Add some data structure definition code here...\n", 2)
    bs_code_output(output, "\"\"\"\n", 1)
    bs_code_output(output, "stack = [0]\n", 1)
    bs_code_output(output, "token_index = 0\n", 1)
    bs_code_output(output, "while token_index < len(token_line):\n", 1)
    bs_code_output(output, "token = token_line[token_index]\n", 2)
    bs_code_output(output, "token_type = token[0]\n", 2)
    bs_code_output(output, "now_state = stack[-1]\n", 2)
    bs_code_output(output, "operation = action_table[now_state][terminal_index[token_type]]\n", 2)
    bs_code_output(output, "operation_flag = operation[0]\n", 2)
    bs_code_output(output, "if operation_flag == \"e\":\n", 2)
    bs_code_output(output, "raise Exception(\"Grammar error: \" + \" \".join([t[1] for t in token_line]))\n", 3)
    bs_code_output(output, "elif operation_flag == \"s\":\n", 2)
    bs_code_output(output, "operation_number = int(operation[1:])\n", 3)
    bs_code_output(output, "stack.append(operation_number)\n", 3)
    bs_code_output(output, "token_index += 1\n", 3)
    bs_code_output(output, "\"\"\"\n", 3)
    bs_code_output(output, "Add some code for shift action here...\n", 4)
    bs_code_output(output, "\"\"\"\n", 3)
    bs_code_output(output, "elif operation_flag == \"r\":\n", 2)
    bs_code_output(output, "operation_number = int(operation[1:])\n", 3)
    bs_code_output(output, "reduce_sum = reduce_symbol_sum[operation_number]\n", 3)
    bs_code_output(output, "for _ in range(reduce_sum):\n", 3)
    bs_code_output(output, "stack.pop()\n", 4)
    bs_code_output(output, "now_state = stack[-1]\n", 3)
    bs_code_output(output, "stack.append(goto_table[now_state][non_terminal_index[reduce_to_non_terminal[operation_number]]])\n", 3)
    bs_code_output(output, "if operation_number == 1:\n", 3)
    bs_code_output(output, "\"\"\"\n", 4)
    bs_code_output(output, "Add some code for reduce 1 here...\n", 5)
    bs_code_output(output, "%s -> %s\n" % (sentence_list[1][0], " ".join(sentence_list[1][1:])), 5)
    bs_code_output(output, "\"\"\"\n", 4)
    bs_code_output(output, "pass\n", 4)
    for reduce_index in range(2, len(sentence_list) - 1):
        bs_code_output(output, "elif operation_number == %d:\n" % reduce_index, 3)
        bs_code_output(output, "\"\"\"\n", 4)
        bs_code_output(output, "Add some code for reduce %d here...\n" % reduce_index, 5)
        bs_code_output(output, "%s -> %s\n" % (sentence_list[reduce_index][0], " ".join(sentence_list[reduce_index][1:])), 5)
        bs_code_output(output, "\"\"\"\n", 4)
        bs_code_output(output, "pass\n", 4)
    bs_code_output(output, "elif operation_number == %d:\n" % (len(sentence_list) - 1), 3)
    bs_code_output(output, "\"\"\"\n", 4)
    bs_code_output(output, "Add some code for reduce %d here...\n" % (len(sentence_list) - 1), 5)
    bs_code_output(output, "%s -> %s\n" % (sentence_list[len(sentence_list) - 1][0], " ".join(sentence_list[len(sentence_list) - 1][1:])), 5)
    bs_code_output(output, "\"\"\"\n", 4)
    bs_code_output(output, "pass\n", 4)
    bs_code_output(output, "else:\n", 3)
    bs_code_output(output, "raise Exception(\"Invalid reduce number: %d\" % operation_number)\n", 4)
    bs_code_output(output, "elif operation_flag == \"a\":\n", 2)
    bs_code_output(output, "break\n", 3)
    bs_code_output(output, "else:\n", 2)
    bs_code_output(output, "raise Exception(\"Invalid action: %s\" % operation)\n", 3)
    bs_code_output(output, "\"\"\"\n", 1)
    bs_code_output(output, "Add some postprocessing code here...\n", 2)
    bs_code_output(output, "\"\"\"\n", 1)