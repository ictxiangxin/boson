%TokenClassName RegularToken;
%LexerClassName RegularLexer;
%ParserClassName RegularParser;
%InterpreterClassName RegularInterpreter;
%GenerateInterpreter yes;
%GenerateLexer yes;
%CodeComment no;
%ParserSparseTable yes;
%StartSymbol regular_expression;


####################################
#        Lexical Definition        #
####################################
single_number    = <[0-9]>;
escape_character = <\\.>;
reference        = <\{[_a-zA-Z][_a-zA-Z0-9]*\}>@{reference};
normal_character = <[^0-9\\\(\)\[\]\{\}\^\.\*\+\-\?\,\|]>;


#####################################
#        Grammar Definition         #
#####################################
regular_expression: expression = regular_expression($0);

expression : branch ('|' branch)* = expression($0, *$1*($1));

branch: group+ = branch(*$0);

group: element [postfix] = group($0, *$1($0));

element : simple_element = simple_construct($0)
        | complex_element = complex_construct($0)
        | '.' = wildcard_character($0)
        ;

simple_element : character
               | escape_character
               ;

character : normal_character
          | single_number
          ;

complex_element : '[' ['^'] select_element+ ']' = select(*$1($0), $2)
                | '(' expression ')' = sub_expression($1)
                | reference = reference($0)
                ;

select_element : simple_element
               | character '-' character = ($0, $2)
               ;

postfix : '+' | '*' | '?'
        | '{' number ',' [number] '}' = ($1, *$3($0))
        | '{' number '}' = ($1, $1)
        ;

number : single_number+ = construct_number(*$0);
