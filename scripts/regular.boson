####################################
#              Option              #
####################################
%option {
    parser = {
        start_symbol = "regular_expression",
    },
    code = {
        generator = {
            comment = False,
        },
        class_name = {
            token = "RegularToken",
            lexer = "RegularLexer",
            parser = "RegularParser",
            interpreter = "RegularInterpreter",
        },
    }
};


####################################
#        Lexical Definition        #
####################################
reference = <\{[_a-zA-Z][_a-zA-Z0-9]*\}>@{reference};


#####################################
#        Grammar Definition         #
#####################################
regular_expression: expression = regular_expression($0);

expression : branch ('|' branch)* = expression($0, *$1[1]);

branch: group+ = branch(*$0);

group: element [postfix] = group($0, *$1);

element : simple_element = simple_construct($0)
        | complex_element = [0]
        | '.' = wildcard_character()
        ;

simple_element : character
               | <\\.> # Escape Character
               ;

character : <[^0-9\\\(\)\[\]\{\}\^\.\*\+\-\?\,\|]> # Normal Character
          | <\\u[0-9a-fA-F]{4}> = unicode($0) # Unicode Character
          | <[0-9]> # Number
          ;

complex_element : '[' ['^']@reverse select_element+@character_set ']' = select(*$reverse, $character_set)
                | '(' expression ')' = [1]
                | reference = reference($0)
                ;

select_element : simple_element
               | character@start '-' character@end = ($start, $end)
               ;

postfix : '+' | '*' | '?'
        | '{' number@min ',' [number]@max '}' = ($min, *$max)
        | '{' number '}' = ($1, $1)
        ;

number : <[0-9]>+ = construct_number(*$0);
