####################################
#              Option              #
####################################
%option {
    parser = {
        start_symbol = "regular_expression",
    },
    code = {
        generator = {
            comment = False,
        },
        class_name = {
            token = "RegularToken",
            lexer = "RegularLexer",
            parser = "RegularParser",
            interpreter = "RegularInterpreter",
        },
    }
};


####################################
#        Lexical Definition        #
####################################
single_number     = <[0-9]>;
unicode_character = <\\u[0-9a-fA-F]{4}>;
reference         = <\{[_a-zA-Z][_a-zA-Z0-9]*\}>@{reference};
escape_character  = <\\.>;
normal_character  = <[^0-9\\\(\)\[\]\{\}\^\.\*\+\-\?\,\|]>;


#####################################
#        Grammar Definition         #
#####################################
regular_expression: expression = regular_expression($0);

expression : branch ('|' branch)* = expression($0, *$1[$1]);

branch: group+ = branch(*$0);

group: element [postfix] = group($0, *$1);

element : simple_element = simple_construct($0)
        | complex_element = [$0]
        | '.' = wildcard_character()
        ;

simple_element : character
               | escape_character
               ;

character : normal_character
          | unicode_character = unicode($0)
          | single_number
          ;

complex_element : '[' ['^'] select_element+ ']' = select(*$1, $2)
                | '(' expression ')' = [$1]
                | reference = reference($0)
                ;

select_element : simple_element
               | character '-' character = ($0, $2)
               ;

postfix : '+' | '*' | '?'
        | '{' number ',' [number] '}' = ($1, *$3)
        | '{' number '}' = ($1, $1)
        ;

number : single_number+ = construct_number(*$0);
