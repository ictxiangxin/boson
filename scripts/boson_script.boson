####################################################################################################
#                                              Option                                              #
####################################################################################################
%option {
    parser = {
        start_symbol = 'boson',
    },
    code = {
        generator = {
            comment = False,
        },
    },
};


####################################################################################################
#                                        Lexical Definition                                        #
####################################################################################################
name    = <[_a-zA-Z][_a-zA-Z0-9]*>;
number  = <\-?[0-9]+|0x[0-9a-fA-F]+>;
string  = <".*[^\\]"|'.*[^\\]'>!;
regular = <\<.*[^\\]\>>!;
comment = <#[^\r\n]*>@{skip};
skip    = <[\ \t]+>@{skip};
newline = <\r\n|\n>@{skip, newline};


####################################################################################################
#                                        Grammar Definition                                        #
####################################################################################################
boson : statement+;

statement : command_statement
          | lexicon_statement
          | grammar_statement
          ;

command_statement : <%[_a-zA-Z]+>@command (name | string | attribute)+@arguments ';' = command($command, *$arguments);

lexicon_statement : name@lexicon_name '=' regular@regular '!'?@non_greedy ['@' '{' lexical_function '}']@functions ';'
                    = lexical_define($lexicon_name, $regular, *$non_greedy, $functions(*$2));

lexical_function : name (',' name)* = ($0, *$1[1]);

grammar_statement : name@reduce_name ':' derivation_list@list ';' = reduce($reduce_name, $list);

derivation_list : derivation ('|' derivation)* = ($0, *$1[1]);

derivation : derivation_body@body ['=' name?@name grammar_tuple@tuple attribute?@attribute]@postfix
             = ($body, *$postfix($name, $tuple, $attribute));

derivation_body : sentence | '~' | ;

sentence : element_definition+ = (*$0);

grammar_tuple : '(' [node_element_list] ')' = (*$1(*$0))
              | '[' number ']' = getter_tuple($1)
              ;

node_element_list : node_element (',' node_element)* = ($0, *$1[1]);

node_element : '*'?@unpack (<$[0-9]+>
             | <${name}>)@node_id [['*']@sub_unpack grammar_tuple@sub_tuple]@sub
               = grammar_node(*$unpack, *$node_id, *$sub(*$sub_unpack, $sub_tuple));

element_definition : element@element ['@' name@alias_name]@alias = element_definition($element, *$alias($alias_name));

element : complex_element
        | symbol@symbol closure?@closure = name_closure($symbol, *$closure);

symbol : name
       | string = literal($0)
       | regular@regular '!'?@no_greedy = regular($regular, *$no_greedy)
       ;

complex_element : '(' sub_derivation@sub ')' closure?@closure = complex_closure($sub, *$closure)
                | '[' sub_derivation@sub ']' = complex_optional($sub)
                ;

sub_derivation : sentence ('|' sentence)* = select($0, *$1[1]);

attribute : '{' key_value_list '}' = attribute($1);

key_value_list : key_value (',' key_value)* ','? = ($0, *$1[1]);

key_value : name '=' attribute_value = ($0, $2);

attribute_value : name | value_list | attribute
                | string = string($0)
                | number = number($0)
                ;

value_list : '[' attribute_value (',' attribute_value)+ ','? ']' = attribute_value_list($1, *$2[1]);

closure: '+' | '*' | '?';
